{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/lib/gup.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/lib/gup.js","mtime":1529418310673},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar identity = require('./identity');\n\nfunction wrap(d) {return [d];}\n\nmodule.exports = {\n\n    // The D3 data binding concept and the General Update Pattern promotes the idea of\n    // traversing into the scenegraph by using the `.data(fun, keyFun)` call.\n    // The `fun` is most often a `repeat`, ie. the elements beneath a `<g>` element need\n    // access to the same data, or a `descend`, which fans a scenegraph node into a bunch of\n    // of elements, e.g. points, lines, rows, requiring an array as input.\n    // The role of the `keyFun` is to identify what elements are being entered/exited/updated,\n    // otherwise D3 reverts to using a plain index which would screw up `transition`s.\n    keyFun: function(d) {return d.key;},\n    repeat: wrap,\n    descend: identity,\n\n    // Plotly.js uses a convention of storing the actual contents of the `calcData` as the\n    // element zero of a container array. These helpers are just used for clarity as a\n    // newcomer to the codebase may not know what the `[0]` is, and whether there can be further\n    // elements (not atm).\n    wrap: wrap,\n    unwrap: function(d) {return d[0];}\n};\n",null]}