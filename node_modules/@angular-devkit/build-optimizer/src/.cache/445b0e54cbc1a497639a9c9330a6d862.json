{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/text-cache/textcache.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/text-cache/textcache.js","mtime":1529418312210},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\n\nmodule.exports = textGet\n\nvar vectorizeText = require('vectorize-text')\n\nvar globals = window || process.global || {}\nvar __TEXT_CACHE  = globals.__TEXT_CACHE || {}\nglobals.__TEXT_CACHE = {}\n\nfunction unwrap(mesh) {\n  var cells     = mesh.cells\n  var positions = mesh.positions\n  var data      = new Float32Array(cells.length * 6)\n  var ptr       = 0\n  var shapeX    = 0\n  for(var i=0; i<cells.length; ++i) {\n    var tri = cells[i]\n    for(var j=0; j<3; ++j) {\n      var point = positions[tri[j]]\n      data[ptr++] = point[0]\n      data[ptr++] = point[1] + 1.4\n      shapeX      = Math.max(point[0], shapeX)\n    }\n  }\n  return {\n    data:  data,\n    shape: shapeX\n  }\n}\n\nfunction textGet(font, text, opts) {\n  var opts = opts || {}\n  var fontcache = __TEXT_CACHE[font]\n   if(!fontcache) {\n     fontcache = __TEXT_CACHE[font] = {\n       ' ': {\n         data:   new Float32Array(0),\n         shape: 0.2\n       }\n     }\n   }\n   var mesh = fontcache[text]\n   if(!mesh) {\n     if(text.length <= 1 || !/\\d/.test(text)) {\n       mesh = fontcache[text] = unwrap(vectorizeText(text, {\n         triangles:     true,\n         font:          font,\n         textAlign:     opts.textAlign || 'left',\n         textBaseline:  'alphabetic'\n       }))\n     } else {\n       var parts = text.split(/(\\d|\\s)/)\n       var buffer = new Array(parts.length)\n       var bufferSize = 0\n       var shapeX = 0\n       for(var i=0; i<parts.length; ++i) {\n         buffer[i] = textGet(font, parts[i])\n         bufferSize += buffer[i].data.length\n         shapeX += buffer[i].shape\n         if(i>0) {\n           shapeX += 0.02\n         }\n       }\n\n       var data = new Float32Array(bufferSize)\n       var ptr     = 0\n       var xOffset = -0.5 * shapeX\n       for(var i=0; i<buffer.length; ++i) {\n         var bdata = buffer[i].data\n         for(var j=0; j<bdata.length; j+=2) {\n           data[ptr++] = bdata[j] + xOffset\n           data[ptr++] = bdata[j+1]\n         }\n         xOffset += buffer[i].shape + 0.02\n       }\n\n       mesh = fontcache[text] = {\n         data:  data,\n         shape: shapeX\n       }\n     }\n   }\n\n   return mesh\n}\n",null]}