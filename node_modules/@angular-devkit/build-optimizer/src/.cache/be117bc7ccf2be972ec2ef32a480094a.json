{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/histogram/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/histogram/calc.js","mtime":1529418310721},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar arraysToCalcdata = require('../bar/arrays_to_calcdata');\nvar binFunctions = require('./bin_functions');\nvar normFunctions = require('./norm_functions');\nvar doAvg = require('./average');\nvar cleanBins = require('./clean_bins');\nvar oneMonth = require('../../constants/numerical').ONEAVGMONTH;\nvar getBinSpanLabelRound = require('./bin_label_vals');\n\nmodule.exports = function calc(gd, trace) {\n    // ignore as much processing as possible (and including in autorange) if bar is not visible\n    if(trace.visible !== true) return;\n\n    // depending on orientation, set position and size axes and data ranges\n    // note: this logic for choosing orientation is duplicated in graph_obj->setstyles\n    var pos = [];\n    var size = [];\n    var pa = Axes.getFromId(gd, trace.orientation === 'h' ?\n        (trace.yaxis || 'y') : (trace.xaxis || 'x'));\n    var mainData = trace.orientation === 'h' ? 'y' : 'x';\n    var counterData = {x: 'y', y: 'x'}[mainData];\n    var calendar = trace[mainData + 'calendar'];\n    var cumulativeSpec = trace.cumulative;\n    var i;\n\n    cleanBins(trace, pa, mainData);\n\n    var binsAndPos = calcAllAutoBins(gd, trace, pa, mainData);\n    var binSpec = binsAndPos[0];\n    var pos0 = binsAndPos[1];\n\n    var nonuniformBins = typeof binSpec.size === 'string';\n    var binEdges = [];\n    var bins = nonuniformBins ? binEdges : binSpec;\n    // make the empty bin array\n    var inc = [];\n    var counts = [];\n    var inputPoints = [];\n    var total = 0;\n    var norm = trace.histnorm;\n    var func = trace.histfunc;\n    var densityNorm = norm.indexOf('density') !== -1;\n    var i2, binEnd, n;\n\n    if(cumulativeSpec.enabled && densityNorm) {\n        // we treat \"cumulative\" like it means \"integral\" if you use a density norm,\n        // which in the end means it's the same as without \"density\"\n        norm = norm.replace(/ ?density$/, '');\n        densityNorm = false;\n    }\n\n    var extremeFunc = func === 'max' || func === 'min';\n    var sizeInit = extremeFunc ? null : 0;\n    var binFunc = binFunctions.count;\n    var normFunc = normFunctions[norm];\n    var isAvg = false;\n    var pr2c = function(v) { return pa.r2c(v, 0, calendar); };\n    var rawCounterData;\n\n    if(Lib.isArrayOrTypedArray(trace[counterData]) && func !== 'count') {\n        rawCounterData = trace[counterData];\n        isAvg = func === 'avg';\n        binFunc = binFunctions[func];\n    }\n\n    // create the bins (and any extra arrays needed)\n    // assume more than 1e6 bins is an error, so we don't crash the browser\n    i = pr2c(binSpec.start);\n\n    // decrease end a little in case of rounding errors\n    binEnd = pr2c(binSpec.end) + (i - Axes.tickIncrement(i, binSpec.size, false, calendar)) / 1e6;\n\n    while(i < binEnd && pos.length < 1e6) {\n        i2 = Axes.tickIncrement(i, binSpec.size, false, calendar);\n        pos.push((i + i2) / 2);\n        size.push(sizeInit);\n        inputPoints.push([]);\n        // nonuniform bins (like months) we need to search,\n        // rather than straight calculate the bin we're in\n        binEdges.push(i);\n        // nonuniform bins also need nonuniform normalization factors\n        if(densityNorm) inc.push(1 / (i2 - i));\n        if(isAvg) counts.push(0);\n        // break to avoid infinite loops\n        if(i2 <= i) break;\n        i = i2;\n    }\n    binEdges.push(i);\n\n    // for date axes we need bin bounds to be calcdata. For nonuniform bins\n    // we already have this, but uniform with start/end/size they're still strings.\n    if(!nonuniformBins && pa.type === 'date') {\n        bins = {\n            start: pr2c(bins.start),\n            end: pr2c(bins.end),\n            size: bins.size\n        };\n    }\n\n    // bin the data\n    // and make histogram-specific pt-number-to-cd-index map object\n    var nMax = size.length;\n    var uniqueValsPerBin = true;\n    var leftGap = Infinity;\n    var rightGap = Infinity;\n    var ptNumber2cdIndex = {};\n    for(i = 0; i < pos0.length; i++) {\n        var posi = pos0[i];\n        n = Lib.findBin(posi, bins);\n        if(n >= 0 && n < nMax) {\n            total += binFunc(n, i, size, rawCounterData, counts);\n            if(uniqueValsPerBin && inputPoints[n].length && posi !== pos0[inputPoints[n][0]]) {\n                uniqueValsPerBin = false;\n            }\n            inputPoints[n].push(i);\n            ptNumber2cdIndex[i] = n;\n\n            leftGap = Math.min(leftGap, posi - binEdges[n]);\n            rightGap = Math.min(rightGap, binEdges[n + 1] - posi);\n        }\n    }\n\n    var roundFn;\n    if(!uniqueValsPerBin) {\n        roundFn = getBinSpanLabelRound(leftGap, rightGap, binEdges, pa, calendar);\n    }\n\n    // average and/or normalize the data, if needed\n    if(isAvg) total = doAvg(size, counts);\n    if(normFunc) normFunc(size, total, inc);\n\n    // after all normalization etc, now we can accumulate if desired\n    if(cumulativeSpec.enabled) cdf(size, cumulativeSpec.direction, cumulativeSpec.currentbin);\n\n\n    var seriesLen = Math.min(pos.length, size.length);\n    var cd = [];\n    var firstNonzero = 0;\n    var lastNonzero = seriesLen - 1;\n\n    // look for empty bins at the ends to remove, so autoscale omits them\n    for(i = 0; i < seriesLen; i++) {\n        if(size[i]) {\n            firstNonzero = i;\n            break;\n        }\n    }\n    for(i = seriesLen - 1; i >= firstNonzero; i--) {\n        if(size[i]) {\n            lastNonzero = i;\n            break;\n        }\n    }\n\n    // create the \"calculated data\" to plot\n    for(i = firstNonzero; i <= lastNonzero; i++) {\n        if((isNumeric(pos[i]) && isNumeric(size[i]))) {\n            var cdi = {\n                p: pos[i],\n                s: size[i],\n                b: 0\n            };\n\n            // pts and p0/p1 don't seem to make much sense for cumulative distributions\n            if(!cumulativeSpec.enabled) {\n                cdi.pts = inputPoints[i];\n                if(uniqueValsPerBin) {\n                    cdi.p0 = cdi.p1 = (inputPoints[i].length) ? pos0[inputPoints[i][0]] : pos[i];\n                }\n                else {\n                    cdi.p0 = roundFn(binEdges[i]);\n                    cdi.p1 = roundFn(binEdges[i + 1], true);\n                }\n            }\n            cd.push(cdi);\n        }\n    }\n\n    if(cd.length === 1) {\n        // when we collapse to a single bin, calcdata no longer describes bin size\n        // so we need to explicitly specify it\n        cd[0].width1 = Axes.tickIncrement(cd[0].p, binSpec.size, false, calendar) - cd[0].p;\n    }\n\n    arraysToCalcdata(cd, trace);\n\n    if(Lib.isArrayOrTypedArray(trace.selectedpoints)) {\n        Lib.tagSelected(cd, trace, ptNumber2cdIndex);\n    }\n\n    return cd;\n};\n\n/*\n * calcAllAutoBins: we want all histograms on the same axes to share bin specs\n * if they're grouped or stacked. If the user has explicitly specified differing\n * bin specs, there's nothing we can do, but if possible we will try to use the\n * smallest bins of any of the auto values for all histograms grouped/stacked\n * together.\n */\nfunction calcAllAutoBins(gd, trace, pa, mainData, _overlayEdgeCase) {\n    var binAttr = mainData + 'bins';\n    var isOverlay = gd._fullLayout.barmode === 'overlay';\n    var i, tracei, calendar, firstManual, pos0;\n\n    // all but the first trace in this group has already been marked finished\n    // clear this flag, so next time we run calc we will run autobin again\n    if(trace._autoBinFinished) {\n        delete trace._autoBinFinished;\n    }\n    else {\n        // must be the first trace in the group - do the autobinning on them all\n\n        // find all grouped traces - in overlay mode each trace is independent\n        var traceGroup = isOverlay ? [trace] : getConnectedHistograms(gd, trace);\n        var autoBinnedTraces = [];\n\n        var minSize = Infinity;\n        var minStart = Infinity;\n        var maxEnd = -Infinity;\n\n        var autoBinAttr = 'autobin' + mainData;\n\n        for(i = 0; i < traceGroup.length; i++) {\n            tracei = traceGroup[i];\n\n            // stash pos0 on the trace so we don't need to duplicate this\n            // in the main body of calc\n            pos0 = tracei._pos0 = pa.makeCalcdata(tracei, mainData);\n            var binSpec = tracei[binAttr];\n\n            if((tracei[autoBinAttr]) || !binSpec ||\n                    binSpec.start === null || binSpec.end === null) {\n                calendar = tracei[mainData + 'calendar'];\n                var cumulativeSpec = tracei.cumulative;\n\n                binSpec = Axes.autoBin(pos0, pa, tracei['nbins' + mainData], false, calendar);\n\n                // Edge case: single-valued histogram overlaying others\n                // Use them all together to calculate the bin size for the single-valued one\n                if(isOverlay && binSpec._dataSpan === 0 && pa.type !== 'category') {\n                    // Several single-valued histograms! Stop infinite recursion,\n                    // just return an extra flag that tells handleSingleValueOverlays\n                    // to sort out this trace too\n                    if(_overlayEdgeCase) return [binSpec, pos0, true];\n\n                    binSpec = handleSingleValueOverlays(gd, trace, pa, mainData, binAttr);\n                }\n\n                // adjust for CDF edge cases\n                if(cumulativeSpec.enabled && (cumulativeSpec.currentbin !== 'include')) {\n                    if(cumulativeSpec.direction === 'decreasing') {\n                        minStart = Math.min(minStart, pa.r2c(binSpec.start, 0, calendar) - binSpec.size);\n                    }\n                    else {\n                        maxEnd = Math.max(maxEnd, pa.r2c(binSpec.end, 0, calendar) + binSpec.size);\n                    }\n                }\n\n                // note that it's possible to get here with an explicit autobin: false\n                // if the bins were not specified. mark this trace for followup\n                autoBinnedTraces.push(tracei);\n            }\n            else if(!firstManual) {\n                // Remember the first manually set binSpec. We'll try to be extra\n                // accommodating of this one, so other bins line up with these.\n                // But if there's more than one manual bin set and they're mutually\n                // inconsistent, then there's not much we can do...\n                firstManual = {\n                    size: binSpec.size,\n                    start: pa.r2c(binSpec.start, 0, calendar),\n                    end: pa.r2c(binSpec.end, 0, calendar)\n                };\n            }\n\n            // Even non-autobinned traces get included here, so we get the greatest extent\n            // and minimum bin size of them all.\n            // But manually binned traces won't be adjusted, even if the auto values\n            // are inconsistent with the manual ones (or the manual ones are inconsistent\n            // with each other).\n            minSize = getMinSize(minSize, binSpec.size);\n            minStart = Math.min(minStart, pa.r2c(binSpec.start, 0, calendar));\n            maxEnd = Math.max(maxEnd, pa.r2c(binSpec.end, 0, calendar));\n\n            // add the flag that lets us abort autobin on later traces\n            if(i) tracei._autoBinFinished = 1;\n        }\n\n        // do what we can to match the auto bins to the first manual bins\n        // but only if sizes are all numeric\n        if(firstManual && isNumeric(firstManual.size) && isNumeric(minSize)) {\n            // first need to ensure the bin size is the same as or an integer fraction\n            // of the first manual bin\n            // allow the bin size to increase just under the autobin step size to match,\n            // (which is a factor of 2 or 2.5) otherwise shrink it\n            if(minSize > firstManual.size / 1.9) minSize = firstManual.size;\n            else minSize = firstManual.size / Math.ceil(firstManual.size / minSize);\n\n            // now decrease minStart if needed to make the bin centers line up\n            var adjustedFirstStart = firstManual.start + (firstManual.size - minSize) / 2;\n            minStart = adjustedFirstStart - minSize * Math.ceil((adjustedFirstStart - minStart) / minSize);\n        }\n\n        // now go back to the autobinned traces and update their bin specs with the final values\n        for(i = 0; i < autoBinnedTraces.length; i++) {\n            tracei = autoBinnedTraces[i];\n            calendar = tracei[mainData + 'calendar'];\n\n            tracei._input[binAttr] = tracei[binAttr] = {\n                start: pa.c2r(minStart, 0, calendar),\n                end: pa.c2r(maxEnd, 0, calendar),\n                size: minSize\n            };\n\n            // note that it's possible to get here with an explicit autobin: false\n            // if the bins were not specified.\n            // in that case this will remain in the trace, so that future updates\n            // which would change the autobinning will not do so.\n            tracei._input[autoBinAttr] = tracei[autoBinAttr];\n        }\n    }\n\n    pos0 = trace._pos0;\n    delete trace._pos0;\n\n    return [trace[binAttr], pos0];\n}\n\n/*\n * Adjust single-value histograms in overlay mode to make as good a\n * guess as we can at autobin values the user would like.\n *\n * Returns the binSpec for the trace that sparked all this\n */\nfunction handleSingleValueOverlays(gd, trace, pa, mainData, binAttr) {\n    var overlaidTraceGroup = getConnectedHistograms(gd, trace);\n    var pastThisTrace = false;\n    var minSize = Infinity;\n    var singleValuedTraces = [trace];\n    var i, tracei;\n\n    // first collect all the:\n    // - min bin size from all multi-valued traces\n    // - single-valued traces\n    for(i = 0; i < overlaidTraceGroup.length; i++) {\n        tracei = overlaidTraceGroup[i];\n        if(tracei === trace) pastThisTrace = true;\n        else if(!pastThisTrace) {\n            // This trace has already had its autobins calculated\n            // (so must not have been single-valued).\n            minSize = Math.min(minSize, tracei[binAttr].size);\n        }\n        else {\n            var resulti = calcAllAutoBins(gd, tracei, pa, mainData, true);\n            var binSpeci = resulti[0];\n            var isSingleValued = resulti[2];\n\n            // so we can use this result when we get to tracei in the normal\n            // course of events, mark it as done and put _pos0 back\n            tracei._autoBinFinished = 1;\n            tracei._pos0 = resulti[1];\n\n            if(isSingleValued) {\n                singleValuedTraces.push(tracei);\n            }\n            else {\n                minSize = Math.min(minSize, binSpeci.size);\n            }\n        }\n    }\n\n    // find the real data values for each single-valued trace\n    // hunt through pos0 for the first valid value\n    var dataVals = new Array(singleValuedTraces.length);\n    for(i = 0; i < singleValuedTraces.length; i++) {\n        var pos0 = singleValuedTraces[i]._pos0;\n        for(var j = 0; j < pos0.length; j++) {\n            if(pos0[j] !== undefined) {\n                dataVals[i] = pos0[j];\n                break;\n            }\n        }\n    }\n\n    // are ALL traces are single-valued? use the min difference between\n    // all of their values (which defaults to 1 if there's still only one)\n    if(!isFinite(minSize)) {\n        minSize = Lib.distinctVals(dataVals).minDiff;\n    }\n\n    // now apply the min size we found to all single-valued traces\n    for(i = 0; i < singleValuedTraces.length; i++) {\n        tracei = singleValuedTraces[i];\n        var calendar = tracei[mainData + 'calendar'];\n\n        tracei._input[binAttr] = tracei[binAttr] = {\n            start: pa.c2r(dataVals[i] - minSize / 2, 0, calendar),\n            end: pa.c2r(dataVals[i] + minSize / 2, 0, calendar),\n            size: minSize\n        };\n    }\n\n    return trace[binAttr];\n}\n\n/*\n * Return an array of histograms that share axes and orientation.\n *\n * Only considers histograms. In principle we could include bars in a\n * similar way to how we do manually binned histograms, though this\n * would have tons of edge cases and value judgments to make.\n */\nfunction getConnectedHistograms(gd, trace) {\n    var xid = trace.xaxis;\n    var yid = trace.yaxis;\n    var orientation = trace.orientation;\n\n    var out = [];\n    var fullData = gd._fullData;\n    for(var i = 0; i < fullData.length; i++) {\n        var tracei = fullData[i];\n        if(tracei.type === 'histogram' &&\n            tracei.orientation === orientation &&\n            tracei.xaxis === xid && tracei.yaxis === yid\n        ) {\n            out.push(tracei);\n        }\n    }\n\n    return out;\n}\n\n\n/*\n * getMinSize: find the smallest given that size can be a string code\n * ie 'M6' for 6 months. ('L' wouldn't make sense to compare with numeric sizes)\n */\nfunction getMinSize(size1, size2) {\n    if(size1 === Infinity) return size2;\n    var sizeNumeric1 = numericSize(size1);\n    var sizeNumeric2 = numericSize(size2);\n    return sizeNumeric2 < sizeNumeric1 ? size2 : size1;\n}\n\nfunction numericSize(size) {\n    if(isNumeric(size)) return size;\n    if(typeof size === 'string' && size.charAt(0) === 'M') {\n        return oneMonth * +(size.substr(1));\n    }\n    return Infinity;\n}\n\nfunction cdf(size, direction, currentBin) {\n    var i, vi, prevSum;\n\n    function firstHalfPoint(i) {\n        prevSum = size[i];\n        size[i] /= 2;\n    }\n\n    function nextHalfPoint(i) {\n        vi = size[i];\n        size[i] = prevSum + vi / 2;\n        prevSum += vi;\n    }\n\n    if(currentBin === 'half') {\n\n        if(direction === 'increasing') {\n            firstHalfPoint(0);\n            for(i = 1; i < size.length; i++) {\n                nextHalfPoint(i);\n            }\n        }\n        else {\n            firstHalfPoint(size.length - 1);\n            for(i = size.length - 2; i >= 0; i--) {\n                nextHalfPoint(i);\n            }\n        }\n    }\n    else if(direction === 'increasing') {\n        for(i = 1; i < size.length; i++) {\n            size[i] += size[i - 1];\n        }\n\n        // 'exclude' is identical to 'include' just shifted one bin over\n        if(currentBin === 'exclude') {\n            size.unshift(0);\n            size.pop();\n        }\n    }\n    else {\n        for(i = size.length - 2; i >= 0; i--) {\n            size[i] += size[i + 1];\n        }\n\n        if(currentBin === 'exclude') {\n            size.push(0);\n            size.shift();\n        }\n    }\n}\n",null]}