{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/parcoords/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/parcoords/plot.js","mtime":1529418310728},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar parcoords = require('./parcoords');\nvar prepareRegl = require('../../lib/prepare_regl');\n\nmodule.exports = function plot(gd, cdparcoords) {\n    var fullLayout = gd._fullLayout;\n    var svg = fullLayout._toppaper;\n    var root = fullLayout._paperdiv;\n    var container = fullLayout._glcontainer;\n\n    prepareRegl(gd);\n\n    var gdDimensions = {};\n    var gdDimensionsOriginalOrder = {};\n\n    var size = fullLayout._size;\n\n    cdparcoords.forEach(function(d, i) {\n        gdDimensions[i] = gd.data[i].dimensions;\n        gdDimensionsOriginalOrder[i] = gd.data[i].dimensions.slice();\n    });\n\n    var filterChanged = function(i, originalDimensionIndex, newRanges) {\n\n        // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        var gdDimension = gdDimensionsOriginalOrder[i][originalDimensionIndex];\n        var newConstraints = newRanges.map(function(r) { return r.slice(); });\n        if(!newConstraints.length) {\n            delete gdDimension.constraintrange;\n            newConstraints = null;\n        }\n        else {\n            if(newConstraints.length === 1) newConstraints = newConstraints[0];\n            gdDimension.constraintrange = newConstraints;\n            // wrap in another array for restyle event data\n            newConstraints = [newConstraints];\n        }\n\n        var restyleData = {};\n        var aStr = 'dimensions[' + originalDimensionIndex + '].constraintrange';\n        restyleData[aStr] = newConstraints;\n        gd.emit('plotly_restyle', [restyleData, [i]]);\n    };\n\n    var hover = function(eventData) {\n        gd.emit('plotly_hover', eventData);\n    };\n\n    var unhover = function(eventData) {\n        gd.emit('plotly_unhover', eventData);\n    };\n\n    var axesMoved = function(i, visibleIndices) {\n\n        // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        function visible(dimension) {return !('visible' in dimension) || dimension.visible;}\n\n        function newIdx(visibleIndices, orig, dim) {\n            var origIndex = orig.indexOf(dim);\n            var currentIndex = visibleIndices.indexOf(origIndex);\n            if(currentIndex === -1) {\n                // invisible dimensions initially go to the end\n                currentIndex += orig.length;\n            }\n            return currentIndex;\n        }\n\n        function sorter(orig) {\n            return function sorter(d1, d2) {\n                var i1 = newIdx(visibleIndices, orig, d1);\n                var i2 = newIdx(visibleIndices, orig, d2);\n                return i1 - i2;\n            };\n        }\n\n        // drag&drop sorting of the visible dimensions\n        var orig = sorter(gdDimensionsOriginalOrder[i].filter(visible));\n        gdDimensions[i].sort(orig);\n\n        // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n        // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n        gdDimensionsOriginalOrder[i].filter(function(d) {return !visible(d);})\n             .sort(function(d) {\n                 // subsequent splicing to be done left to right, otherwise indices may be incorrect\n                 return gdDimensionsOriginalOrder[i].indexOf(d);\n             })\n            .forEach(function(d) {\n                gdDimensions[i].splice(gdDimensions[i].indexOf(d), 1); // remove from the end\n                gdDimensions[i].splice(gdDimensionsOriginalOrder[i].indexOf(d), 0, d); // insert at original index\n            });\n\n        gd.emit('plotly_restyle');\n    };\n\n    parcoords(\n        root,\n        svg,\n        container,\n        cdparcoords,\n        {\n            width: size.w,\n            height: size.h,\n            margin: {\n                t: size.t,\n                r: size.r,\n                b: size.b,\n                l: size.l\n            }\n        },\n        {\n            filterChanged: filterChanged,\n            hover: hover,\n            unhover: unhover,\n            axesMoved: axesMoved\n        });\n};\n",null]}