{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/mayan.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/mayan.js","mtime":1529418312976},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nï»¿/* http://keith-wood.name/calendars.html\n   Mayan calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Mayan Long Count calendar.\n    See also <a href=\"http://en.wikipedia.org/wiki/Mayan_calendar\">http://en.wikipedia.org/wiki/Mayan_calendar</a>.\n    @class MayanCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction MayanCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nMayanCalendar.prototype = new main.baseCalendar;\n\nassign(MayanCalendar.prototype, {\n    /** The calendar name.\n        @memberof MayanCalendar */\n    name: 'Mayan',\n    /** Julian date of start of Mayan epoch: 11 August 3114 BCE.\n        @memberof MayanCalendar */\n    jdEpoch: 584282.5,\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof MayanCalendar */\n    hasYearZero: true,\n    /** The minimum month number.\n        @memberof MayanCalendar */\n    minMonth: 0,\n    /** The first month in the year.\n        @memberof MayanCalendar */\n    firstMonth: 0,\n    /** The minimum day number.\n        @memberof MayanCalendar */\n    minDay: 0,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof MayanCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left.\n        @property haabMonths {string[]} The names of the Haab months.\n        @property tzolkinMonths {string[]} The names of the Tzolkin months. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Mayan',\n            epochs: ['', ''],\n            monthNames: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            '10', '11', '12', '13', '14', '15', '16', '17'],\n            monthNamesShort: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            '10', '11', '12', '13', '14', '15', '16', '17'],\n            dayNames: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],\n            dayNamesShort: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],\n            dayNamesMin: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],\n            digits: null,\n            dateFormat: 'YYYY.m.d',\n            firstDay: 0,\n            isRTL: false,\n            haabMonths: ['Pop', 'Uo', 'Zip', 'Zotz', 'Tzec', 'Xul', 'Yaxkin', 'Mol', 'Chen', 'Yax',\n            'Zac', 'Ceh', 'Mac', 'Kankin', 'Muan', 'Pax', 'Kayab', 'Cumku', 'Uayeb'],\n            tzolkinMonths: ['Imix', 'Ik', 'Akbal', 'Kan', 'Chicchan', 'Cimi', 'Manik', 'Lamat', 'Muluc', 'Oc',\n            'Chuen', 'Eb', 'Ben', 'Ix', 'Men', 'Cib', 'Caban', 'Etznab', 'Cauac', 'Ahau']\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return false;\n    },\n\n    /** Format the year, if not a simple sequential number.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to format or the year to format.\n        @return {string} The formatted year.\n        @throws Error if an invalid year or a different calendar used. */\n    formatYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        year = date.year();\n        var baktun = Math.floor(year / 400);\n        year = year % 400;\n        year += (year < 0 ? 400 : 0);\n        var katun = Math.floor(year / 20);\n        return baktun + '.' + katun + '.' + (year % 20);\n    },\n\n    /** Convert from the formatted year back to a single number.\n        @memberof MayanCalendar\n        @param years {string} The year as n.n.n.\n        @return {number} The sequential year.\n        @throws Error if an invalid value is supplied. */\n    forYear: function(years) {\n        years = years.split('.');\n        if (years.length < 3) {\n            throw 'Invalid Mayan year';\n        }\n        var year = 0;\n        for (var i = 0; i < years.length; i++) {\n            var y = parseInt(years[i], 10);\n            if (Math.abs(y) > 19 || (i > 0 && y < 0)) {\n                throw 'Invalid Mayan year';\n            }\n            year = year * 20 + y;\n        }\n        return year;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return 18;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        this._validate(year, month, day, main.local.invalidDate);\n        return 0;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return 360;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return 20;\n    },\n\n    /** Retrieve the number of days in a week.\n        @memberof MayanCalendar\n        @return {number} The number of days. */\n    daysInWeek: function() {\n        return 5; // Just for formatting\n    },\n\n    /** Retrieve the day of the week for a date.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The day of the week: 0 to number of days - 1.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfWeek: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return date.day();\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        this._validate(year, month, day, main.local.invalidDate);\n        return true;\n    },\n\n    /** Retrieve additional information about a date - Haab and Tzolkin equivalents.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        var jd = date.toJD();\n        var haab = this._toHaab(jd);\n        var tzolkin = this._toTzolkin(jd);\n        return {haabMonthName: this.local.haabMonths[haab[0] - 1],\n            haabMonth: haab[0], haabDay: haab[1],\n            tzolkinDayName: this.local.tzolkinMonths[tzolkin[0] - 1],\n            tzolkinDay: tzolkin[0], tzolkinTrecena: tzolkin[1]};\n    },\n\n    /** Retrieve Haab date from a Julian date.\n        @memberof MayanCalendar\n        @private\n        @param jd  {number} The Julian date.\n        @return {number[]} Corresponding Haab month and day. */\n    _toHaab: function(jd) {\n        jd -= this.jdEpoch;\n        var day = mod(jd + 8 + ((18 - 1) * 20), 365);\n        return [Math.floor(day / 20) + 1, mod(day, 20)];\n    },\n\n    /** Retrieve Tzolkin date from a Julian date.\n        @memberof MayanCalendar\n        @private\n        @param jd {number} The Julian date.\n        @return {number[]} Corresponding Tzolkin day and trecena. */\n    _toTzolkin: function(jd) {\n        jd -= this.jdEpoch;\n        return [amod(jd + 20, 20), amod(jd + 4, 13)];\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof MayanCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return date.day() + (date.month() * 20) + (date.year() * 360) + this.jdEpoch;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof MayanCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd) + 0.5 - this.jdEpoch;\n        var year = Math.floor(jd / 360);\n        jd = jd % 360;\n        jd += (jd < 0 ? 360 : 0);\n        var month = Math.floor(jd / 20);\n        var day = jd % 20;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Modulus function which works for non-integers.\nfunction mod(a, b) {\n    return a - (b * Math.floor(a / b));\n}\n\n// Modulus function which returns numerator if modulus is zero.\nfunction amod(a, b) {\n    return mod(a - 1, b) + 1;\n}\n\n// Mayan calendar implementation\nmain.calendars.mayan = MayanCalendar;\n\n",null]}