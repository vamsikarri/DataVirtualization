{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatterpolar/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatterpolar/plot.js","mtime":1529418310744},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar scatterPlot = require('../scatter/plot');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function plot(gd, subplot, moduleCalcData) {\n    var i, j;\n\n    var plotinfo = {\n        xaxis: subplot.xaxis,\n        yaxis: subplot.yaxis,\n        plot: subplot.framework,\n        layerClipId: subplot._hasClipOnAxisFalse ? subplot.clipIds.circle : null\n    };\n\n    var radialAxis = subplot.radialAxis;\n    var radialRange = radialAxis.range;\n    var rFilter;\n\n    if(radialRange[0] > radialRange[1]) {\n        rFilter = function(v) { return v <= 0; };\n    } else {\n        rFilter = function(v) { return v >= 0; };\n    }\n\n    // map (r, theta) first to a 'geometric' r and then to (x,y)\n    // on-par with what scatterPlot expects.\n\n    for(i = 0; i < moduleCalcData.length; i++) {\n        for(j = 0; j < moduleCalcData[i].length; j++) {\n            var cdi = moduleCalcData[i][j];\n            var r = cdi.r;\n\n            if(r !== BADNUM) {\n                // convert to 'r' data to fit with mocked polar x/y axis\n                // which are always `type: 'linear'`\n                var rr = radialAxis.c2r(r) - radialRange[0];\n                if(rFilter(rr)) {\n                    var rad = cdi.rad;\n                    cdi.x = rr * Math.cos(rad);\n                    cdi.y = rr * Math.sin(rad);\n                    continue;\n                } else {\n                    // flag for scatter/line_points.js\n                    // to extend line (and fills) into center\n                    cdi.intoCenter = [subplot.cxx, subplot.cyy];\n                }\n            }\n\n            cdi.x = BADNUM;\n            cdi.y = BADNUM;\n        }\n    }\n\n    var scatterLayer = subplot.layers.frontplot.select('g.scatterlayer');\n\n    scatterPlot(gd, plotinfo, moduleCalcData, scatterLayer);\n};\n",null]}