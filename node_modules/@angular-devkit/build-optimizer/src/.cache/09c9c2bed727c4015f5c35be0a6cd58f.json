{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/layout_defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/layout_defaults.js","mtime":1529418310693},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\nvar layoutAttributes = require('./layout_attributes');\n\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: 'mapbox',\n        attributes: layoutAttributes,\n        handleDefaults: handleDefaults,\n        partition: 'y',\n        accessToken: layoutOut._mapboxAccessToken\n    });\n};\n\nfunction handleDefaults(containerIn, containerOut, coerce, opts) {\n    coerce('accesstoken', opts.accessToken);\n    coerce('style');\n    coerce('center.lon');\n    coerce('center.lat');\n    coerce('zoom');\n    coerce('bearing');\n    coerce('pitch');\n\n    handleLayerDefaults(containerIn, containerOut);\n\n    // copy ref to input container to update 'center' and 'zoom' on map move\n    containerOut._input = containerIn;\n}\n\nfunction handleLayerDefaults(containerIn, containerOut) {\n    var layersIn = containerIn.layers || [],\n        layersOut = containerOut.layers = [];\n\n    var layerIn, layerOut;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(layerIn, layerOut, layoutAttributes.layers, attr, dflt);\n    }\n\n    for(var i = 0; i < layersIn.length; i++) {\n        layerIn = layersIn[i];\n        layerOut = {};\n\n        if(!Lib.isPlainObject(layerIn)) continue;\n\n        var sourceType = coerce('sourcetype');\n        coerce('source');\n\n        if(sourceType === 'vector') coerce('sourcelayer');\n\n        // maybe add smart default based off GeoJSON geometry?\n        var type = coerce('type');\n\n        coerce('below');\n        coerce('color');\n        coerce('opacity');\n\n        if(type === 'circle') {\n            coerce('circle.radius');\n        }\n\n        if(type === 'line') {\n            coerce('line.width');\n        }\n\n        if(type === 'fill') {\n            coerce('fill.outlinecolor');\n        }\n\n        if(type === 'symbol') {\n            coerce('symbol.icon');\n            coerce('symbol.iconsize');\n\n            coerce('symbol.text');\n            Lib.coerceFont(coerce, 'symbol.textfont');\n            coerce('symbol.textposition');\n        }\n\n        layerOut._index = i;\n        layersOut.push(layerOut);\n    }\n}\n",null]}