{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-mesh3d/lib/closest-point.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-mesh3d/lib/closest-point.js","mtime":1529418308649},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar barycentric            = require('barycentric')\r\nvar closestPointToTriangle = require('polytope-closest-point/lib/closest_point_2d.js')\r\n\r\nmodule.exports = closestPointToPickLocation\r\n\r\nfunction xformMatrix(m, v) {\r\n  var out = [0,0,0,0]\r\n  for(var i=0; i<4; ++i) {\r\n    for(var j=0; j<4; ++j) {\r\n      out[j] += m[4*i + j] * v[i]\r\n    }\r\n  }\r\n  return out\r\n}\r\n\r\nfunction projectVertex(v, model, view, projection, resolution) {\r\n  var p = xformMatrix(projection,\r\n            xformMatrix(view,\r\n              xformMatrix(model, [v[0], v[1], v[2], 1])))\r\n  for(var i=0; i<3; ++i) {\r\n    p[i] /= p[3]\r\n  }\r\n  return [ 0.5 * resolution[0] * (1.0+p[0]), 0.5 * resolution[1] * (1.0-p[1]) ]\r\n}\r\n\r\nfunction barycentricCoord(simplex, point) {\r\n  if(simplex.length === 2) {\r\n    var d0 = 0.0\r\n    var d1 = 0.0\r\n    for(var i=0; i<2; ++i) {\r\n      d0 += Math.pow(point[i] - simplex[0][i], 2)\r\n      d1 += Math.pow(point[i] - simplex[1][i], 2)\r\n    }\r\n    d0 = Math.sqrt(d0)\r\n    d1 = Math.sqrt(d1)\r\n    if(d0+d1 < 1e-6) {\r\n      return [1,0]\r\n    }\r\n    return [d1/(d0+d1),d0/(d1+d0)]\r\n  } else if(simplex.length === 3) {\r\n    var closestPoint = [0,0]\r\n    closestPointToTriangle(simplex[0], simplex[1], simplex[2], point, closestPoint)\r\n    return barycentric(simplex, closestPoint)\r\n  }\r\n  return []\r\n}\r\n\r\nfunction interpolate(simplex, weights) {\r\n  var result = [0,0,0]\r\n  for(var i=0; i<simplex.length; ++i) {\r\n    var p = simplex[i]\r\n    var w = weights[i]\r\n    for(var j=0; j<3; ++j) {\r\n      result[j] += w * p[j]\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nfunction closestPointToPickLocation(simplex, pixelCoord, model, view, projection, resolution) {\r\n  if(simplex.length === 1) {\r\n    return [0, simplex[0].slice()]\r\n  }\r\n  var simplex2D = new Array(simplex.length)\r\n  for(var i=0; i<simplex.length; ++i) {\r\n    simplex2D[i] = projectVertex(simplex[i], model, view, projection, resolution);\r\n  }\r\n\r\n  var closestIndex = 0\r\n  var closestDist  = Infinity\r\n  for(var i=0; i<simplex2D.length; ++i) {\r\n    var d2 = 0.0\r\n    for(var j=0; j<2; ++j) {\r\n      d2 += Math.pow(simplex2D[i][j] - pixelCoord[j], 2)\r\n    }\r\n    if(d2 < closestDist) {\r\n      closestDist  = d2\r\n      closestIndex = i\r\n    }\r\n  }\r\n\r\n  var weights = barycentricCoord(simplex2D, pixelCoord)\r\n  var s = 0.0\r\n  for(var i=0; i<3; ++i) {\r\n    if(weights[i] < -0.001 ||\r\n       weights[i] > 1.0001) {\r\n      return null\r\n    }\r\n    s += weights[i]\r\n  }\r\n  if(Math.abs(s - 1.0) > 0.001) {\r\n    return null\r\n  }\r\n  return [closestIndex, interpolate(simplex, weights), weights]\r\n}",null]}