{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-spikes3d/spikes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-spikes3d/spikes.js","mtime":1529418308692},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar createBuffer = require('gl-buffer')\r\nvar createVAO = require('gl-vao')\r\nvar createShader = require('./shaders/index')\r\n\r\nmodule.exports = createSpikes\r\n\r\nvar identity = [1,0,0,0,\r\n                0,1,0,0,\r\n                0,0,1,0,\r\n                0,0,0,1]\r\n\r\nfunction AxisSpikes(gl, buffer, vao, shader) {\r\n  this.gl         = gl\r\n  this.buffer     = buffer\r\n  this.vao        = vao\r\n  this.shader     = shader\r\n  this.pixelRatio = 1\r\n  this.bounds     = [[-1000,-1000,-1000], [1000,1000,1000]]\r\n  this.position   = [0,0,0]\r\n  this.lineWidth  = [2,2,2]\r\n  this.colors     = [[0,0,0,1], [0,0,0,1], [0,0,0,1]]\r\n  this.enabled    = [true,true,true]\r\n  this.drawSides  = [true,true,true]\r\n  this.axes       = null\r\n}\r\n\r\nvar proto = AxisSpikes.prototype\r\n\r\nvar OUTER_FACE = [0,0,0]\r\nvar INNER_FACE = [0,0,0]\r\n\r\nvar SHAPE = [0,0]\r\n\r\nproto.isTransparent = function() {\r\n  return false\r\n}\r\n\r\nproto.drawTransparent = function(camera) {}\r\n\r\nproto.draw = function(camera) {\r\n  var gl = this.gl\r\n  var vao = this.vao\r\n  var shader = this.shader\r\n\r\n  vao.bind()\r\n  shader.bind()\r\n\r\n  var model      = camera.model || identity\r\n  var view       = camera.view || identity\r\n  var projection = camera.projection || identity\r\n\r\n  var axis\r\n  if(this.axes) {\r\n    axis = this.axes.lastCubeProps.axis\r\n  }\r\n\r\n  var outerFace = OUTER_FACE\r\n  var innerFace = INNER_FACE\r\n  for(var i=0; i<3; ++i) {\r\n    if(axis && axis[i] < 0) {\r\n      outerFace[i] = this.bounds[0][i]\r\n      innerFace[i] = this.bounds[1][i]\r\n    } else {\r\n      outerFace[i] = this.bounds[1][i]\r\n      innerFace[i] = this.bounds[0][i]\r\n    }\r\n  }\r\n\r\n  SHAPE[0] = gl.drawingBufferWidth\r\n  SHAPE[1] = gl.drawingBufferHeight\r\n\r\n  shader.uniforms.model       = model\r\n  shader.uniforms.view        = view\r\n  shader.uniforms.projection  = projection\r\n  shader.uniforms.coordinates = [this.position, outerFace, innerFace]\r\n  shader.uniforms.colors      = this.colors\r\n  shader.uniforms.screenShape = SHAPE\r\n\r\n  for(var i=0; i<3; ++i) {\r\n    shader.uniforms.lineWidth = this.lineWidth[i] * this.pixelRatio\r\n    if(this.enabled[i]) {\r\n      vao.draw(gl.TRIANGLES, 6, 6*i)\r\n      if(this.drawSides[i]) {\r\n        vao.draw(gl.TRIANGLES, 12, 18+12*i)\r\n      }\r\n    }\r\n  }\r\n\r\n  vao.unbind()\r\n}\r\n\r\nproto.update = function(options) {\r\n  if(!options) {\r\n    return\r\n  }\r\n  if(\"bounds\" in options) {\r\n    this.bounds = options.bounds\r\n  }\r\n  if(\"position\" in options) {\r\n    this.position = options.position\r\n  }\r\n  if(\"lineWidth\" in options) {\r\n    this.lineWidth = options.lineWidth\r\n  }\r\n  if(\"colors\" in options) {\r\n    this.colors = options.colors\r\n  }\r\n  if(\"enabled\" in options) {\r\n    this.enabled = options.enabled\r\n  }\r\n  if(\"drawSides\" in options) {\r\n    this.drawSides = options.drawSides\r\n  }\r\n}\r\n\r\nproto.dispose = function() {\r\n  this.vao.dispose()\r\n  this.buffer.dispose()\r\n  this.shader.dispose()\r\n}\r\n\r\n\r\n\r\nfunction createSpikes(gl, options) {\r\n  //Create buffers\r\n  var data = [ ]\r\n\r\n  function line(x,y,z,i,l,h) {\r\n    var row = [x,y,z,  0,0,0,  1]\r\n    row[i+3] = 1\r\n    row[i] = l\r\n    data.push.apply(data, row)\r\n    row[6] = -1\r\n    data.push.apply(data, row)\r\n    row[i] = h\r\n    data.push.apply(data, row)\r\n    data.push.apply(data, row)\r\n    row[6] = 1\r\n    data.push.apply(data, row)\r\n    row[i] = l\r\n    data.push.apply(data, row)\r\n  }\r\n\r\n  line(0,0,0, 0, 0, 1)\r\n  line(0,0,0, 1, 0, 1)\r\n  line(0,0,0, 2, 0, 1)\r\n\r\n  line(1,0,0,  1,  -1,1)\r\n  line(1,0,0,  2,  -1,1)\r\n\r\n  line(0,1,0,  0,  -1,1)\r\n  line(0,1,0,  2,  -1,1)\r\n\r\n  line(0,0,1,  0,  -1,1)\r\n  line(0,0,1,  1,  -1,1)\r\n\r\n  var buffer = createBuffer(gl, data)\r\n  var vao = createVAO(gl, [{\r\n    type: gl.FLOAT,\r\n    buffer: buffer,\r\n    size: 3,\r\n    offset: 0,\r\n    stride: 28\r\n  }, {\r\n    type: gl.FLOAT,\r\n    buffer: buffer,\r\n    size: 3,\r\n    offset: 12,\r\n    stride: 28\r\n  }, {\r\n    type: gl.FLOAT,\r\n    buffer: buffer,\r\n    size: 1,\r\n    offset: 24,\r\n    stride: 28\r\n  }])\r\n\r\n  //Create shader\r\n  var shader = createShader(gl)\r\n  shader.attributes.position.location = 0\r\n  shader.attributes.color.location = 1\r\n  shader.attributes.weight.location = 2\r\n\r\n  //Create spike object\r\n  var spikes = new AxisSpikes(gl, buffer, vao, shader)\r\n\r\n  //Set parameters\r\n  spikes.update(options)\r\n\r\n  //Return resulting object\r\n  return spikes\r\n}\r\n",null]}