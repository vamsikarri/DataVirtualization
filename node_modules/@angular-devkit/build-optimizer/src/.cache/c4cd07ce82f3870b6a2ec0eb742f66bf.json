{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/snapshot/cloneplot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/snapshot/cloneplot.js","mtime":1529418310698},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../lib');\n\nvar extendFlat = Lib.extendFlat;\nvar extendDeep = Lib.extendDeep;\n\n// Put default plotTile layouts here\nfunction cloneLayoutOverride(tileClass) {\n    var override;\n\n    switch(tileClass) {\n        case 'themes__thumb':\n            override = {\n                autosize: true,\n                width: 150,\n                height: 150,\n                title: '',\n                showlegend: false,\n                margin: {l: 5, r: 5, t: 5, b: 5, pad: 0},\n                annotations: []\n            };\n            break;\n\n        case 'thumbnail':\n            override = {\n                title: '',\n                hidesources: true,\n                showlegend: false,\n                borderwidth: 0,\n                bordercolor: '',\n                margin: {l: 1, r: 1, t: 1, b: 1, pad: 0},\n                annotations: []\n            };\n            break;\n\n        default:\n            override = {};\n    }\n\n\n    return override;\n}\n\nfunction keyIsAxis(keyName) {\n    var types = ['xaxis', 'yaxis', 'zaxis'];\n    return (types.indexOf(keyName.slice(0, 5)) > -1);\n}\n\n\nmodule.exports = function clonePlot(graphObj, options) {\n\n    // Polar plot compatibility\n    if(graphObj.framework && graphObj.framework.isPolar) {\n        graphObj = graphObj.framework.getConfig();\n    }\n\n    var i;\n    var oldData = graphObj.data;\n    var oldLayout = graphObj.layout;\n    var newData = extendDeep([], oldData);\n    var newLayout = extendDeep({}, oldLayout, cloneLayoutOverride(options.tileClass));\n    var context = graphObj._context || {};\n\n    if(options.width) newLayout.width = options.width;\n    if(options.height) newLayout.height = options.height;\n\n    if(options.tileClass === 'thumbnail' || options.tileClass === 'themes__thumb') {\n        // kill annotations\n        newLayout.annotations = [];\n        var keys = Object.keys(newLayout);\n\n        for(i = 0; i < keys.length; i++) {\n            if(keyIsAxis(keys[i])) {\n                newLayout[keys[i]].title = '';\n            }\n        }\n\n        // kill colorbar and pie labels\n        for(i = 0; i < newData.length; i++) {\n            var trace = newData[i];\n            trace.showscale = false;\n            if(trace.marker) trace.marker.showscale = false;\n            if(trace.type === 'pie') trace.textposition = 'none';\n        }\n    }\n\n    if(Array.isArray(options.annotations)) {\n        for(i = 0; i < options.annotations.length; i++) {\n            newLayout.annotations.push(options.annotations[i]);\n        }\n    }\n\n    // TODO: does this scene modification really belong here?\n    // If we still need it, can it move into the gl3d module?\n    var sceneIds = Object.keys(newLayout).filter(function(key) {\n        return key.match(/^scene\\d*$/);\n    });\n    if(sceneIds.length) {\n        var axesImageOverride = {};\n        if(options.tileClass === 'thumbnail') {\n            axesImageOverride = {\n                title: '',\n                showaxeslabels: false,\n                showticklabels: false,\n                linetickenable: false\n            };\n        }\n        for(i = 0; i < sceneIds.length; i++) {\n            var scene = newLayout[sceneIds[i]];\n\n            if(!scene.xaxis) {\n                scene.xaxis = {};\n            }\n\n            if(!scene.yaxis) {\n                scene.yaxis = {};\n            }\n\n            if(!scene.zaxis) {\n                scene.zaxis = {};\n            }\n\n            extendFlat(scene.xaxis, axesImageOverride);\n            extendFlat(scene.yaxis, axesImageOverride);\n            extendFlat(scene.zaxis, axesImageOverride);\n\n            // TODO what does this do?\n            scene._scene = null;\n        }\n    }\n\n    var gd = document.createElement('div');\n    if(options.tileClass) gd.className = options.tileClass;\n\n    var plotTile = {\n        gd: gd,\n        td: gd, // for external (image server) compatibility\n        layout: newLayout,\n        data: newData,\n        config: {\n            staticPlot: (options.staticPlot === undefined) ?\n                true :\n                options.staticPlot,\n            plotGlPixelRatio: (options.plotGlPixelRatio === undefined) ?\n                2 :\n                options.plotGlPixelRatio,\n            displaylogo: options.displaylogo || false,\n            showLink: options.showLink || false,\n            showTips: options.showTips || false,\n            mapboxAccessToken: context.mapboxAccessToken\n        }\n    };\n\n    if(options.setBackground !== 'transparent') {\n        plotTile.config.setBackground = options.setBackground || 'opaque';\n    }\n\n    // attaching the default Layout the gd, so you can grab it later\n    plotTile.gd.defaultLayout = cloneLayoutOverride(options.tileClass);\n\n    return plotTile;\n};\n",null]}