{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-mesh3d/mesh.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-mesh3d/mesh.js","mtime":1529418308653},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar DEFAULT_VERTEX_NORMALS_EPSILON = 1e-6; // may be too large if triangles are very small\r\nvar DEFAULT_FACE_NORMALS_EPSILON = 1e-6;\r\n\r\nvar createShader  = require('gl-shader')\r\nvar createBuffer  = require('gl-buffer')\r\nvar createVAO     = require('gl-vao')\r\nvar createTexture = require('gl-texture2d')\r\nvar normals       = require('normals')\r\nvar multiply      = require('gl-mat4/multiply')\r\nvar invert        = require('gl-mat4/invert')\r\nvar ndarray       = require('ndarray')\r\nvar colormap      = require('colormap')\r\nvar getContour    = require('simplicial-complex-contour')\r\nvar pool          = require('typedarray-pool')\r\nvar shaders       = require('./lib/shaders')\r\nvar closestPoint  = require('./lib/closest-point')\r\n\r\nvar meshShader    = shaders.meshShader\r\nvar wireShader    = shaders.wireShader\r\nvar pointShader   = shaders.pointShader\r\nvar pickShader    = shaders.pickShader\r\nvar pointPickShader = shaders.pointPickShader\r\nvar contourShader = shaders.contourShader\r\n\r\nvar identityMatrix = [\r\n  1,0,0,0,\r\n  0,1,0,0,\r\n  0,0,1,0,\r\n  0,0,0,1]\r\n\r\n\r\nfunction SimplicialMesh(gl\r\n  , texture\r\n  , triShader\r\n  , lineShader\r\n  , pointShader\r\n  , pickShader\r\n  , pointPickShader\r\n  , contourShader\r\n  , trianglePositions\r\n  , triangleIds\r\n  , triangleColors\r\n  , triangleUVs\r\n  , triangleNormals\r\n  , triangleVAO\r\n  , edgePositions\r\n  , edgeIds\r\n  , edgeColors\r\n  , edgeUVs\r\n  , edgeVAO\r\n  , pointPositions\r\n  , pointIds\r\n  , pointColors\r\n  , pointUVs\r\n  , pointSizes\r\n  , pointVAO\r\n  , contourPositions\r\n  , contourVAO) {\r\n\r\n  this.gl                = gl\r\n  this.cells             = []\r\n  this.positions         = []\r\n  this.intensity         = []\r\n  this.texture           = texture\r\n  this.dirty             = true\r\n\r\n  this.triShader         = triShader\r\n  this.lineShader        = lineShader\r\n  this.pointShader       = pointShader\r\n  this.pickShader        = pickShader\r\n  this.pointPickShader   = pointPickShader\r\n  this.contourShader     = contourShader\r\n\r\n  this.trianglePositions = trianglePositions\r\n  this.triangleColors    = triangleColors\r\n  this.triangleNormals   = triangleNormals\r\n  this.triangleUVs       = triangleUVs\r\n  this.triangleIds       = triangleIds\r\n  this.triangleVAO       = triangleVAO\r\n  this.triangleCount     = 0\r\n\r\n  this.lineWidth         = 1\r\n  this.edgePositions     = edgePositions\r\n  this.edgeColors        = edgeColors\r\n  this.edgeUVs           = edgeUVs\r\n  this.edgeIds           = edgeIds\r\n  this.edgeVAO           = edgeVAO\r\n  this.edgeCount         = 0\r\n\r\n  this.pointPositions    = pointPositions\r\n  this.pointColors       = pointColors\r\n  this.pointUVs          = pointUVs\r\n  this.pointSizes        = pointSizes\r\n  this.pointIds          = pointIds\r\n  this.pointVAO          = pointVAO\r\n  this.pointCount        = 0\r\n\r\n  this.contourLineWidth  = 1\r\n  this.contourPositions  = contourPositions\r\n  this.contourVAO        = contourVAO\r\n  this.contourCount      = 0\r\n  this.contourColor      = [0,0,0]\r\n  this.contourEnable     = true\r\n\r\n  this.pickId            = 1\r\n  this.bounds            = [\r\n    [ Infinity, Infinity, Infinity],\r\n    [-Infinity,-Infinity,-Infinity] ]\r\n  this.clipBounds        = [\r\n    [-Infinity,-Infinity,-Infinity],\r\n    [ Infinity, Infinity, Infinity] ]\r\n\r\n  this.lightPosition = [1e5, 1e5, 0]\r\n  this.ambientLight  = 0.8\r\n  this.diffuseLight  = 0.8\r\n  this.specularLight = 2.0\r\n  this.roughness     = 0.5\r\n  this.fresnel       = 1.5\r\n\r\n  this.opacity       = 1.0\r\n\r\n  this._model       = identityMatrix\r\n  this._view        = identityMatrix\r\n  this._projection  = identityMatrix\r\n  this._resolution  = [1,1]\r\n}\r\n\r\nvar proto = SimplicialMesh.prototype\r\n\r\nproto.isOpaque = function() {\r\n  return this.opacity >= 1\r\n}\r\n\r\nproto.isTransparent = function() {\r\n  return this.opacity < 1\r\n}\r\n\r\nproto.pickSlots = 1\r\n\r\nproto.setPickBase = function(id) {\r\n  this.pickId = id\r\n}\r\n\r\nfunction genColormap(param) {\r\n  var colors = colormap({\r\n      colormap: param\r\n    , nshades:  256\r\n    , format:  'rgba'\r\n  })\r\n\r\n  var result = new Uint8Array(256*4)\r\n  for(var i=0; i<256; ++i) {\r\n    var c = colors[i]\r\n    for(var j=0; j<3; ++j) {\r\n      result[4*i+j] = c[j]\r\n    }\r\n    result[4*i+3] = c[3]*255\r\n  }\r\n\r\n  return ndarray(result, [256,256,4], [4,0,1])\r\n}\r\n\r\nfunction unpackIntensity(cells, numVerts, cellIntensity) {\r\n  var result = new Array(numVerts)\r\n  for(var i=0; i<numVerts; ++i) {\r\n    result[i] = 0\r\n  }\r\n  var numCells = cells.length\r\n  for(var i=0; i<numCells; ++i) {\r\n    var c = cells[i]\r\n    for(var j=0; j<c.length; ++j) {\r\n      result[c[j]] = cellIntensity[i]\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nfunction takeZComponent(array) {\r\n  var n = array.length\r\n  var result = new Array(n)\r\n  for(var i=0; i<n; ++i) {\r\n    result[i] = array[i][2]\r\n  }\r\n  return result\r\n}\r\n\r\nproto.highlight = function(selection) {\r\n  if(!selection || !this.contourEnable) {\r\n    this.contourCount = 0\r\n    return\r\n  }\r\n  var level = getContour(this.cells, this.intensity, selection.intensity)\r\n  var cells         = level.cells\r\n  var vertexIds     = level.vertexIds\r\n  var vertexWeights = level.vertexWeights\r\n  var numCells = cells.length\r\n  var result = pool.mallocFloat32(2 * 3 * numCells)\r\n  var ptr = 0\r\n  for(var i=0; i<numCells; ++i) {\r\n    var c = cells[i]\r\n    for(var j=0; j<2; ++j) {\r\n      var v = c[0]\r\n      if(c.length === 2) {\r\n        v = c[j]\r\n      }\r\n      var a = vertexIds[v][0]\r\n      var b = vertexIds[v][1]\r\n      var w = vertexWeights[v]\r\n      var wi = 1.0 - w\r\n      var pa = this.positions[a]\r\n      var pb = this.positions[b]\r\n      for(var k=0; k<3; ++k) {\r\n        result[ptr++] = w * pa[k] + wi * pb[k]\r\n      }\r\n    }\r\n  }\r\n  this.contourCount = (ptr / 3)|0\r\n  this.contourPositions.update(result.subarray(0, ptr))\r\n  pool.free(result)\r\n}\r\n\r\nproto.update = function(params) {\r\n  params = params || {}\r\n  var gl = this.gl\r\n\r\n  this.dirty = true\r\n\r\n  if('contourEnable' in params) {\r\n    this.contourEnable = params.contourEnable\r\n  }\r\n  if('contourColor' in params) {\r\n    this.contourColor = params.contourColor\r\n  }\r\n  if('lineWidth' in params) {\r\n    this.lineWidth = params.lineWidth\r\n  }\r\n  if('lightPosition' in params) {\r\n    this.lightPosition = params.lightPosition\r\n  }\r\n  if('opacity' in params) {\r\n    this.opacity = params.opacity\r\n  }\r\n  if('ambient' in params) {\r\n    this.ambientLight  = params.ambient\r\n  }\r\n  if('diffuse' in params) {\r\n    this.diffuseLight = params.diffuse\r\n  }\r\n  if('specular' in params) {\r\n    this.specularLight = params.specular\r\n  }\r\n  if('roughness' in params) {\r\n    this.roughness = params.roughness\r\n  }\r\n  if('fresnel' in params) {\r\n    this.fresnel = params.fresnel\r\n  }\r\n\r\n  if(params.texture) {\r\n    this.texture.dispose()\r\n    this.texture = createTexture(gl, params.texture)\r\n  } else if (params.colormap) {\r\n    this.texture.shape = [256,256]\r\n    this.texture.minFilter = gl.LINEAR_MIPMAP_LINEAR\r\n    this.texture.magFilter = gl.LINEAR\r\n    this.texture.setPixels(genColormap(params.colormap))\r\n    this.texture.generateMipmap()\r\n  }\r\n\r\n  var cells = params.cells\r\n  var positions = params.positions\r\n\r\n  if(!positions || !cells) {\r\n    return\r\n  }\r\n\r\n  var tPos = []\r\n  var tCol = []\r\n  var tNor = []\r\n  var tUVs = []\r\n  var tIds = []\r\n\r\n  var ePos = []\r\n  var eCol = []\r\n  var eUVs = []\r\n  var eIds = []\r\n\r\n  var pPos = []\r\n  var pCol = []\r\n  var pUVs = []\r\n  var pSiz = []\r\n  var pIds = []\r\n\r\n  //Save geometry data for picking calculations\r\n  this.cells     = cells\r\n  this.positions = positions\r\n\r\n  //Compute normals\r\n  var vertexNormals = params.vertexNormals\r\n  var cellNormals   = params.cellNormals\r\n  var vertexNormalsEpsilon = params.vertexNormalsEpsilon === void(0) ? DEFAULT_VERTEX_NORMALS_EPSILON : params.vertexNormalsEpsilon\r\n  var faceNormalsEpsilon = params.faceNormalsEpsilon === void(0) ? DEFAULT_FACE_NORMALS_EPSILON : params.faceNormalsEpsilon\r\n  if(params.useFacetNormals && !cellNormals) {\r\n    cellNormals = normals.faceNormals(cells, positions, faceNormalsEpsilon)\r\n  }\r\n  if(!cellNormals && !vertexNormals) {\r\n    vertexNormals = normals.vertexNormals(cells, positions, vertexNormalsEpsilon)\r\n  }\r\n\r\n  //Compute colors\r\n  var vertexColors    = params.vertexColors\r\n  var cellColors      = params.cellColors\r\n  var meshColor       = params.meshColor || [1,1,1,1]\r\n\r\n  //UVs\r\n  var vertexUVs       = params.vertexUVs\r\n  var vertexIntensity = params.vertexIntensity\r\n  var cellUVs         = params.cellUVs\r\n  var cellIntensity   = params.cellIntensity\r\n\r\n  var intensityLo     = Infinity\r\n  var intensityHi     = -Infinity\r\n  if(!vertexUVs && !cellUVs) {\r\n    if(vertexIntensity) {\r\n      if(params.vertexIntensityBounds) {\r\n        intensityLo = +params.vertexIntensityBounds[0]\r\n        intensityHi = +params.vertexIntensityBounds[1]\r\n      } else {\r\n        for(var i=0; i<vertexIntensity.length; ++i) {\r\n          var f = vertexIntensity[i]\r\n          intensityLo = Math.min(intensityLo, f)\r\n          intensityHi = Math.max(intensityHi, f)\r\n        }\r\n      }\r\n    } else if(cellIntensity) {\r\n      for(var i=0; i<cellIntensity.length; ++i) {\r\n        var f = cellIntensity[i]\r\n        intensityLo = Math.min(intensityLo, f)\r\n        intensityHi = Math.max(intensityHi, f)\r\n      }\r\n    } else {\r\n      for(var i=0; i<positions.length; ++i) {\r\n        var f = positions[i][2]\r\n        intensityLo = Math.min(intensityLo, f)\r\n        intensityHi = Math.max(intensityHi, f)\r\n      }\r\n    }\r\n  }\r\n\r\n  if(vertexIntensity) {\r\n    this.intensity = vertexIntensity\r\n  } else if(cellIntensity) {\r\n    this.intensity = unpackIntensity(cells, positions.length, cellIntensity)\r\n  } else {\r\n    this.intensity = takeZComponent(positions)\r\n  }\r\n\r\n  //Point size\r\n  var pointSizes      = params.pointSizes\r\n  var meshPointSize   = params.pointSize || 1.0\r\n\r\n  //Update bounds\r\n  this.bounds       = [[Infinity,Infinity,Infinity], [-Infinity,-Infinity,-Infinity]]\r\n  for(var i=0; i<positions.length; ++i) {\r\n    var p = positions[i]\r\n    for(var j=0; j<3; ++j) {\r\n      if(isNaN(p[j]) || !isFinite(p[j])) {\r\n        continue\r\n      }\r\n      this.bounds[0][j] = Math.min(this.bounds[0][j], p[j])\r\n      this.bounds[1][j] = Math.max(this.bounds[1][j], p[j])\r\n    }\r\n  }\r\n\r\n  //Pack cells into buffers\r\n  var triangleCount = 0\r\n  var edgeCount = 0\r\n  var pointCount = 0\r\n\r\nfill_loop:\r\n  for(var i=0; i<cells.length; ++i) {\r\n    var cell = cells[i]\r\n    switch(cell.length) {\r\n      case 1:\r\n\r\n        var v = cell[0]\r\n        var p = positions[v]\r\n\r\n        //Check NaNs\r\n        for(var j=0; j<3; ++j) {\r\n          if(isNaN(p[j]) || !isFinite(p[j])) {\r\n            continue fill_loop\r\n          }\r\n        }\r\n\r\n        pPos.push(p[0], p[1], p[2])\r\n\r\n        var c\r\n        if(vertexColors) {\r\n          c = vertexColors[v]\r\n        } else if(cellColors) {\r\n          c = cellColors[i]\r\n        } else {\r\n          c = meshColor\r\n        }\r\n        if(c.length === 3) {\r\n          pCol.push(c[0], c[1], c[2], 1)\r\n        } else {\r\n          pCol.push(c[0], c[1], c[2], c[3])\r\n        }\r\n\r\n        var uv\r\n        if(vertexUVs) {\r\n          uv = vertexUVs[v]\r\n        } else if(vertexIntensity) {\r\n          uv = [\r\n            (vertexIntensity[v] - intensityLo) /\r\n            (intensityHi - intensityLo), 0]\r\n        } else if(cellUVs) {\r\n          uv = cellUVs[i]\r\n        } else if(cellIntensity) {\r\n          uv = [\r\n            (cellIntensity[i] - intensityLo) /\r\n            (intensityHi - intensityLo), 0]\r\n        } else {\r\n          uv = [\r\n            (p[2] - intensityLo) /\r\n            (intensityHi - intensityLo), 0]\r\n        }\r\n        pUVs.push(uv[0], uv[1])\r\n\r\n        if(pointSizes) {\r\n          pSiz.push(pointSizes[v])\r\n        } else {\r\n          pSiz.push(meshPointSize)\r\n        }\r\n\r\n        pIds.push(i)\r\n\r\n        pointCount += 1\r\n      break\r\n\r\n      case 2:\r\n\r\n        //Check NaNs\r\n        for(var j=0; j<2; ++j) {\r\n          var v = cell[j]\r\n          var p = positions[v]\r\n          for(var k=0; k<3; ++k) {\r\n            if(isNaN(p[k]) || !isFinite(p[k])) {\r\n              continue fill_loop\r\n            }\r\n          }\r\n        }\r\n\r\n        for(var j=0; j<2; ++j) {\r\n          var v = cell[j]\r\n          var p = positions[v]\r\n\r\n          ePos.push(p[0], p[1], p[2])\r\n\r\n          var c\r\n          if(vertexColors) {\r\n            c = vertexColors[v]\r\n          } else if(cellColors) {\r\n            c = cellColors[i]\r\n          } else {\r\n            c = meshColor\r\n          }\r\n          if(c.length === 3) {\r\n            eCol.push(c[0], c[1], c[2], 1)\r\n          } else {\r\n            eCol.push(c[0], c[1], c[2], c[3])\r\n          }\r\n\r\n          var uv\r\n          if(vertexUVs) {\r\n            uv = vertexUVs[v]\r\n          } else if(vertexIntensity) {\r\n            uv = [\r\n              (vertexIntensity[v] - intensityLo) /\r\n              (intensityHi - intensityLo), 0]\r\n          } else if(cellUVs) {\r\n            uv = cellUVs[i]\r\n          } else if(cellIntensity) {\r\n            uv = [\r\n              (cellIntensity[i] - intensityLo) /\r\n              (intensityHi - intensityLo), 0]\r\n          } else {\r\n            uv = [\r\n              (p[2] - intensityLo) /\r\n              (intensityHi - intensityLo), 0]\r\n          }\r\n          eUVs.push(uv[0], uv[1])\r\n\r\n          eIds.push(i)\r\n        }\r\n        edgeCount += 1\r\n      break\r\n\r\n      case 3:\r\n        //Check NaNs\r\n        for(var j=0; j<3; ++j) {\r\n          var v = cell[j]\r\n          var p = positions[v]\r\n          for(var k=0; k<3; ++k) {\r\n            if(isNaN(p[k]) || !isFinite(p[k])) {\r\n              continue fill_loop\r\n            }\r\n          }\r\n        }\r\n\r\n        for(var j=0; j<3; ++j) {\r\n          var v = cell[j]\r\n\r\n          var p = positions[v]\r\n          tPos.push(p[0], p[1], p[2])\r\n\r\n          var c\r\n          if(vertexColors) {\r\n            c = vertexColors[v]\r\n          } else if(cellColors) {\r\n            c = cellColors[i]\r\n          } else {\r\n            c = meshColor\r\n          }\r\n          if(c.length === 3) {\r\n            tCol.push(c[0], c[1], c[2], 1)\r\n          } else {\r\n            tCol.push(c[0], c[1], c[2], c[3])\r\n          }\r\n\r\n          var uv\r\n          if(vertexUVs) {\r\n            uv = vertexUVs[v]\r\n          } else if(vertexIntensity) {\r\n            uv = [\r\n              (vertexIntensity[v] - intensityLo) /\r\n              (intensityHi - intensityLo), 0]\r\n          } else if(cellUVs) {\r\n            uv = cellUVs[i]\r\n          } else if(cellIntensity) {\r\n            uv = [\r\n              (cellIntensity[i] - intensityLo) /\r\n              (intensityHi - intensityLo), 0]\r\n          } else {\r\n            uv = [\r\n              (p[2] - intensityLo) /\r\n              (intensityHi - intensityLo), 0]\r\n          }\r\n          tUVs.push(uv[0], uv[1])\r\n\r\n          var q\r\n          if(vertexNormals) {\r\n            q = vertexNormals[v]\r\n          } else {\r\n            q = cellNormals[i]\r\n          }\r\n          tNor.push(q[0], q[1], q[2])\r\n\r\n          tIds.push(i)\r\n        }\r\n        triangleCount += 1\r\n      break\r\n\r\n      default:\r\n      break\r\n    }\r\n  }\r\n\r\n  this.pointCount     = pointCount\r\n  this.edgeCount      = edgeCount\r\n  this.triangleCount  = triangleCount\r\n\r\n  this.pointPositions.update(pPos)\r\n  this.pointColors.update(pCol)\r\n  this.pointUVs.update(pUVs)\r\n  this.pointSizes.update(pSiz)\r\n  this.pointIds.update(new Uint32Array(pIds))\r\n\r\n  this.edgePositions.update(ePos)\r\n  this.edgeColors.update(eCol)\r\n  this.edgeUVs.update(eUVs)\r\n  this.edgeIds.update(new Uint32Array(eIds))\r\n\r\n  this.trianglePositions.update(tPos)\r\n  this.triangleColors.update(tCol)\r\n  this.triangleUVs.update(tUVs)\r\n  this.triangleNormals.update(tNor)\r\n  this.triangleIds.update(new Uint32Array(tIds))\r\n}\r\n\r\nproto.drawTransparent = proto.draw = function(params) {\r\n  params = params || {}\r\n  var gl          = this.gl\r\n  var model       = params.model      || identityMatrix\r\n  var view        = params.view       || identityMatrix\r\n  var projection  = params.projection || identityMatrix\r\n\r\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\r\n  for(var i=0; i<3; ++i) {\r\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\r\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\r\n  }\r\n\r\n  var uniforms = {\r\n    model:      model,\r\n    view:       view,\r\n    projection: projection,\r\n\r\n    clipBounds: clipBounds,\r\n\r\n    kambient:   this.ambientLight,\r\n    kdiffuse:   this.diffuseLight,\r\n    kspecular:  this.specularLight,\r\n    roughness:  this.roughness,\r\n    fresnel:    this.fresnel,\r\n\r\n    eyePosition:   [0,0,0],\r\n    lightPosition: [0,0,0],\r\n\r\n    opacity:  this.opacity,\r\n\r\n    contourColor: this.contourColor,\r\n\r\n    texture:    0\r\n  }\r\n\r\n  this.texture.bind(0)\r\n\r\n  var invCameraMatrix = new Array(16)\r\n  multiply(invCameraMatrix, uniforms.view, uniforms.model)\r\n  multiply(invCameraMatrix, uniforms.projection, invCameraMatrix)\r\n  invert(invCameraMatrix, invCameraMatrix)\r\n\r\n  for(var i=0; i<3; ++i) {\r\n    uniforms.eyePosition[i] = invCameraMatrix[12+i] / invCameraMatrix[15]\r\n  }\r\n\r\n  var w = invCameraMatrix[15]\r\n  for(var i=0; i<3; ++i) {\r\n    w += this.lightPosition[i] * invCameraMatrix[4*i+3]\r\n  }\r\n  for(var i=0; i<3; ++i) {\r\n    var s = invCameraMatrix[12+i]\r\n    for(var j=0; j<3; ++j) {\r\n      s += invCameraMatrix[4*j+i] * this.lightPosition[j]\r\n    }\r\n    uniforms.lightPosition[i] = s / w\r\n  }\r\n\r\n  if(this.triangleCount > 0) {\r\n    var shader = this.triShader\r\n    shader.bind()\r\n    shader.uniforms = uniforms\r\n\r\n    this.triangleVAO.bind()\r\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\r\n    this.triangleVAO.unbind()\r\n  }\r\n\r\n  if(this.edgeCount > 0 && this.lineWidth > 0) {\r\n    var shader = this.lineShader\r\n    shader.bind()\r\n    shader.uniforms = uniforms\r\n\r\n    this.edgeVAO.bind()\r\n    gl.lineWidth(this.lineWidth)\r\n    gl.drawArrays(gl.LINES, 0, this.edgeCount*2)\r\n    this.edgeVAO.unbind()\r\n  }\r\n\r\n  if(this.pointCount > 0) {\r\n    var shader = this.pointShader\r\n    shader.bind()\r\n    shader.uniforms = uniforms\r\n\r\n    this.pointVAO.bind()\r\n    gl.drawArrays(gl.POINTS, 0, this.pointCount)\r\n    this.pointVAO.unbind()\r\n  }\r\n\r\n  if(this.contourEnable && this.contourCount > 0 && this.contourLineWidth > 0) {\r\n    var shader = this.contourShader\r\n    shader.bind()\r\n    shader.uniforms = uniforms\r\n\r\n    this.contourVAO.bind()\r\n    gl.drawArrays(gl.LINES, 0, this.contourCount)\r\n    this.contourVAO.unbind()\r\n  }\r\n}\r\n\r\nproto.drawPick = function(params) {\r\n  params = params || {}\r\n\r\n  var gl         = this.gl\r\n\r\n  var model      = params.model      || identityMatrix\r\n  var view       = params.view       || identityMatrix\r\n  var projection = params.projection || identityMatrix\r\n\r\n  var clipBounds = [[-1e6,-1e6,-1e6],[1e6,1e6,1e6]]\r\n  for(var i=0; i<3; ++i) {\r\n    clipBounds[0][i] = Math.max(clipBounds[0][i], this.clipBounds[0][i])\r\n    clipBounds[1][i] = Math.min(clipBounds[1][i], this.clipBounds[1][i])\r\n  }\r\n\r\n  //Save camera parameters\r\n  this._model      = [].slice.call(model)\r\n  this._view       = [].slice.call(view)\r\n  this._projection = [].slice.call(projection)\r\n  this._resolution = [gl.drawingBufferWidth, gl.drawingBufferHeight]\r\n\r\n  var uniforms = {\r\n    model:      model,\r\n    view:       view,\r\n    projection: projection,\r\n    clipBounds: clipBounds,\r\n    pickId:     this.pickId / 255.0,\r\n  }\r\n\r\n  var shader = this.pickShader\r\n  shader.bind()\r\n  shader.uniforms = uniforms\r\n\r\n  if(this.triangleCount > 0) {\r\n    this.triangleVAO.bind()\r\n    gl.drawArrays(gl.TRIANGLES, 0, this.triangleCount*3)\r\n    this.triangleVAO.unbind()\r\n  }\r\n\r\n  if(this.edgeCount > 0) {\r\n    this.edgeVAO.bind()\r\n    gl.lineWidth(this.lineWidth)\r\n    gl.drawArrays(gl.LINES, 0, this.edgeCount*2)\r\n    this.edgeVAO.unbind()\r\n  }\r\n\r\n  if(this.pointCount > 0) {\r\n    var shader = this.pointPickShader\r\n    shader.bind()\r\n    shader.uniforms = uniforms\r\n\r\n    this.pointVAO.bind()\r\n    gl.drawArrays(gl.POINTS, 0, this.pointCount)\r\n    this.pointVAO.unbind()\r\n  }\r\n}\r\n\r\n\r\nproto.pick = function(pickData) {\r\n  if(!pickData) {\r\n    return null\r\n  }\r\n  if(pickData.id !== this.pickId) {\r\n    return null\r\n  }\r\n\r\n  var cellId    = pickData.value[0] + 256*pickData.value[1] + 65536*pickData.value[2]\r\n  var cell      = this.cells[cellId]\r\n  var positions = this.positions\r\n\r\n  var simplex   = new Array(cell.length)\r\n  for(var i=0; i<cell.length; ++i) {\r\n    simplex[i] = positions[cell[i]]\r\n  }\r\n\r\n  var data = closestPoint(\r\n    simplex,\r\n    [pickData.coord[0], this._resolution[1]-pickData.coord[1]],\r\n    this._model,\r\n    this._view,\r\n    this._projection,\r\n    this._resolution)\r\n\r\n  if(!data) {\r\n    return null\r\n  }\r\n\r\n  var weights = data[2]\r\n  var interpIntensity = 0.0\r\n  for(var i=0; i<cell.length; ++i) {\r\n    interpIntensity += weights[i] * this.intensity[cell[i]]\r\n  }\r\n\r\n  return {\r\n    position: data[1],\r\n    index:    cell[data[0]],\r\n    cell:     cell,\r\n    cellId:   cellId,\r\n    intensity:  interpIntensity,\r\n    dataCoordinate: this.positions[cell[data[0]]]\r\n  }\r\n}\r\n\r\n\r\nproto.dispose = function() {\r\n  this.texture.dispose()\r\n\r\n  this.triShader.dispose()\r\n  this.lineShader.dispose()\r\n  this.pointShader.dispose()\r\n  this.pickShader.dispose()\r\n  this.pointPickShader.dispose()\r\n\r\n  this.triangleVAO.dispose()\r\n  this.trianglePositions.dispose()\r\n  this.triangleColors.dispose()\r\n  this.triangleUVs.dispose()\r\n  this.triangleNormals.dispose()\r\n  this.triangleIds.dispose()\r\n\r\n  this.edgeVAO.dispose()\r\n  this.edgePositions.dispose()\r\n  this.edgeColors.dispose()\r\n  this.edgeUVs.dispose()\r\n  this.edgeIds.dispose()\r\n\r\n  this.pointVAO.dispose()\r\n  this.pointPositions.dispose()\r\n  this.pointColors.dispose()\r\n  this.pointUVs.dispose()\r\n  this.pointSizes.dispose()\r\n  this.pointIds.dispose()\r\n\r\n  this.contourVAO.dispose()\r\n  this.contourPositions.dispose()\r\n  this.contourShader.dispose()\r\n}\r\n\r\nfunction createMeshShader(gl) {\r\n  var shader = createShader(gl, meshShader.vertex, meshShader.fragment)\r\n  shader.attributes.position.location = 0\r\n  shader.attributes.color.location    = 2\r\n  shader.attributes.uv.location       = 3\r\n  shader.attributes.normal.location   = 4\r\n  return shader\r\n}\r\n\r\nfunction createWireShader(gl) {\r\n  var shader = createShader(gl, wireShader.vertex, wireShader.fragment)\r\n  shader.attributes.position.location = 0\r\n  shader.attributes.color.location    = 2\r\n  shader.attributes.uv.location       = 3\r\n  return shader\r\n}\r\n\r\nfunction createPointShader(gl) {\r\n  var shader = createShader(gl, pointShader.vertex, pointShader.fragment)\r\n  shader.attributes.position.location  = 0\r\n  shader.attributes.color.location     = 2\r\n  shader.attributes.uv.location        = 3\r\n  shader.attributes.pointSize.location = 4\r\n  return shader\r\n}\r\n\r\nfunction createPickShader(gl) {\r\n  var shader = createShader(gl, pickShader.vertex, pickShader.fragment)\r\n  shader.attributes.position.location = 0\r\n  shader.attributes.id.location       = 1\r\n  return shader\r\n}\r\n\r\nfunction createPointPickShader(gl) {\r\n  var shader = createShader(gl, pointPickShader.vertex, pointPickShader.fragment)\r\n  shader.attributes.position.location  = 0\r\n  shader.attributes.id.location        = 1\r\n  shader.attributes.pointSize.location = 4\r\n  return shader\r\n}\r\n\r\nfunction createContourShader(gl) {\r\n  var shader = createShader(gl, contourShader.vertex, contourShader.fragment)\r\n  shader.attributes.position.location = 0\r\n  return shader\r\n}\r\n\r\nfunction createSimplicialMesh(gl, params) {\r\n  if (arguments.length === 1) {\r\n    params = gl;\r\n    gl = params.gl;\r\n  }\r\n\r\n  //enable derivatives for face normals\r\n  var ext = gl.getExtension('OES_standard_derivatives') || gl.getExtension('MOZ_OES_standard_derivatives') || gl.getExtension('WEBKIT_OES_standard_derivatives')\r\n  if (!ext)\r\n    throw new Error('derivatives not supported')\r\n\r\n  var triShader       = createMeshShader(gl)\r\n  var lineShader      = createWireShader(gl)\r\n  var pointShader     = createPointShader(gl)\r\n  var pickShader      = createPickShader(gl)\r\n  var pointPickShader = createPointPickShader(gl)\r\n  var contourShader   = createContourShader(gl)\r\n\r\n  var meshTexture       = createTexture(gl,\r\n    ndarray(new Uint8Array([255,255,255,255]), [1,1,4]))\r\n  meshTexture.generateMipmap()\r\n  meshTexture.minFilter = gl.LINEAR_MIPMAP_LINEAR\r\n  meshTexture.magFilter = gl.LINEAR\r\n\r\n  var trianglePositions = createBuffer(gl)\r\n  var triangleColors    = createBuffer(gl)\r\n  var triangleUVs       = createBuffer(gl)\r\n  var triangleNormals   = createBuffer(gl)\r\n  var triangleIds       = createBuffer(gl)\r\n  var triangleVAO       = createVAO(gl, [\r\n    { buffer: trianglePositions,\r\n      type: gl.FLOAT,\r\n      size: 3\r\n    },\r\n    { buffer: triangleIds,\r\n      type: gl.UNSIGNED_BYTE,\r\n      size: 4,\r\n      normalized: true\r\n    },\r\n    { buffer: triangleColors,\r\n      type: gl.FLOAT,\r\n      size: 4\r\n    },\r\n    { buffer: triangleUVs,\r\n      type: gl.FLOAT,\r\n      size: 2\r\n    },\r\n    { buffer: triangleNormals,\r\n      type: gl.FLOAT,\r\n      size: 3\r\n    }\r\n  ])\r\n\r\n  var edgePositions = createBuffer(gl)\r\n  var edgeColors    = createBuffer(gl)\r\n  var edgeUVs       = createBuffer(gl)\r\n  var edgeIds       = createBuffer(gl)\r\n  var edgeVAO       = createVAO(gl, [\r\n    { buffer: edgePositions,\r\n      type: gl.FLOAT,\r\n      size: 3\r\n    },\r\n    { buffer: edgeIds,\r\n      type: gl.UNSIGNED_BYTE,\r\n      size: 4,\r\n      normalized: true\r\n    },\r\n    { buffer: edgeColors,\r\n      type: gl.FLOAT,\r\n      size: 4\r\n    },\r\n    { buffer: edgeUVs,\r\n      type: gl.FLOAT,\r\n      size: 2\r\n    }\r\n  ])\r\n\r\n  var pointPositions  = createBuffer(gl)\r\n  var pointColors     = createBuffer(gl)\r\n  var pointUVs        = createBuffer(gl)\r\n  var pointSizes      = createBuffer(gl)\r\n  var pointIds        = createBuffer(gl)\r\n  var pointVAO        = createVAO(gl, [\r\n    { buffer: pointPositions,\r\n      type: gl.FLOAT,\r\n      size: 3\r\n    },\r\n    { buffer: pointIds,\r\n      type: gl.UNSIGNED_BYTE,\r\n      size: 4,\r\n      normalized: true\r\n    },\r\n    { buffer: pointColors,\r\n      type: gl.FLOAT,\r\n      size: 4\r\n    },\r\n    { buffer: pointUVs,\r\n      type: gl.FLOAT,\r\n      size: 2\r\n    },\r\n    { buffer: pointSizes,\r\n      type: gl.FLOAT,\r\n      size: 1\r\n    }\r\n  ])\r\n\r\n  var contourPositions = createBuffer(gl)\r\n  var contourVAO       = createVAO(gl, [\r\n    { buffer: contourPositions,\r\n      type:   gl.FLOAT,\r\n      size:   3\r\n    }])\r\n\r\n  var mesh = new SimplicialMesh(gl\r\n    , meshTexture\r\n    , triShader\r\n    , lineShader\r\n    , pointShader\r\n    , pickShader\r\n    , pointPickShader\r\n    , contourShader\r\n    , trianglePositions\r\n    , triangleIds\r\n    , triangleColors\r\n    , triangleUVs\r\n    , triangleNormals\r\n    , triangleVAO\r\n    , edgePositions\r\n    , edgeIds\r\n    , edgeColors\r\n    , edgeUVs\r\n    , edgeVAO\r\n    , pointPositions\r\n    , pointIds\r\n    , pointColors\r\n    , pointUVs\r\n    , pointSizes\r\n    , pointVAO\r\n    , contourPositions\r\n    , contourVAO)\r\n\r\n  mesh.update(params)\r\n\r\n  return mesh\r\n}\r\n\r\nmodule.exports = createSimplicialMesh\r\n",null]}