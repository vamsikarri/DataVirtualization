{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/surface/convert.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/surface/convert.js","mtime":1529418310747},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar createSurface = require('gl-surface3d');\nvar ndarray = require('ndarray');\nvar homography = require('ndarray-homography');\nvar fill = require('ndarray-fill');\nvar ops = require('ndarray-ops');\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\nvar parseColorScale = require('../../lib/gl_format_color').parseColorScale;\nvar str2RgbaArray = require('../../lib/str2rgbarray');\n\nvar MIN_RESOLUTION = 128;\n\nfunction SurfaceTrace(scene, surface, uid) {\n    this.scene = scene;\n    this.uid = uid;\n    this.surface = surface;\n    this.data = null;\n    this.showContour = [false, false, false];\n    this.dataScale = 1.0;\n}\n\nvar proto = SurfaceTrace.prototype;\n\nproto.handlePick = function(selection) {\n    if(selection.object === this.surface) {\n        var selectIndex = selection.index = [\n            Math.min(\n                Math.round(selection.data.index[0] / this.dataScale - 1)|0,\n                this.data.z[0].length - 1\n            ),\n            Math.min(\n                Math.round(selection.data.index[1] / this.dataScale - 1)|0,\n                this.data.z.length - 1\n            )\n        ];\n        var traceCoordinate = [0, 0, 0];\n\n        if(!isArrayOrTypedArray(this.data.x)) {\n            traceCoordinate[0] = selectIndex[0];\n        } else if(isArrayOrTypedArray(this.data.x[0])) {\n            traceCoordinate[0] = this.data.x[selectIndex[1]][selectIndex[0]];\n        } else {\n            traceCoordinate[0] = this.data.x[selectIndex[0]];\n        }\n\n        if(!isArrayOrTypedArray(this.data.y)) {\n            traceCoordinate[1] = selectIndex[1];\n        } else if(isArrayOrTypedArray(this.data.y[0])) {\n            traceCoordinate[1] = this.data.y[selectIndex[1]][selectIndex[0]];\n        } else {\n            traceCoordinate[1] = this.data.y[selectIndex[1]];\n        }\n\n        traceCoordinate[2] = this.data.z[selectIndex[1]][selectIndex[0]];\n        selection.traceCoordinate = traceCoordinate;\n\n        var sceneLayout = this.scene.fullSceneLayout;\n        selection.dataCoordinate = [\n            sceneLayout.xaxis.d2l(traceCoordinate[0], 0, this.data.xcalendar) * this.scene.dataScale[0],\n            sceneLayout.yaxis.d2l(traceCoordinate[1], 0, this.data.ycalendar) * this.scene.dataScale[1],\n            sceneLayout.zaxis.d2l(traceCoordinate[2], 0, this.data.zcalendar) * this.scene.dataScale[2]\n        ];\n\n        var text = this.data.text;\n        if(Array.isArray(text) && text[selectIndex[1]] && text[selectIndex[1]][selectIndex[0]] !== undefined) {\n            selection.textLabel = text[selectIndex[1]][selectIndex[0]];\n        } else if(text) {\n            selection.textLabel = text;\n        } else {\n            selection.textLabel = '';\n        }\n\n        selection.data.dataCoordinate = selection.dataCoordinate.slice();\n\n        this.surface.highlight(selection.data);\n\n        // Snap spikes to data coordinate\n        this.scene.glplot.spikes.position = selection.dataCoordinate;\n\n        return true;\n    }\n};\n\nfunction isColormapCircular(colormap) {\n    var first = colormap[0].rgb,\n        last = colormap[colormap.length - 1].rgb;\n\n    return (\n        first[0] === last[0] &&\n        first[1] === last[1] &&\n        first[2] === last[2] &&\n        first[3] === last[3]\n    );\n}\n\n// Pad coords by +1\nfunction padField(field) {\n    var shape = field.shape;\n    var nshape = [shape[0] + 2, shape[1] + 2];\n    var nfield = ndarray(new Float32Array(nshape[0] * nshape[1]), nshape);\n\n    // Center\n    ops.assign(nfield.lo(1, 1).hi(shape[0], shape[1]), field);\n\n    // Edges\n    ops.assign(nfield.lo(1).hi(shape[0], 1),\n                field.hi(shape[0], 1));\n    ops.assign(nfield.lo(1, nshape[1] - 1).hi(shape[0], 1),\n                field.lo(0, shape[1] - 1).hi(shape[0], 1));\n    ops.assign(nfield.lo(0, 1).hi(1, shape[1]),\n                field.hi(1));\n    ops.assign(nfield.lo(nshape[0] - 1, 1).hi(1, shape[1]),\n                field.lo(shape[0] - 1));\n\n    // Corners\n    nfield.set(0, 0, field.get(0, 0));\n    nfield.set(0, nshape[1] - 1, field.get(0, shape[1] - 1));\n    nfield.set(nshape[0] - 1, 0, field.get(shape[0] - 1, 0));\n    nfield.set(nshape[0] - 1, nshape[1] - 1, field.get(shape[0] - 1, shape[1] - 1));\n\n    return nfield;\n}\n\nfunction refine(coords) {\n    var minScale = Math.max(coords[0].shape[0], coords[0].shape[1]);\n\n    if(minScale < MIN_RESOLUTION) {\n        var scaleF = MIN_RESOLUTION / minScale;\n        var nshape = [\n            Math.floor((coords[0].shape[0]) * scaleF + 1)|0,\n            Math.floor((coords[0].shape[1]) * scaleF + 1)|0 ];\n        var nsize = nshape[0] * nshape[1];\n\n        for(var i = 0; i < coords.length; ++i) {\n            var padImg = padField(coords[i]);\n            var scaledImg = ndarray(new Float32Array(nsize), nshape);\n            homography(scaledImg, padImg, [scaleF, 0, 0,\n                0, scaleF, 0,\n                0, 0, 1]);\n            coords[i] = scaledImg;\n        }\n\n        return scaleF;\n    }\n\n    return 1.0;\n}\n\nproto.setContourLevels = function() {\n    var nlevels = [[], [], []];\n    var needsUpdate = false;\n\n    for(var i = 0; i < 3; ++i) {\n        if(this.showContour[i]) {\n            needsUpdate = true;\n            nlevels[i] = this.scene.contourLevels[i];\n        }\n    }\n\n    if(needsUpdate) {\n        this.surface.update({ levels: nlevels });\n    }\n};\n\nproto.update = function(data) {\n    var i,\n        scene = this.scene,\n        sceneLayout = scene.fullSceneLayout,\n        surface = this.surface,\n        alpha = data.opacity,\n        colormap = parseColorScale(data.colorscale, alpha),\n        z = data.z,\n        x = data.x,\n        y = data.y,\n        xaxis = sceneLayout.xaxis,\n        yaxis = sceneLayout.yaxis,\n        zaxis = sceneLayout.zaxis,\n        scaleFactor = scene.dataScale,\n        xlen = z[0].length,\n        ylen = data._ylength,\n        coords = [\n            ndarray(new Float32Array(xlen * ylen), [xlen, ylen]),\n            ndarray(new Float32Array(xlen * ylen), [xlen, ylen]),\n            ndarray(new Float32Array(xlen * ylen), [xlen, ylen])\n        ],\n        xc = coords[0],\n        yc = coords[1],\n        contourLevels = scene.contourLevels;\n\n    // Save data\n    this.data = data;\n\n    /*\n     * Fill and transpose zdata.\n     * Consistent with 'heatmap' and 'contour', plotly 'surface'\n     * 'z' are such that sub-arrays correspond to y-coords\n     * and that the sub-array entries correspond to a x-coords,\n     * which is the transpose of 'gl-surface-plot'.\n     */\n\n    var xcalendar = data.xcalendar,\n        ycalendar = data.ycalendar,\n        zcalendar = data.zcalendar;\n\n    fill(coords[2], function(row, col) {\n        return zaxis.d2l(z[col][row], 0, zcalendar) * scaleFactor[2];\n    });\n\n    // coords x\n    if(!isArrayOrTypedArray(x)) {\n        fill(xc, function(row) {\n            return xaxis.d2l(row, 0, xcalendar) * scaleFactor[0];\n        });\n    } else if(isArrayOrTypedArray(x[0])) {\n        fill(xc, function(row, col) {\n            return xaxis.d2l(x[col][row], 0, xcalendar) * scaleFactor[0];\n        });\n    } else {\n        // ticks x\n        fill(xc, function(row) {\n            return xaxis.d2l(x[row], 0, xcalendar) * scaleFactor[0];\n        });\n    }\n\n    // coords y\n    if(!isArrayOrTypedArray(x)) {\n        fill(yc, function(row, col) {\n            return yaxis.d2l(col, 0, xcalendar) * scaleFactor[1];\n        });\n    } else if(isArrayOrTypedArray(y[0])) {\n        fill(yc, function(row, col) {\n            return yaxis.d2l(y[col][row], 0, ycalendar) * scaleFactor[1];\n        });\n    } else {\n        // ticks y\n        fill(yc, function(row, col) {\n            return yaxis.d2l(y[col], 0, ycalendar) * scaleFactor[1];\n        });\n    }\n\n    var params = {\n        colormap: colormap,\n        levels: [[], [], []],\n        showContour: [true, true, true],\n        showSurface: !data.hidesurface,\n        contourProject: [\n            [false, false, false],\n            [false, false, false],\n            [false, false, false]\n        ],\n        contourWidth: [1, 1, 1],\n        contourColor: [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],\n        contourTint: [1, 1, 1],\n        dynamicColor: [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],\n        dynamicWidth: [1, 1, 1],\n        dynamicTint: [1, 1, 1],\n        opacity: data.opacity\n    };\n\n    params.intensityBounds = [data.cmin, data.cmax];\n\n    // Refine if necessary\n    if(data.surfacecolor) {\n        var intensity = ndarray(new Float32Array(xlen * ylen), [xlen, ylen]);\n\n        fill(intensity, function(row, col) {\n            return data.surfacecolor[col][row];\n        });\n\n        coords.push(intensity);\n    }\n    else {\n        // when 'z' is used as 'intensity',\n        // we must scale its value\n        params.intensityBounds[0] *= scaleFactor[2];\n        params.intensityBounds[1] *= scaleFactor[2];\n    }\n\n    this.dataScale = refine(coords);\n\n    if(data.surfacecolor) {\n        params.intensity = coords.pop();\n    }\n\n    var highlightEnable = [true, true, true];\n    var axis = ['x', 'y', 'z'];\n\n    for(i = 0; i < 3; ++i) {\n        var contourParams = data.contours[axis[i]];\n        highlightEnable[i] = contourParams.highlight;\n\n        params.showContour[i] = contourParams.show || contourParams.highlight;\n        if(!params.showContour[i]) continue;\n\n        params.contourProject[i] = [\n            contourParams.project.x,\n            contourParams.project.y,\n            contourParams.project.z\n        ];\n\n        if(contourParams.show) {\n            this.showContour[i] = true;\n            params.levels[i] = contourLevels[i];\n            surface.highlightColor[i] = params.contourColor[i] = str2RgbaArray(contourParams.color);\n\n            if(contourParams.usecolormap) {\n                surface.highlightTint[i] = params.contourTint[i] = 0;\n            }\n            else {\n                surface.highlightTint[i] = params.contourTint[i] = 1;\n            }\n            params.contourWidth[i] = contourParams.width;\n        } else {\n            this.showContour[i] = false;\n        }\n\n        if(contourParams.highlight) {\n            params.dynamicColor[i] = str2RgbaArray(contourParams.highlightcolor);\n            params.dynamicWidth[i] = contourParams.highlightwidth;\n        }\n    }\n\n    // see https://github.com/plotly/plotly.js/issues/940\n    if(isColormapCircular(colormap)) {\n        params.vertexColor = true;\n    }\n\n    params.coords = coords;\n\n    surface.update(params);\n\n    surface.visible = data.visible;\n    surface.enableDynamic = highlightEnable;\n\n    surface.snapToData = true;\n\n    if('lighting' in data) {\n        surface.ambientLight = data.lighting.ambient;\n        surface.diffuseLight = data.lighting.diffuse;\n        surface.specularLight = data.lighting.specular;\n        surface.roughness = data.lighting.roughness;\n        surface.fresnel = data.lighting.fresnel;\n    }\n\n    if('lightposition' in data) {\n        surface.lightPosition = [data.lightposition.x, data.lightposition.y, data.lightposition.z];\n    }\n\n    if(alpha && alpha < 1) {\n        surface.supportsTransparency = true;\n    }\n};\n\nproto.dispose = function() {\n    this.scene.glplot.remove(this.surface);\n    this.surface.dispose();\n};\n\nfunction createSurfaceTrace(scene, data) {\n    var gl = scene.glplot.gl;\n    var surface = createSurface({ gl: gl });\n    var result = new SurfaceTrace(scene, surface, data.uid);\n    surface._trace = result;\n    result.update(data);\n    scene.glplot.add(surface);\n    return result;\n}\n\nmodule.exports = createSurfaceTrace;\n",null]}