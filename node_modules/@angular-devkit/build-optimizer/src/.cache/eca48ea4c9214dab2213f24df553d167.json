{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contour/make_color_map.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contour/make_color_map.js","mtime":1529418310713},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar Colorscale = require('../../components/colorscale');\nvar endPlus = require('./end_plus');\n\nmodule.exports = function makeColorMap(trace) {\n    var contours = trace.contours,\n        start = contours.start,\n        end = endPlus(contours),\n        cs = contours.size || 1,\n        nc = Math.floor((end - start) / cs) + 1,\n        extra = contours.coloring === 'lines' ? 0 : 1;\n\n    if(!isFinite(cs)) {\n        cs = 1;\n        nc = 1;\n    }\n\n    var scl = trace.colorscale,\n        len = scl.length;\n\n    var domain = new Array(len),\n        range = new Array(len);\n\n    var si, i;\n\n    if(contours.coloring === 'heatmap') {\n        if(trace.zauto && trace.autocontour === false) {\n            trace.zmin = start - cs / 2;\n            trace.zmax = trace.zmin + nc * cs;\n        }\n\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n\n            domain[i] = si[0] * (trace.zmax - trace.zmin) + trace.zmin;\n            range[i] = si[1];\n        }\n\n        // do the contours extend beyond the colorscale?\n        // if so, extend the colorscale with constants\n        var zRange = d3.extent([trace.zmin, trace.zmax, contours.start,\n                contours.start + cs * (nc - 1)]),\n            zmin = zRange[trace.zmin < trace.zmax ? 0 : 1],\n            zmax = zRange[trace.zmin < trace.zmax ? 1 : 0];\n\n        if(zmin !== trace.zmin) {\n            domain.splice(0, 0, zmin);\n            range.splice(0, 0, Range[0]);\n        }\n\n        if(zmax !== trace.zmax) {\n            domain.push(zmax);\n            range.push(range[range.length - 1]);\n        }\n    }\n    else {\n        for(i = 0; i < len; i++) {\n            si = scl[i];\n\n            domain[i] = (si[0] * (nc + extra - 1) - (extra / 2)) * cs + start;\n            range[i] = si[1];\n        }\n    }\n\n    return Colorscale.makeColorScaleFunc({\n        domain: domain,\n        range: range,\n    }, {\n        noNumericCheck: true\n    });\n};\n",null]}