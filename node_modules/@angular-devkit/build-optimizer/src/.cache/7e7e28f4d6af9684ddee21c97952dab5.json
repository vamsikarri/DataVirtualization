{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/pie/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/pie/attributes.js","mtime":1529418310729},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar plotAttrs = require('../../plots/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar textFontAttrs = fontAttrs({\n    editType: 'calc',\n    colorEditType: 'style',\n    description: 'Sets the font used for `textinfo`.'\n});\n\nmodule.exports = {\n    labels: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the sector labels.',\n            'If `labels` entries are duplicated, we sum associated `values`',\n            'or simply count occurrences if `values` is not provided.',\n            'For other array attributes (including color) we use the first',\n            'non-empty entry among all occurrences of the label.'\n        ].join(' ')\n    },\n    // equivalent of x0 and dx, if label is missing\n    label0: {\n        valType: 'number',\n        role: 'info',\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Alternate to `labels`.',\n            'Builds a numeric set of labels.',\n            'Use with `dlabel`',\n            'where `label0` is the starting label and `dlabel` the step.'\n        ].join(' ')\n    },\n    dlabel: {\n        valType: 'number',\n        role: 'info',\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the label step. See `label0` for more info.'\n    },\n\n    values: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the values of the sectors of this pie chart.',\n            'If omitted, we count occurrences of each label.'\n        ].join(' ')\n    },\n\n    marker: {\n        colors: {\n            valType: 'data_array',  // TODO 'color_array' ?\n            editType: 'calc',\n            description: [\n                'Sets the color of each sector of this pie chart.',\n                'If not specified, the default trace color set is used',\n                'to pick the sector colors.'\n            ].join(' ')\n        },\n\n        line: {\n            color: {\n                valType: 'color',\n                role: 'style',\n                dflt: colorAttrs.defaultLine,\n                arrayOk: true,\n                editType: 'style',\n                description: [\n                    'Sets the color of the line enclosing each sector.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                role: 'style',\n                min: 0,\n                dflt: 0,\n                arrayOk: true,\n                editType: 'style',\n                description: [\n                    'Sets the width (in px) of the line enclosing each sector.'\n                ].join(' ')\n            },\n            editType: 'calc'\n        },\n        editType: 'calc'\n    },\n\n    text: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets text elements associated with each sector.',\n            'If trace `textinfo` contains a *text* flag, these elements will seen',\n            'on the chart.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        editType: 'style',\n        description: [\n            'Sets hover text elements associated with each sector.',\n            'If a single string, the same string appears for',\n            'all data points.',\n            'If an array of string, the items are mapped in order of',\n            'this trace\\'s sectors.',\n            'To be seen, trace `hoverinfo` must contain a *text* flag.'\n        ].join(' ')\n    },\n\n// 'see eg:'\n// 'https://www.e-education.psu.edu/natureofgeoinfo/sites/www.e-education.psu.edu.natureofgeoinfo/files/image/hisp_pies.gif',\n// '(this example involves a map too - may someday be a whole trace type',\n// 'of its own. but the point is the size of the whole pie is important.)'\n    scalegroup: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: 'calc',\n        description: [\n            'If there are multiple pies that should be sized according to',\n            'their totals, link them by providing a non-empty group id here',\n            'shared by every trace in the same group.'\n        ].join(' ')\n    },\n\n    // labels (legend is handled by plots.attributes.showlegend and layout.hiddenlabels)\n    textinfo: {\n        valType: 'flaglist',\n        role: 'info',\n        flags: ['label', 'text', 'value', 'percent'],\n        extras: ['none'],\n        editType: 'calc',\n        description: [\n            'Determines which trace information appear on the graph.'\n        ].join(' ')\n    },\n    hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n        flags: ['label', 'text', 'value', 'percent', 'name']\n    }),\n    textposition: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['inside', 'outside', 'auto', 'none'],\n        dflt: 'auto',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Specifies the location of the `textinfo`.'\n        ].join(' ')\n    },\n    // TODO make those arrayOk?\n    textfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `textinfo`.'\n    }),\n    insidetextfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `textinfo` lying inside the pie.'\n    }),\n    outsidetextfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `textinfo` lying outside the pie.'\n    }),\n\n    // position and shape\n    domain: domainAttrs({name: 'pie', trace: true, editType: 'calc'}),\n\n    hole: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Sets the fraction of the radius to cut out of the pie.',\n            'Use this to make a donut chart.'\n        ].join(' ')\n    },\n\n    // ordering and direction\n    sort: {\n        valType: 'boolean',\n        role: 'style',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not the sectors are reordered',\n            'from largest to smallest.'\n        ].join(' ')\n    },\n    direction: {\n        /**\n         * there are two common conventions, both of which place the first\n         * (largest, if sorted) slice with its left edge at 12 o'clock but\n         * succeeding slices follow either cw or ccw from there.\n         *\n         * see http://visage.co/data-visualization-101-pie-charts/\n         */\n        valType: 'enumerated',\n        values: ['clockwise', 'counterclockwise'],\n        role: 'style',\n        dflt: 'counterclockwise',\n        editType: 'calc',\n        description: [\n            'Specifies the direction at which succeeding sectors follow',\n            'one another.'\n        ].join(' ')\n    },\n    rotation: {\n        valType: 'number',\n        role: 'style',\n        min: -360,\n        max: 360,\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Instead of the first slice starting at 12 o\\'clock,',\n            'rotate to some other angle.'\n        ].join(' ')\n    },\n\n    pull: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the fraction of larger radius to pull the sectors',\n            'out from the center. This can be a constant',\n            'to pull all slices apart from each other equally',\n            'or an array to highlight one or more slices.'\n        ].join(' ')\n    }\n};\n",null]}