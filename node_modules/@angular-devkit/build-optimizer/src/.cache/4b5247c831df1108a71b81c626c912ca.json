{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/table/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/table/plot.js","mtime":1529418310749},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar c = require('./constants');\nvar d3 = require('d3');\nvar gup = require('../../lib/gup');\nvar Drawing = require('../../components/drawing');\nvar svgUtil = require('../../lib/svg_text_utils');\nvar raiseToTop = require('../../lib').raiseToTop;\nvar cancelEeaseColumn = require('../../lib').cancelTransition;\nvar prepareData = require('./data_preparation_helper');\nvar splitData = require('./data_split_helpers');\nvar Color = require('../../components/color');\n\nmodule.exports = function plot(gd, wrappedTraceHolders) {\n\n    var table = gd._fullLayout._paper.selectAll('.' + c.cn.table)\n        .data(wrappedTraceHolders.map(function(wrappedTraceHolder) {\n            var traceHolder = gup.unwrap(wrappedTraceHolder);\n            var trace = traceHolder.trace;\n            return prepareData(gd, trace);\n        }), gup.keyFun);\n\n    table.exit().remove();\n\n    table.enter()\n        .append('g')\n        .classed(c.cn.table, true)\n        .attr('overflow', 'visible')\n        .style('box-sizing', 'content-box')\n        .style('position', 'absolute')\n        .style('left', 0)\n        .style('overflow', 'visible')\n        .style('shape-rendering', 'crispEdges')\n        .style('pointer-events', 'all');\n\n    table\n        .attr('width', function(d) {return d.width + d.size.l + d.size.r;})\n        .attr('height', function(d) {return d.height + d.size.t + d.size.b;})\n        .attr('transform', function(d) {\n            return 'translate(' + d.translateX + ',' + d.translateY + ')';\n        });\n\n    var tableControlView = table.selectAll('.' + c.cn.tableControlView)\n        .data(gup.repeat, gup.keyFun);\n\n    tableControlView.enter()\n        .append('g')\n        .classed(c.cn.tableControlView, true)\n        .style('box-sizing', 'content-box')\n        .on('mousemove', function(d) {tableControlView.filter(function(dd) {return d === dd;}).call(renderScrollbarKit, gd);})\n        .on('mousewheel', function(d) {\n            if(d.scrollbarState.wheeling) return;\n            d.scrollbarState.wheeling = true;\n            d3.event.stopPropagation();\n            d3.event.preventDefault();\n            makeDragRow(gd, tableControlView, null, d.scrollY + d3.event.deltaY)(d);\n            d.scrollbarState.wheeling = false;\n        })\n        .call(renderScrollbarKit, gd, true);\n\n    tableControlView\n        .attr('transform', function(d) {return 'translate(' + d.size.l + ' ' + d.size.t + ')';});\n\n    // scrollBackground merely ensures that mouse events are captured even on crazy fast scrollwheeling\n    // otherwise rendering glitches may occur\n    var scrollBackground = tableControlView.selectAll('.' + c.cn.scrollBackground)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollBackground.enter()\n        .append('rect')\n        .classed(c.cn.scrollBackground, true)\n        .attr('fill', 'none');\n\n    scrollBackground\n        .attr('width', function(d) {return d.width;})\n        .attr('height', function(d) {return d.height;});\n\n    tableControlView\n        .each(function(d) {Drawing.setClipUrl(d3.select(this), scrollAreaBottomClipKey(gd, d));});\n\n    var yColumn = tableControlView.selectAll('.' + c.cn.yColumn)\n        .data(function(vm) {return vm.columns;}, gup.keyFun);\n\n    yColumn.enter()\n        .append('g')\n        .classed(c.cn.yColumn, true);\n\n    yColumn.exit().remove();\n\n    yColumn\n        .attr('transform', function(d) {return 'translate(' + d.x + ' 0)';})\n        .call(d3.behavior.drag()\n            .origin(function(d) {\n                var movedColumn = d3.select(this);\n                easeColumn(movedColumn, d, -c.uplift);\n                raiseToTop(this);\n                d.calcdata.columnDragInProgress = true;\n                renderScrollbarKit(tableControlView.filter(function(dd) {return d.calcdata.key === dd.key;}), gd);\n                return d;\n            })\n            .on('drag', function(d) {\n                var movedColumn = d3.select(this);\n                var getter = function(dd) {return (d === dd ? d3.event.x : dd.x) + dd.columnWidth / 2;};\n                d.x = Math.max(-c.overdrag, Math.min(d.calcdata.width + c.overdrag - d.columnWidth, d3.event.x));\n\n                var sortableColumns = flatData(yColumn).filter(function(dd) {return dd.calcdata.key === d.calcdata.key;});\n                var newOrder = sortableColumns.sort(function(a, b) {return getter(a) - getter(b);});\n                newOrder.forEach(function(dd, i) {\n                    dd.xIndex = i;\n                    dd.x = d === dd ? dd.x : dd.xScale(dd);\n                });\n\n                yColumn.filter(function(dd) {return d !== dd;})\n                    .transition()\n                    .ease(c.transitionEase)\n                    .duration(c.transitionDuration)\n                    .attr('transform', function(d) {return 'translate(' + d.x + ' 0)';});\n                movedColumn\n                    .call(cancelEeaseColumn)\n                    .attr('transform', 'translate(' + d.x + ' -' + c.uplift + ' )');\n            })\n            .on('dragend', function(d) {\n                var movedColumn = d3.select(this);\n                var p = d.calcdata;\n                d.x = d.xScale(d);\n                d.calcdata.columnDragInProgress = false;\n                easeColumn(movedColumn, d, 0);\n                columnMoved(gd, p, p.columns.map(function(dd) {return dd.xIndex;}));\n            })\n        );\n\n    yColumn.each(function(d) {Drawing.setClipUrl(d3.select(this), columnBoundaryClipKey(gd, d));});\n\n    var columnBlock = yColumn.selectAll('.' + c.cn.columnBlock)\n        .data(splitData.splitToPanels, gup.keyFun);\n\n    columnBlock.enter()\n        .append('g')\n        .classed(c.cn.columnBlock, true)\n        .attr('id', function(d) {return d.key;});\n\n    columnBlock\n        .style('cursor', function(d) {\n            return d.dragHandle ? 'ew-resize' : d.calcdata.scrollbarState.barWiggleRoom ? 'ns-resize' : 'default';\n        });\n\n    var headerColumnBlock = columnBlock.filter(headerBlock);\n    var cellsColumnBlock = columnBlock.filter(cellsBlock);\n\n    cellsColumnBlock\n        .call(d3.behavior.drag()\n            .origin(function(d) {\n                d3.event.stopPropagation();\n                return d;\n            })\n            .on('drag', makeDragRow(gd, tableControlView, -1))\n            .on('dragend', function() {\n                // fixme emit plotly notification\n            })\n        );\n\n    // initial rendering: header is rendered first, as it may may have async LaTeX (show header first)\n    // but blocks are _entered_ the way they are due to painter's algo (header on top)\n    renderColumnCellTree(gd, tableControlView, headerColumnBlock, columnBlock);\n    renderColumnCellTree(gd, tableControlView, cellsColumnBlock, columnBlock);\n\n    var scrollAreaClip = tableControlView.selectAll('.' + c.cn.scrollAreaClip)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollAreaClip.enter()\n        .append('clipPath')\n        .classed(c.cn.scrollAreaClip, true)\n        .attr('id', function(d) {return scrollAreaBottomClipKey(gd, d);});\n\n    var scrollAreaClipRect = scrollAreaClip.selectAll('.' + c.cn.scrollAreaClipRect)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollAreaClipRect.enter()\n        .append('rect')\n        .classed(c.cn.scrollAreaClipRect, true)\n        .attr('x', -c.overdrag)\n        .attr('y', -c.uplift)\n        .attr('fill', 'none');\n\n    scrollAreaClipRect\n        .attr('width', function(d) {return d.width + 2 * c.overdrag;})\n        .attr('height', function(d) {return d.height + c.uplift;});\n\n    var columnBoundary = yColumn.selectAll('.' + c.cn.columnBoundary)\n        .data(gup.repeat, gup.keyFun);\n\n    columnBoundary.enter()\n        .append('g')\n        .classed(c.cn.columnBoundary, true);\n\n    var columnBoundaryClippath = yColumn.selectAll('.' + c.cn.columnBoundaryClippath)\n        .data(gup.repeat, gup.keyFun);\n\n    // SVG spec doesn't mandate wrapping into a <defs> and doesn't seem to cause a speed difference\n    columnBoundaryClippath.enter()\n        .append('clipPath')\n        .classed(c.cn.columnBoundaryClippath, true);\n\n    columnBoundaryClippath\n        .attr('id', function(d) {return columnBoundaryClipKey(gd, d);});\n\n    var columnBoundaryRect = columnBoundaryClippath.selectAll('.' + c.cn.columnBoundaryRect)\n        .data(gup.repeat, gup.keyFun);\n\n    columnBoundaryRect.enter()\n        .append('rect')\n        .classed(c.cn.columnBoundaryRect, true)\n        .attr('fill', 'none');\n\n    columnBoundaryRect\n        .attr('width', function(d) { return d.columnWidth + 2 * roundHalfWidth(d); })\n        .attr('height', function(d) {return d.calcdata.height + 2 * roundHalfWidth(d) + c.uplift;})\n        .attr('x', function(d) { return -roundHalfWidth(d); })\n        .attr('y', function(d) { return -roundHalfWidth(d); });\n\n    updateBlockYPosition(null, cellsColumnBlock, tableControlView);\n};\n\nfunction roundHalfWidth(d) {\n    return Math.ceil(d.calcdata.maxLineWidth / 2);\n}\n\nfunction scrollAreaBottomClipKey(gd, d) {\n    return 'clip' + gd._fullLayout._uid + '_scrollAreaBottomClip_' + d.key;\n}\n\nfunction columnBoundaryClipKey(gd, d) {\n    return 'clip' + gd._fullLayout._uid + '_columnBoundaryClippath_' + d.calcdata.key + '_' + d.specIndex;\n}\n\nfunction flatData(selection) {\n    return [].concat.apply([], selection.map(function(g) {return g;}))\n        .map(function(g) {return g.__data__;});\n}\n\nfunction renderScrollbarKit(tableControlView, gd, bypassVisibleBar) {\n\n    function calcTotalHeight(d) {\n        var blocks = d.rowBlocks;\n        return firstRowAnchor(blocks, blocks.length - 1) + (blocks.length ? rowsHeight(blocks[blocks.length - 1], Infinity) : 1);\n    }\n\n    var scrollbarKit = tableControlView.selectAll('.' + c.cn.scrollbarKit)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollbarKit.enter()\n        .append('g')\n        .classed(c.cn.scrollbarKit, true)\n        .style('shape-rendering', 'geometricPrecision');\n\n    scrollbarKit\n        .each(function(d) {\n            var s = d.scrollbarState;\n            s.totalHeight = calcTotalHeight(d);\n            s.scrollableAreaHeight = d.groupHeight - headerHeight(d);\n            s.currentlyVisibleHeight = Math.min(s.totalHeight, s.scrollableAreaHeight);\n            s.ratio = s.currentlyVisibleHeight / s.totalHeight;\n            s.barLength = Math.max(s.ratio * s.currentlyVisibleHeight, c.goldenRatio * c.scrollbarWidth);\n            s.barWiggleRoom = s.currentlyVisibleHeight - s.barLength;\n            s.wiggleRoom = Math.max(0, s.totalHeight - s.scrollableAreaHeight);\n            s.topY = s.barWiggleRoom === 0 ? 0 : (d.scrollY / s.wiggleRoom) * s.barWiggleRoom;\n            s.bottomY = s.topY + s.barLength;\n            s.dragMultiplier = s.wiggleRoom / s.barWiggleRoom;\n        })\n        .attr('transform', function(d) {\n            var xPosition = d.width + c.scrollbarWidth / 2 + c.scrollbarOffset;\n            return 'translate(' + xPosition + ' ' + headerHeight(d) + ')';\n        });\n\n    var scrollbar = scrollbarKit.selectAll('.' + c.cn.scrollbar)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollbar.enter()\n        .append('g')\n        .classed(c.cn.scrollbar, true);\n\n    var scrollbarSlider = scrollbar.selectAll('.' + c.cn.scrollbarSlider)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollbarSlider.enter()\n        .append('g')\n        .classed(c.cn.scrollbarSlider, true);\n\n    scrollbarSlider\n        .attr('transform', function(d) {\n            return 'translate(0 ' + (d.scrollbarState.topY || 0) + ')';\n        });\n\n    var scrollbarGlyph = scrollbarSlider.selectAll('.' + c.cn.scrollbarGlyph)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollbarGlyph.enter()\n        .append('line')\n        .classed(c.cn.scrollbarGlyph, true)\n        .attr('stroke', 'black')\n        .attr('stroke-width', c.scrollbarWidth)\n        .attr('stroke-linecap', 'round')\n        .attr('y1', c.scrollbarWidth / 2);\n\n    scrollbarGlyph\n        .attr('y2', function(d) {\n            return d.scrollbarState.barLength - c.scrollbarWidth / 2;\n        })\n        .attr('stroke-opacity', function(d) {\n            return d.columnDragInProgress || !d.scrollbarState.barWiggleRoom || bypassVisibleBar ? 0 : 0.4;\n        });\n\n    // cancel transition: possible pending (also, delayed) transition\n    scrollbarGlyph\n        .transition().delay(0).duration(0);\n\n    scrollbarGlyph\n        .transition().delay(c.scrollbarHideDelay).duration(c.scrollbarHideDuration)\n        .attr('stroke-opacity', 0);\n\n    var scrollbarCaptureZone = scrollbar.selectAll('.' + c.cn.scrollbarCaptureZone)\n        .data(gup.repeat, gup.keyFun);\n\n    scrollbarCaptureZone.enter()\n        .append('line')\n        .classed(c.cn.scrollbarCaptureZone, true)\n        .attr('stroke', 'white')\n        .attr('stroke-opacity', 0.01) // some browser might get rid of a 0 opacity element\n        .attr('stroke-width', c.scrollbarCaptureWidth)\n        .attr('stroke-linecap', 'butt')\n        .attr('y1', 0)\n        .on('mousedown', function(d) {\n            var y = d3.event.y;\n            var bbox = this.getBoundingClientRect();\n            var s = d.scrollbarState;\n            var pixelVal = y - bbox.top;\n            var inverseScale = d3.scale.linear().domain([0, s.scrollableAreaHeight]).range([0, s.totalHeight]).clamp(true);\n            if(!(s.topY <= pixelVal && pixelVal <= s.bottomY)) {\n                makeDragRow(gd, tableControlView, null, inverseScale(pixelVal - s.barLength / 2))(d);\n            }\n        })\n        .call(d3.behavior.drag()\n            .origin(function(d) {\n                d3.event.stopPropagation();\n                d.scrollbarState.scrollbarScrollInProgress = true;\n                return d;\n            })\n            .on('drag', makeDragRow(gd, tableControlView))\n            .on('dragend', function() {\n                // fixme emit Plotly event\n            })\n        );\n\n    scrollbarCaptureZone\n        .attr('y2', function(d) {\n            return d.scrollbarState.scrollableAreaHeight;\n        });\n}\n\nfunction renderColumnCellTree(gd, tableControlView, columnBlock, allColumnBlock) {\n    // fixme this perf hotspot\n    // this is performance critical code as scrolling calls it on every revolver switch\n    // it appears sufficiently fast but there are plenty of low-hanging fruits for performance optimization\n\n    var columnCells = renderColumnCells(columnBlock);\n\n    var columnCell = renderColumnCell(columnCells);\n\n    supplyStylingValues(columnCell);\n\n    var cellRect = renderCellRect(columnCell);\n\n    sizeAndStyleRect(cellRect);\n\n    var cellTextHolder = renderCellTextHolder(columnCell);\n\n    var cellText = renderCellText(cellTextHolder);\n\n    setFont(cellText);\n    populateCellText(cellText, tableControlView, allColumnBlock, gd);\n\n    // doing this at the end when text, and text stlying are set\n    setCellHeightAndPositionY(columnCell);\n}\n\nfunction renderColumnCells(columnBlock) {\n\n    var columnCells = columnBlock.selectAll('.' + c.cn.columnCells)\n        .data(gup.repeat, gup.keyFun);\n\n    columnCells.enter()\n        .append('g')\n        .classed(c.cn.columnCells, true);\n\n    columnCells.exit()\n        .remove();\n\n    return columnCells;\n}\n\nfunction renderColumnCell(columnCells) {\n\n    var columnCell = columnCells.selectAll('.' + c.cn.columnCell)\n        .data(splitData.splitToCells, function(d) {return d.keyWithinBlock;});\n\n    columnCell.enter()\n        .append('g')\n        .classed(c.cn.columnCell, true);\n\n    columnCell.exit()\n        .remove();\n\n    return columnCell;\n}\n\nfunction renderCellRect(columnCell) {\n\n    var cellRect = columnCell.selectAll('.' + c.cn.cellRect)\n        .data(gup.repeat, function(d) {return d.keyWithinBlock;});\n\n    cellRect.enter()\n        .append('rect')\n        .classed(c.cn.cellRect, true);\n\n    return cellRect;\n}\n\nfunction renderCellText(cellTextHolder) {\n\n    var cellText = cellTextHolder.selectAll('.' + c.cn.cellText)\n        .data(gup.repeat, function(d) {return d.keyWithinBlock;});\n\n    cellText.enter()\n        .append('text')\n        .classed(c.cn.cellText, true)\n        .style('cursor', function() {return 'auto';})\n        .on('mousedown', function() {d3.event.stopPropagation();});\n\n    return cellText;\n}\n\nfunction renderCellTextHolder(columnCell) {\n\n    var cellTextHolder = columnCell.selectAll('.' + c.cn.cellTextHolder)\n        .data(gup.repeat, function(d) {return d.keyWithinBlock;});\n\n    cellTextHolder.enter()\n        .append('g')\n        .classed(c.cn.cellTextHolder, true)\n        .style('shape-rendering', 'geometricPrecision');\n\n    return cellTextHolder;\n}\n\nfunction supplyStylingValues(columnCell) {\n    columnCell\n        .each(function(d, i) {\n            var spec = d.calcdata.cells.font;\n            var col = d.column.specIndex;\n            var font = {\n                size: gridPick(spec.size, col, i),\n                color: gridPick(spec.color, col, i),\n                family: gridPick(spec.family, col, i)\n            };\n            d.rowNumber = d.key;\n            d.align = gridPick(d.calcdata.cells.align, col, i);\n            d.cellBorderWidth = gridPick(d.calcdata.cells.line.width, col, i);\n            d.font = font;\n        });\n}\n\nfunction setFont(cellText) {\n    cellText\n        .each(function(d) {\n            Drawing.font(d3.select(this), d.font);\n        });\n}\n\nfunction sizeAndStyleRect(cellRect) {\n    cellRect\n        .attr('width', function(d) {return d.column.columnWidth;})\n        .attr('stroke-width', function(d) {return d.cellBorderWidth;})\n        .each(function(d) {\n            var atomicSelection = d3.select(this);\n            Color.stroke(atomicSelection, gridPick(d.calcdata.cells.line.color, d.column.specIndex, d.rowNumber));\n            Color.fill(atomicSelection, gridPick(d.calcdata.cells.fill.color, d.column.specIndex, d.rowNumber));\n        });\n}\n\nfunction populateCellText(cellText, tableControlView, allColumnBlock, gd) {\n    cellText\n        .text(function(d) {\n\n            var col = d.column.specIndex;\n            var row = d.rowNumber;\n\n            var userSuppliedContent = d.value;\n            var stringSupplied = (typeof userSuppliedContent === 'string');\n            var hasBreaks = stringSupplied && userSuppliedContent.match(/<br>/i);\n            var userBrokenText = !stringSupplied || hasBreaks;\n            d.mayHaveMarkup = stringSupplied && userSuppliedContent.match(/[<&>]/);\n\n            var latex = isLatex(userSuppliedContent);\n            d.latex = latex;\n\n            var prefix = latex ? '' : gridPick(d.calcdata.cells.prefix, col, row) || '';\n            var suffix = latex ? '' : gridPick(d.calcdata.cells.suffix, col, row) || '';\n            var format = latex ? null : gridPick(d.calcdata.cells.format, col, row) || null;\n\n            var prefixSuffixedText = prefix + (format ? d3.format(format)(d.value) : d.value) + suffix;\n\n            var hasWrapSplitCharacter;\n            d.wrappingNeeded = !d.wrapped && !userBrokenText && !latex && (hasWrapSplitCharacter = hasWrapCharacter(prefixSuffixedText));\n            d.cellHeightMayIncrease = hasBreaks || latex || d.mayHaveMarkup || (hasWrapSplitCharacter === void(0) ? hasWrapCharacter(prefixSuffixedText) : hasWrapSplitCharacter);\n            d.needsConvertToTspans = d.mayHaveMarkup || d.wrappingNeeded || d.latex;\n\n            var textToRender;\n            if(d.wrappingNeeded) {\n                var hrefPreservedText = c.wrapSplitCharacter === ' ' ? prefixSuffixedText.replace(/<a href=/ig, '<a_href=') : prefixSuffixedText;\n                var fragments = hrefPreservedText.split(c.wrapSplitCharacter);\n                var hrefRestoredFragments = c.wrapSplitCharacter === ' ' ? fragments.map(function(frag) {return frag.replace(/<a_href=/ig, '<a href=');}) : fragments;\n                d.fragments = hrefRestoredFragments.map(function(f) {return {text: f, width: null};});\n                d.fragments.push({fragment: c.wrapSpacer, width: null});\n                textToRender = hrefRestoredFragments.join(c.lineBreaker) + c.lineBreaker + c.wrapSpacer;\n            } else {\n                delete d.fragments;\n                textToRender = prefixSuffixedText;\n            }\n\n            return textToRender;\n        })\n        .attr('dy', function(d) {\n            return d.needsConvertToTspans ? 0 : '0.75em';\n        })\n        .each(function(d) {\n\n            var element = this;\n            var selection = d3.select(element);\n\n            // finalize what's in the DOM\n\n            var renderCallback = d.wrappingNeeded ? wrapTextMaker : updateYPositionMaker;\n            if(d.needsConvertToTspans) {\n                svgUtil.convertToTspans(selection, gd, renderCallback(allColumnBlock, element, tableControlView, gd, d));\n            } else {\n                d3.select(element.parentNode)\n                    // basic cell adjustment - compliance with `cellPad`\n                    .attr('transform', function(d) {return 'translate(' + xPosition(d) + ' ' + c.cellPad + ')';})\n                    .attr('text-anchor', function(d) {\n                        return ({\n                            left: 'start',\n                            center: 'middle',\n                            right: 'end'\n                        })[d.align];\n                    });\n            }\n        });\n}\n\nfunction isLatex(content) {\n    return typeof content === 'string' && content.match(c.latexCheck);\n}\n\nfunction hasWrapCharacter(text) {return text.indexOf(c.wrapSplitCharacter) !== -1;}\n\nfunction columnMoved(gd, calcdata, indices) {\n    var o = calcdata.gdColumnsOriginalOrder;\n    calcdata.gdColumns.sort(function(a, b) {\n        return indices[o.indexOf(a)] - indices[o.indexOf(b)];\n    });\n\n    calcdata.columnorder = indices;\n\n    gd.emit('plotly_restyle');\n}\n\nfunction gridPick(spec, col, row) {\n    if(Array.isArray(spec)) {\n        var column = spec[Math.min(col, spec.length - 1)];\n        if(Array.isArray(column)) {\n            return column[Math.min(row, column.length - 1)];\n        } else {\n            return column;\n        }\n    } else {\n        return spec;\n    }\n}\n\nfunction easeColumn(selection, d, y) {\n    selection\n        .transition()\n        .ease(c.releaseTransitionEase)\n        .duration(c.releaseTransitionDuration)\n        .attr('transform', 'translate(' + d.x + ' ' + y + ')');\n}\n\nfunction cellsBlock(d) {return d.type === 'cells';}\nfunction headerBlock(d) {return d.type === 'header';}\n\n/**\n * Revolver panel and cell contents layouting\n */\n\nfunction headerHeight(d) {\n    var headerBlocks = d.rowBlocks.length ? d.rowBlocks[0].auxiliaryBlocks : [];\n    return headerBlocks.reduce(function(p, n) {return p + rowsHeight(n, Infinity);}, 0);\n}\n\nfunction findPagesAndCacheHeights(blocks, scrollY, scrollHeight) {\n\n    var pages = [];\n    var pTop = 0;\n\n    for(var blockIndex = 0; blockIndex < blocks.length; blockIndex++) {\n\n        var block = blocks[blockIndex];\n        var blockRows = block.rows;\n        var rowsHeight = 0;\n        for(var i = 0; i < blockRows.length; i++) {\n            rowsHeight += blockRows[i].rowHeight;\n        }\n\n        // caching allRowsHeight on the block - it's safe as this function is always called from within the code part\n        // that handles increases to row heights\n        block.allRowsHeight = rowsHeight;\n\n        var pBottom = pTop + rowsHeight;\n        var windowTop = scrollY;\n        var windowBottom = windowTop + scrollHeight;\n        if(windowTop < pBottom && windowBottom > pTop) {\n            pages.push(blockIndex);\n        }\n        pTop += rowsHeight;\n\n        // consider this nice final optimization; put it in `for` condition - caveat, currently the\n        // block.allRowsHeight relies on being invalidated, so enabling this opt may not be safe\n        // if(pages.length > 1) break;\n    }\n\n    return pages;\n}\n\nfunction updateBlockYPosition(gd, cellsColumnBlock, tableControlView) {\n    var d = flatData(cellsColumnBlock)[0];\n    if(d === undefined) return;\n    var blocks = d.rowBlocks;\n    var calcdata = d.calcdata;\n\n    var bottom = firstRowAnchor(blocks, blocks.length);\n    var scrollHeight = d.calcdata.groupHeight - headerHeight(d);\n    var scrollY = calcdata.scrollY = Math.max(0, Math.min(bottom - scrollHeight, calcdata.scrollY));\n\n    var pages = findPagesAndCacheHeights(blocks, scrollY, scrollHeight);\n    if(pages.length === 1) {\n        if(pages[0] === blocks.length - 1) {\n            pages.unshift(pages[0] - 1);\n        } else {\n            pages.push(pages[0] + 1);\n        }\n    }\n\n    // make phased out page jump by 2 while leaving stationary page intact\n    if(pages[0] % 2) {\n        pages.reverse();\n    }\n\n    cellsColumnBlock\n        .each(function(d, i) {\n            // these values will also be needed when a block is translated again due to growing cell height\n            d.page = pages[i];\n            d.scrollY = scrollY;\n        });\n\n    cellsColumnBlock\n        .attr('transform', function(d) {\n            var yTranslate = firstRowAnchor(d.rowBlocks, d.page) - d.scrollY;\n            return 'translate(0 ' + yTranslate + ')';\n        });\n\n    // conditionally rerendering panel 0 and 1\n    if(gd) {\n        conditionalPanelRerender(gd, tableControlView, cellsColumnBlock, pages, d.prevPages, d, 0);\n        conditionalPanelRerender(gd, tableControlView, cellsColumnBlock, pages, d.prevPages, d, 1);\n        renderScrollbarKit(tableControlView, gd);\n    }\n}\n\nfunction makeDragRow(gd, allTableControlView, optionalMultiplier, optionalPosition) {\n    return function dragRow(eventD) {\n        // may come from whicever DOM event target: drag, wheel, bar... eventD corresponds to event target\n        var d = eventD.calcdata ? eventD.calcdata : eventD;\n        var tableControlView = allTableControlView.filter(function(dd) {return d.key === dd.key;});\n        var multiplier = optionalMultiplier || d.scrollbarState.dragMultiplier;\n        d.scrollY = optionalPosition === void(0) ? d.scrollY + multiplier * d3.event.dy : optionalPosition;\n        var cellsColumnBlock = tableControlView.selectAll('.' + c.cn.yColumn).selectAll('.' + c.cn.columnBlock).filter(cellsBlock);\n        updateBlockYPosition(gd, cellsColumnBlock, tableControlView);\n    };\n}\n\nfunction conditionalPanelRerender(gd, tableControlView, cellsColumnBlock, pages, prevPages, d, revolverIndex) {\n    var shouldComponentUpdate = pages[revolverIndex] !== prevPages[revolverIndex];\n    if(shouldComponentUpdate) {\n        clearTimeout(d.currentRepaint[revolverIndex]);\n        d.currentRepaint[revolverIndex] = setTimeout(function() {\n            // setTimeout might lag rendering but yields a smoother scroll, because fast scrolling makes\n            // some repaints invisible ie. wasteful (DOM work blocks the main thread)\n            var toRerender = cellsColumnBlock.filter(function(d, i) {return i === revolverIndex && pages[i] !== prevPages[i];});\n            renderColumnCellTree(gd, tableControlView, toRerender, cellsColumnBlock);\n            prevPages[revolverIndex] = pages[revolverIndex];\n        });\n    }\n}\n\nfunction wrapTextMaker(columnBlock, element, tableControlView) {\n    return function wrapText() {\n        var cellTextHolder = d3.select(element.parentNode);\n        cellTextHolder\n            .each(function(d) {\n                var fragments = d.fragments;\n                cellTextHolder.selectAll('tspan.line').each(function(dd, i) {\n                    fragments[i].width = this.getComputedTextLength();\n                });\n                // last element is only for measuring the separator character, so it's ignored:\n                var separatorLength = fragments[fragments.length - 1].width;\n                var rest = fragments.slice(0, -1);\n                var currentRow = [];\n                var currentAddition, currentAdditionLength;\n                var currentRowLength = 0;\n                var rowLengthLimit = d.column.columnWidth - 2 * c.cellPad;\n                d.value = '';\n                while(rest.length) {\n                    currentAddition = rest.shift();\n                    currentAdditionLength = currentAddition.width + separatorLength;\n                    if(currentRowLength + currentAdditionLength > rowLengthLimit) {\n                        d.value += currentRow.join(c.wrapSpacer) + c.lineBreaker;\n                        currentRow = [];\n                        currentRowLength = 0;\n                    }\n                    currentRow.push(currentAddition.text);\n                    currentRowLength += currentAdditionLength;\n                }\n                if(currentRowLength) {\n                    d.value += currentRow.join(c.wrapSpacer);\n                }\n                d.wrapped = true;\n            });\n\n        // the pre-wrapped text was rendered only for the text measurements\n        cellTextHolder.selectAll('tspan.line').remove();\n\n        // resupply text, now wrapped\n        populateCellText(cellTextHolder.select('.' + c.cn.cellText), tableControlView, columnBlock);\n        d3.select(element.parentNode.parentNode).call(setCellHeightAndPositionY);\n    };\n}\n\nfunction updateYPositionMaker(columnBlock, element, tableControlView, gd, d) {\n    return function updateYPosition() {\n        if(d.settledY) return;\n        var cellTextHolder = d3.select(element.parentNode);\n        var l = getBlock(d);\n        var rowIndex = d.key - l.firstRowIndex;\n\n        var declaredRowHeight = l.rows[rowIndex].rowHeight;\n\n        var requiredHeight = d.cellHeightMayIncrease ? element.parentNode.getBoundingClientRect().height + 2 * c.cellPad : declaredRowHeight;\n\n        var finalHeight = Math.max(requiredHeight, declaredRowHeight);\n        var increase = finalHeight - l.rows[rowIndex].rowHeight;\n\n        if(increase) {\n\n            // current row height increased\n            l.rows[rowIndex].rowHeight = finalHeight;\n\n            columnBlock\n                .selectAll('.' + c.cn.columnCell)\n                .call(setCellHeightAndPositionY);\n\n            updateBlockYPosition(null, columnBlock.filter(cellsBlock), 0);\n\n            // if d.column.type === 'header', then the scrollbar has to be pushed downward to the scrollable area\n            // if d.column.type === 'cells', it can still be relevant if total scrolling content height is less than the\n            //                               scrollable window, as increases to row heights may need scrollbar updates\n            renderScrollbarKit(tableControlView, gd, true);\n        }\n\n        cellTextHolder\n            .attr('transform', function() {\n                // this code block is only invoked for items where d.cellHeightMayIncrease is truthy\n                var element = this;\n                var columnCellElement = element.parentNode;\n                var box = columnCellElement.getBoundingClientRect();\n                var rectBox = d3.select(element.parentNode).select('.' + c.cn.cellRect).node().getBoundingClientRect();\n                var currentTransform = element.transform.baseVal.consolidate();\n                var yPosition = rectBox.top - box.top + (currentTransform ? currentTransform.matrix.f : c.cellPad);\n                return 'translate(' + xPosition(d, d3.select(element.parentNode).select('.' + c.cn.cellTextHolder).node().getBoundingClientRect().width) + ' ' + yPosition + ')';\n            });\n\n        d.settledY = true;\n    };\n}\n\nfunction xPosition(d, optionalWidth) {\n    switch(d.align) {\n        case 'left': return c.cellPad;\n        case 'right': return d.column.columnWidth - (optionalWidth || 0) - c.cellPad;\n        case 'center': return (d.column.columnWidth - (optionalWidth || 0)) / 2;\n        default: return c.cellPad;\n    }\n}\n\nfunction setCellHeightAndPositionY(columnCell) {\n    columnCell\n        .attr('transform', function(d) {\n            var headerHeight = d.rowBlocks[0].auxiliaryBlocks.reduce(function(p, n) {return p + rowsHeight(n, Infinity);}, 0);\n            var l = getBlock(d);\n            var rowAnchor = rowsHeight(l, d.key);\n            var yOffset = rowAnchor + headerHeight;\n            return 'translate(0 ' + yOffset + ')';\n        })\n        .selectAll('.' + c.cn.cellRect)\n        .attr('height', function(d) {return getRow(getBlock(d), d.key).rowHeight;});\n}\n\nfunction firstRowAnchor(blocks, page) {\n    var total = 0;\n    for(var i = page - 1; i >= 0; i--) {\n        total += allRowsHeight(blocks[i]);\n    }\n    return total;\n}\n\nfunction rowsHeight(rowBlock, key) {\n    var total = 0;\n    for(var i = 0; i < rowBlock.rows.length && rowBlock.rows[i].rowIndex < key; i++) {\n        total += rowBlock.rows[i].rowHeight;\n    }\n    return total;\n}\n\nfunction allRowsHeight(rowBlock) {\n    var cached = rowBlock.allRowsHeight;\n\n    if(cached !== void(0)) {\n        return cached;\n    }\n\n    var total = 0;\n    for(var i = 0; i < rowBlock.rows.length; i++) {\n        total += rowBlock.rows[i].rowHeight;\n    }\n    rowBlock.allRowsHeight = total;\n\n    return total;\n}\n\nfunction getBlock(d) {return d.rowBlocks[d.page];}\nfunction getRow(l, i) {return l.rows[i - l.firstRowIndex];}\n",null]}