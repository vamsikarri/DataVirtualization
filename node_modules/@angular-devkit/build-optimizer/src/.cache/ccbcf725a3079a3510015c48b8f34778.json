{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/table/data_split_helpers.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/table/data_split_helpers.js","mtime":1529418310748},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\n// pure functions, don't alter but passes on `gd` and parts of `trace` without deep copying\n\nexports.splitToPanels = function(d) {\n    var prevPages = [0, 0];\n    var headerPanel = extendFlat({}, d, {\n        key: 'header',\n        type: 'header',\n        page: 0,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: true,\n        values: d.calcdata.headerCells.values[d.specIndex],\n        rowBlocks: d.calcdata.headerRowBlocks,\n        calcdata: extendFlat({}, d.calcdata, {cells: d.calcdata.headerCells})\n    });\n    var revolverPanel1 = extendFlat({}, d, {\n        key: 'cells1',\n        type: 'cells',\n        page: 0,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: false,\n        values: d.calcdata.cells.values[d.specIndex],\n        rowBlocks: d.calcdata.rowBlocks\n    });\n    var revolverPanel2 = extendFlat({}, d, {\n        key: 'cells2',\n        type: 'cells',\n        page: 1,\n        prevPages: prevPages,\n        currentRepaint: [null, null],\n        dragHandle: false,\n        values: d.calcdata.cells.values[d.specIndex],\n        rowBlocks: d.calcdata.rowBlocks\n    });\n    // order due to SVG using painter's algo:\n    return [revolverPanel1, revolverPanel2, headerPanel];\n};\n\nexports.splitToCells = function(d) {\n    var fromTo = rowFromTo(d);\n    return (d.values || []).slice(fromTo[0], fromTo[1]).map(function(v, i) {\n        // By keeping identical key, a DOM node removal, creation and addition is spared, important when visible\n        // grid has a lot of elements (quadratic with xcol/ycol count).\n        // But it has to be busted when `svgUtil.convertToTspans` is used as it reshapes cell subtrees asynchronously,\n        // and by that time the user may have scrolled away, resulting in stale overwrites. The real solution will be\n        // to turn `svgUtil.convertToTspans` into a cancelable request, in which case no key busting is needed.\n        var buster = (typeof v === 'string') && v.match(/[<$&> ]/) ? '_keybuster_' + Math.random() : '';\n        return {\n            // keyWithinBlock: /*fromTo[0] + */i, // optimized future version - no busting\n            // keyWithinBlock: fromTo[0] + i, // initial always-unoptimized version - janky scrolling with 5+ columns\n            keyWithinBlock: i + buster, // current compromise: regular content is very fast; async content is possible\n            key: fromTo[0] + i,\n            column: d,\n            calcdata: d.calcdata,\n            page: d.page,\n            rowBlocks: d.rowBlocks,\n            value: v\n        };\n    });\n};\n\nfunction rowFromTo(d) {\n    var rowBlock = d.rowBlocks[d.page];\n    // fixme rowBlock truthiness check is due to ugly hack of placing 2nd panel as d.page = -1\n    var rowFrom = rowBlock ? rowBlock.rows[0].rowIndex : 0;\n    var rowTo = rowBlock ? rowFrom + rowBlock.rows.length : 0;\n    return [rowFrom, rowTo];\n}\n",null]}