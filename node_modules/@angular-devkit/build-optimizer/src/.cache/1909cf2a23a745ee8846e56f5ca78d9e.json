{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/heatmap/hover.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/heatmap/hover.js","mtime":1529418310717},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode, hoverLayer, contour) {\n    var cd0 = pointData.cd[0];\n    var trace = cd0.trace;\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var x = cd0.x;\n    var y = cd0.y;\n    var z = cd0.z;\n    var xc = cd0.xCenter;\n    var yc = cd0.yCenter;\n    var zmask = cd0.zmask;\n    var range = [trace.zmin, trace.zmax];\n    var zhoverformat = trace.zhoverformat;\n    var x2 = x;\n    var y2 = y;\n\n    var xl, yl, nx, ny;\n\n    if(pointData.index !== false) {\n        try {\n            nx = Math.round(pointData.index[1]);\n            ny = Math.round(pointData.index[0]);\n        }\n        catch(e) {\n            Lib.error('Error hovering on heatmap, ' +\n                'pointNumber must be [row,col], found:', pointData.index);\n            return;\n        }\n        if(nx < 0 || nx >= z[0].length || ny < 0 || ny > z.length) {\n            return;\n        }\n    }\n    else if(Fx.inbox(xval - x[0], xval - x[x.length - 1], 0) > 0 ||\n            Fx.inbox(yval - y[0], yval - y[y.length - 1], 0) > 0) {\n        return;\n    }\n    else {\n        if(contour) {\n            var i2;\n            x2 = [2 * x[0] - x[1]];\n\n            for(i2 = 1; i2 < x.length; i2++) {\n                x2.push((x[i2] + x[i2 - 1]) / 2);\n            }\n            x2.push([2 * x[x.length - 1] - x[x.length - 2]]);\n\n            y2 = [2 * y[0] - y[1]];\n            for(i2 = 1; i2 < y.length; i2++) {\n                y2.push((y[i2] + y[i2 - 1]) / 2);\n            }\n            y2.push([2 * y[y.length - 1] - y[y.length - 2]]);\n        }\n        nx = Math.max(0, Math.min(x2.length - 2, Lib.findBin(xval, x2)));\n        ny = Math.max(0, Math.min(y2.length - 2, Lib.findBin(yval, y2)));\n    }\n\n    var x0 = xa.c2p(x[nx]),\n        x1 = xa.c2p(x[nx + 1]),\n        y0 = ya.c2p(y[ny]),\n        y1 = ya.c2p(y[ny + 1]);\n\n    if(contour) {\n        x1 = x0;\n        xl = x[nx];\n        y1 = y0;\n        yl = y[ny];\n    }\n    else {\n        xl = xc ? xc[nx] : ((x[nx] + x[nx + 1]) / 2);\n        yl = yc ? yc[ny] : ((y[ny] + y[ny + 1]) / 2);\n        if(trace.zsmooth) {\n            x0 = x1 = xa.c2p(xl);\n            y0 = y1 = ya.c2p(yl);\n        }\n    }\n\n    var zVal = z[ny][nx];\n    if(zmask && !zmask[ny][nx]) zVal = undefined;\n\n    var text;\n    if(Array.isArray(cd0.text) && Array.isArray(cd0.text[ny])) {\n        text = cd0.text[ny][nx];\n    }\n\n    var zLabel;\n    // dummy axis for formatting the z value\n    var dummyAx = {\n        type: 'linear',\n        range: range,\n        hoverformat: zhoverformat,\n        _separators: xa._separators,\n        _numFormat: xa._numFormat\n    };\n    var zLabelObj = Axes.tickText(dummyAx, zVal, 'hover');\n    zLabel = zLabelObj.text;\n\n    return [Lib.extendFlat(pointData, {\n        index: [ny, nx],\n        // never let a 2D override 1D type as closest point\n        distance: pointData.maxHoverDistance,\n        spikeDistance: pointData.maxSpikeDistance,\n        x0: x0,\n        x1: x1,\n        y0: y0,\n        y1: y1,\n        xLabelVal: xl,\n        yLabelVal: yl,\n        zLabelVal: zVal,\n        zLabel: zLabel,\n        text: text\n    })];\n};\n",null]}