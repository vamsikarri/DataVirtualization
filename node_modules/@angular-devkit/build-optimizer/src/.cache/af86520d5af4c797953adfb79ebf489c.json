{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/rangeselector/draw.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/rangeselector/draw.js","mtime":1529418310621},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\n\nvar Registry = require('../../registry');\nvar Plots = require('../../plots/plots');\nvar Color = require('../color');\nvar Drawing = require('../drawing');\nvar Lib = require('../../lib');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar anchorUtils = require('../legend/anchor_utils');\n\nvar alignmentConstants = require('../../constants/alignment');\nvar LINE_SPACING = alignmentConstants.LINE_SPACING;\nvar FROM_TL = alignmentConstants.FROM_TL;\nvar FROM_BR = alignmentConstants.FROM_BR;\n\nvar constants = require('./constants');\nvar getUpdateObject = require('./get_update_object');\n\n\nmodule.exports = function draw(gd) {\n    var fullLayout = gd._fullLayout;\n\n    var selectors = fullLayout._infolayer.selectAll('.rangeselector')\n        .data(makeSelectorData(gd), selectorKeyFunc);\n\n    selectors.enter().append('g')\n        .classed('rangeselector', true);\n\n    selectors.exit().remove();\n\n    selectors.style({\n        cursor: 'pointer',\n        'pointer-events': 'all'\n    });\n\n    selectors.each(function(d) {\n        var selector = d3.select(this),\n            axisLayout = d,\n            selectorLayout = axisLayout.rangeselector;\n\n        var buttons = selector.selectAll('g.button')\n            .data(selectorLayout.buttons);\n\n        buttons.enter().append('g')\n            .classed('button', true);\n\n        buttons.exit().remove();\n\n        buttons.each(function(d) {\n            var button = d3.select(this);\n            var update = getUpdateObject(axisLayout, d);\n\n            d._isActive = isActive(axisLayout, d, update);\n\n            button.call(drawButtonRect, selectorLayout, d);\n            button.call(drawButtonText, selectorLayout, d, gd);\n\n            button.on('click', function() {\n                if(gd._dragged) return;\n\n                Registry.call('relayout', gd, update);\n            });\n\n            button.on('mouseover', function() {\n                d._isHovered = true;\n                button.call(drawButtonRect, selectorLayout, d);\n            });\n\n            button.on('mouseout', function() {\n                d._isHovered = false;\n                button.call(drawButtonRect, selectorLayout, d);\n            });\n        });\n\n        reposition(gd, buttons, selectorLayout, axisLayout._name, selector);\n    });\n\n};\n\nfunction makeSelectorData(gd) {\n    var axes = axisIds.list(gd, 'x', true);\n    var data = [];\n\n    for(var i = 0; i < axes.length; i++) {\n        var axis = axes[i];\n\n        if(axis.rangeselector && axis.rangeselector.visible) {\n            data.push(axis);\n        }\n    }\n\n    return data;\n}\n\nfunction selectorKeyFunc(d) {\n    return d._id;\n}\n\nfunction isActive(axisLayout, opts, update) {\n    if(opts.step === 'all') {\n        return axisLayout.autorange === true;\n    }\n    else {\n        var keys = Object.keys(update);\n\n        return (\n            axisLayout.range[0] === update[keys[0]] &&\n            axisLayout.range[1] === update[keys[1]]\n        );\n    }\n}\n\nfunction drawButtonRect(button, selectorLayout, d) {\n    var rect = Lib.ensureSingle(button, 'rect', 'selector-rect', function(s) {\n        s.attr('shape-rendering', 'crispEdges');\n    });\n\n    rect.attr({\n        'rx': constants.rx,\n        'ry': constants.ry\n    });\n\n    rect.call(Color.stroke, selectorLayout.bordercolor)\n        .call(Color.fill, getFillColor(selectorLayout, d))\n        .style('stroke-width', selectorLayout.borderwidth + 'px');\n}\n\nfunction getFillColor(selectorLayout, d) {\n    return (d._isActive || d._isHovered) ?\n        selectorLayout.activecolor :\n        selectorLayout.bgcolor;\n}\n\nfunction drawButtonText(button, selectorLayout, d, gd) {\n    function textLayout(s) {\n        svgTextUtils.convertToTspans(s, gd);\n    }\n\n    var text = Lib.ensureSingle(button, 'text', 'selector-text', function(s) {\n        s.classed('user-select-none', true)\n            .attr('text-anchor', 'middle');\n    });\n\n    text.call(Drawing.font, selectorLayout.font)\n        .text(getLabel(d))\n        .call(textLayout);\n}\n\nfunction getLabel(opts) {\n    if(opts.label) return opts.label;\n\n    if(opts.step === 'all') return 'all';\n\n    return opts.count + opts.step.charAt(0);\n}\n\nfunction reposition(gd, buttons, opts, axName, selector) {\n    var width = 0;\n    var height = 0;\n\n    var borderWidth = opts.borderwidth;\n\n    buttons.each(function() {\n        var button = d3.select(this);\n        var text = button.select('.selector-text');\n\n        var tHeight = opts.font.size * LINE_SPACING;\n        var hEff = Math.max(tHeight * svgTextUtils.lineCount(text), 16) + 3;\n\n        height = Math.max(height, hEff);\n    });\n\n    buttons.each(function() {\n        var button = d3.select(this);\n        var rect = button.select('.selector-rect');\n        var text = button.select('.selector-text');\n\n        var tWidth = text.node() && Drawing.bBox(text.node()).width;\n        var tHeight = opts.font.size * LINE_SPACING;\n        var tLines = svgTextUtils.lineCount(text);\n\n        var wEff = Math.max(tWidth + 10, constants.minButtonWidth);\n\n        // TODO add MathJax support\n\n        // TODO add buttongap attribute\n\n        button.attr('transform', 'translate(' +\n            (borderWidth + width) + ',' + borderWidth +\n        ')');\n\n        rect.attr({\n            x: 0,\n            y: 0,\n            width: wEff,\n            height: height\n        });\n\n        svgTextUtils.positionText(text, wEff / 2,\n            height / 2 - ((tLines - 1) * tHeight / 2) + 3);\n\n        width += wEff + 5;\n    });\n\n    var graphSize = gd._fullLayout._size;\n    var lx = graphSize.l + graphSize.w * opts.x;\n    var ly = graphSize.t + graphSize.h * (1 - opts.y);\n\n    var xanchor = 'left';\n    if(anchorUtils.isRightAnchor(opts)) {\n        lx -= width;\n        xanchor = 'right';\n    }\n    if(anchorUtils.isCenterAnchor(opts)) {\n        lx -= width / 2;\n        xanchor = 'center';\n    }\n\n    var yanchor = 'top';\n    if(anchorUtils.isBottomAnchor(opts)) {\n        ly -= height;\n        yanchor = 'bottom';\n    }\n    if(anchorUtils.isMiddleAnchor(opts)) {\n        ly -= height / 2;\n        yanchor = 'middle';\n    }\n\n    width = Math.ceil(width);\n    height = Math.ceil(height);\n    lx = Math.round(lx);\n    ly = Math.round(ly);\n\n    Plots.autoMargin(gd, axName + '-range-selector', {\n        x: opts.x,\n        y: opts.y,\n        l: width * FROM_TL[xanchor],\n        r: width * FROM_BR[xanchor],\n        b: height * FROM_BR[yanchor],\n        t: height * FROM_TL[yanchor]\n    });\n\n    selector.attr('transform', 'translate(' + lx + ',' + ly + ')');\n}\n",null]}