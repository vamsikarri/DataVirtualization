{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/attributes.js","mtime":1529418310732},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar plotAttrs = require('../../plots/attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar fxAttrs = require('../../components/fx/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nmodule.exports = overrideAll({\n    hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n        flags: ['label', 'text', 'value', 'percent', 'name'],\n    }),\n    hoverlabel: fxAttrs.hoverlabel, // needs editType override\n\n    domain: domainAttrs({name: 'sankey', trace: true}),\n\n    orientation: {\n        valType: 'enumerated',\n        values: ['v', 'h'],\n        dflt: 'h',\n        role: 'style',\n        description: 'Sets the orientation of the Sankey diagram.'\n    },\n\n    valueformat: {\n        valType: 'string',\n        dflt: '.3s',\n        role: 'style',\n        description: [\n            'Sets the value formatting rule using d3 formatting mini-language',\n            'which is similar to those of Python. See',\n            'https://github.com/d3/d3-format/blob/master/README.md#locale_format'\n        ].join(' ')\n    },\n\n    valuesuffix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        description: [\n            'Adds a unit to follow the value in the hover tooltip. Add a space if a separation',\n            'is necessary from the value.'\n        ].join(' ')\n    },\n\n    arrangement: {\n        valType: 'enumerated',\n        values: ['snap', 'perpendicular', 'freeform', 'fixed'],\n        dflt: 'snap',\n        role: 'style',\n        description: [\n            'If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to',\n            'preserve space between nodes specified via `nodepad`.',\n            'If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow.',\n            'If value is `freeform`, the nodes can freely move on the plane.',\n            'If value is `fixed`, the nodes are stationary.'\n        ].join(' ')\n    },\n\n    textfont: fontAttrs({\n        description: 'Sets the font for node labels'\n    }),\n\n    node: {\n        label: {\n            valType: 'data_array',\n            dflt: [],\n            role: 'info',\n            description: 'The shown name of the node.'\n        },\n        color: {\n            valType: 'color',\n            role: 'style',\n            arrayOk: true,\n            description: [\n                'Sets the `node` color. It can be a single value, or an array for specifying color for each `node`.',\n                'If `node.color` is omitted, then the default `Plotly` color palette will be cycled through',\n                'to have a variety of colors. These defaults are not fully opaque, to allow some visibility of',\n                'what is beneath the node.'\n            ].join(' ')\n        },\n        line: {\n            color: {\n                valType: 'color',\n                role: 'style',\n                dflt: colorAttrs.defaultLine,\n                arrayOk: true,\n                description: [\n                    'Sets the color of the `line` around each `node`.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                role: 'style',\n                min: 0,\n                dflt: 0.5,\n                arrayOk: true,\n                description: [\n                    'Sets the width (in px) of the `line` around each `node`.'\n                ].join(' ')\n            }\n        },\n        pad: {\n            valType: 'number',\n            arrayOk: false,\n            min: 0,\n            dflt: 20,\n            role: 'style',\n            description: 'Sets the padding (in px) between the `nodes`.'\n        },\n        thickness: {\n            valType: 'number',\n            arrayOk: false,\n            min: 1,\n            dflt: 20,\n            role: 'style',\n            description: 'Sets the thickness (in px) of the `nodes`.'\n        },\n        description: 'The nodes of the Sankey plot.'\n    },\n\n    link: {\n        label: {\n            valType: 'data_array',\n            dflt: [],\n            role: 'info',\n            description: 'The shown name of the link.'\n        },\n        color: {\n            valType: 'color',\n            role: 'style',\n            arrayOk: true,\n            description: [\n                'Sets the `link` color. It can be a single value, or an array for specifying color for each `link`.',\n                'If `link.color` is omitted, then by default, a translucent grey link will be used.'\n            ].join(' ')\n        },\n        line: {\n            color: {\n                valType: 'color',\n                role: 'style',\n                dflt: colorAttrs.defaultLine,\n                arrayOk: true,\n                description: [\n                    'Sets the color of the `line` around each `link`.'\n                ].join(' ')\n            },\n            width: {\n                valType: 'number',\n                role: 'style',\n                min: 0,\n                dflt: 0,\n                arrayOk: true,\n                description: [\n                    'Sets the width (in px) of the `line` around each `link`.'\n                ].join(' ')\n            }\n        },\n        source: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: 'An integer number `[0..nodes.length - 1]` that represents the source node.'\n        },\n        target: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: 'An integer number `[0..nodes.length - 1]` that represents the target node.'\n        },\n        value: {\n            valType: 'data_array',\n            dflt: [],\n            role: 'info',\n            description: 'A numeric value representing the flow volume value.'\n        },\n        description: 'The links of the Sankey plot.'\n    }\n}, 'calc', 'nested');\n",null]}