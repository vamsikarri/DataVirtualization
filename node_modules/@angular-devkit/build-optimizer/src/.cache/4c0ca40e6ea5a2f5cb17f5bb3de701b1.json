{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/sliders/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/sliders/attributes.js","mtime":1529418310663},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar padAttrs = require('../../plots/pad_attributes');\nvar extendDeepAll = require('../../lib/extend').extendDeepAll;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar animationAttrs = require('../../plots/animation_attributes');\nvar constants = require('./constants');\n\nvar stepsAttrs = {\n    _isLinkedToArray: 'step',\n\n    method: {\n        valType: 'enumerated',\n        values: ['restyle', 'relayout', 'animate', 'update', 'skip'],\n        dflt: 'restyle',\n        role: 'info',\n        description: [\n            'Sets the Plotly method to be called when the slider value is changed.',\n            'If the `skip` method is used, the API slider will function as normal',\n            'but will perform no API calls and will not bind automatically to state',\n            'updates. This may be used to create a component interface and attach to',\n            'slider events manually via JavaScript.'\n        ].join(' ')\n    },\n    args: {\n        valType: 'info_array',\n        role: 'info',\n        freeLength: true,\n        items: [\n            { valType: 'any' },\n            { valType: 'any' },\n            { valType: 'any' }\n        ],\n        description: [\n            'Sets the arguments values to be passed to the Plotly',\n            'method set in `method` on slide.'\n        ].join(' ')\n    },\n    label: {\n        valType: 'string',\n        role: 'info',\n        description: 'Sets the text label to appear on the slider'\n    },\n    value: {\n        valType: 'string',\n        role: 'info',\n        description: [\n            'Sets the value of the slider step, used to refer to the step programatically.',\n            'Defaults to the slider label if not provided.'\n        ].join(' ')\n    },\n    execute: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: [\n            'When true, the API method is executed. When false, all other behaviors are the same',\n            'and command execution is skipped. This may be useful when hooking into, for example,',\n            'the `plotly_sliderchange` method and executing the API command manually without losing',\n            'the benefit of the slider automatically binding to the state of the plot through the',\n            'specification of `method` and `args`.'\n        ].join(' ')\n    }\n};\n\nmodule.exports = overrideAll({\n    _isLinkedToArray: 'slider',\n\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: [\n            'Determines whether or not the slider is visible.'\n        ].join(' ')\n    },\n\n    active: {\n        valType: 'number',\n        role: 'info',\n        min: 0,\n        dflt: 0,\n        description: [\n            'Determines which button (by index starting from 0) is',\n            'considered active.'\n        ].join(' ')\n    },\n\n    steps: stepsAttrs,\n\n    lenmode: {\n        valType: 'enumerated',\n        values: ['fraction', 'pixels'],\n        role: 'info',\n        dflt: 'fraction',\n        description: [\n            'Determines whether this slider length',\n            'is set in units of plot *fraction* or in *pixels.',\n            'Use `len` to set the value.'\n        ].join(' ')\n    },\n    len: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        description: [\n            'Sets the length of the slider',\n            'This measure excludes the padding of both ends.',\n            'That is, the slider\\'s length is this length minus the',\n            'padding on both ends.'\n        ].join(' ')\n    },\n    x: {\n        valType: 'number',\n        min: -2,\n        max: 3,\n        dflt: 0,\n        role: 'style',\n        description: 'Sets the x position (in normalized coordinates) of the slider.'\n    },\n    pad: extendDeepAll({}, padAttrs, {\n        description: 'Set the padding of the slider component along each side.'\n    }, {t: {dflt: 20}}),\n    xanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'left', 'center', 'right'],\n        dflt: 'left',\n        role: 'info',\n        description: [\n            'Sets the slider\\'s horizontal position anchor.',\n            'This anchor binds the `x` position to the *left*, *center*',\n            'or *right* of the range selector.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'number',\n        min: -2,\n        max: 3,\n        dflt: 0,\n        role: 'style',\n        description: 'Sets the y position (in normalized coordinates) of the slider.'\n    },\n    yanchor: {\n        valType: 'enumerated',\n        values: ['auto', 'top', 'middle', 'bottom'],\n        dflt: 'top',\n        role: 'info',\n        description: [\n            'Sets the slider\\'s vertical position anchor',\n            'This anchor binds the `y` position to the *top*, *middle*',\n            'or *bottom* of the range selector.'\n        ].join(' ')\n    },\n\n    transition: {\n        duration: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            dflt: 150,\n            description: 'Sets the duration of the slider transition'\n        },\n        easing: {\n            valType: 'enumerated',\n            values: animationAttrs.transition.easing.values,\n            role: 'info',\n            dflt: 'cubic-in-out',\n            description: 'Sets the easing function of the slider transition'\n        }\n    },\n\n    currentvalue: {\n        visible: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: true,\n            description: [\n                'Shows the currently-selected value above the slider.'\n            ].join(' ')\n        },\n\n        xanchor: {\n            valType: 'enumerated',\n            values: ['left', 'center', 'right'],\n            dflt: 'left',\n            role: 'info',\n            description: [\n                'The alignment of the value readout relative to the length of the slider.'\n            ].join(' ')\n        },\n\n        offset: {\n            valType: 'number',\n            dflt: 10,\n            role: 'info',\n            description: [\n                'The amount of space, in pixels, between the current value label',\n                'and the slider.'\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            role: 'info',\n            description: 'When currentvalue.visible is true, this sets the prefix of the label.'\n        },\n\n        suffix: {\n            valType: 'string',\n            role: 'info',\n            description: 'When currentvalue.visible is true, this sets the suffix of the label.'\n        },\n\n        font: fontAttrs({\n            description: 'Sets the font of the current value label text.'\n        })\n    },\n\n    font: fontAttrs({\n        description: 'Sets the font of the slider step labels.'\n    }),\n\n    activebgcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: constants.gripBgActiveColor,\n        description: [\n            'Sets the background color of the slider grip',\n            'while dragging.'\n        ].join(' ')\n    },\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: constants.railBgColor,\n        description: 'Sets the background color of the slider.'\n    },\n    bordercolor: {\n        valType: 'color',\n        dflt: constants.railBorderColor,\n        role: 'style',\n        description: 'Sets the color of the border enclosing the slider.'\n    },\n    borderwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: constants.railBorderWidth,\n        role: 'style',\n        description: 'Sets the width (in px) of the border enclosing the slider.'\n    },\n    ticklen: {\n        valType: 'number',\n        min: 0,\n        dflt: constants.tickLength,\n        role: 'style',\n        description: 'Sets the length in pixels of step tick marks'\n    },\n    tickcolor: {\n        valType: 'color',\n        dflt: constants.tickColor,\n        role: 'style',\n        description: 'Sets the color of the border enclosing the slider.'\n    },\n    tickwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        description: 'Sets the tick width (in px).'\n    },\n    minorticklen: {\n        valType: 'number',\n        min: 0,\n        dflt: constants.minorTickLength,\n        role: 'style',\n        description: 'Sets the length in pixels of minor step tick marks'\n    }\n}, 'arraydraw', 'from-root');\n",null]}