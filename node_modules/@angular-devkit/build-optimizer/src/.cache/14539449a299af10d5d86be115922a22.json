{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/cone/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/cone/attributes.js","mtime":1529418310710},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttrs = require('../../components/colorscale/color_attributes');\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar mesh3dAttrs = require('../mesh3d/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n    x: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the x coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the y coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the z coordinates of the vector field',\n            'and of the displayed cones.'\n        ].join(' ')\n    },\n\n    u: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the x components of the vector field.'\n    },\n    v: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the y components of the vector field.'\n    },\n    w: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the z components of the vector field.'\n    },\n\n    // TODO add way to specify cone positions independently of the vector field\n    // provided, similar to MATLAB's coneplot Cx/Cy/Cz meshgrids,\n    // see https://www.mathworks.com/help/matlab/ref/coneplot.html\n    //\n    // Alternatively, if our goal is only to 'fill in gaps' in the vector data,\n    // we could try to extend the heatmap 'connectgaps' algorithm to 3D.\n    // From AJ: this particular algorithm which amounts to a Poisson equation,\n    // both for interpolation and extrapolation - is the right one to use for\n    // cones too.  It makes a field with zero divergence, which is a good\n    // baseline assumption for vector fields.\n    //\n    // cones: {\n    //     // potential attributes to add:\n    //     //\n    //     // - meshmode: 'cartesian-product', 'pts', 'grid'\n    //     //\n    //     // under `meshmode: 'grid'`\n    //     // - (x|y|z)grid.start\n    //     // - (x|y|z)grid.end\n    //     // - (x|y|z)grid.size\n    //\n    //     x: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the x coordinates of the cones to be displayed.'\n    //     },\n    //     y: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the y coordinates of the cones to be displayed.'\n    //     },\n    //     z: {\n    //         valType: 'data_array',\n    //         editType: 'calc',\n    //         description: 'Sets the z coordinates of the cones to be displayed.'\n    //     },\n    //\n    //     editType: 'calc',\n    //     description: [\n    //         'By setting `cones.x`, `cones.y` and `cones.z` to 1D arrays,',\n    //         'plotly creates a mesh using the cartesian product of those 3 arrays.'\n    //     ].join(' ')\n    // },\n\n    sizemode: {\n        valType: 'enumerated',\n        values: ['scaled', 'absolute'],\n        role: 'info',\n        editType: 'calc',\n        dflt: 'scaled',\n        description: [\n            'Sets the mode by which the cones are sized.',\n            'If *scaled*, `sizeref` scales such that the reference cone size',\n            'for the maximum vector magnitude is 1.',\n            'If *absolute*, `sizeref` scales such that the reference cone size',\n            'for vector magnitude 1 is one grid unit.'\n        ].join(' ')\n    },\n    sizeref: {\n        valType: 'number',\n        role: 'info',\n        editType: 'calc',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the cone size reference value.'\n    },\n\n    anchor: {\n        valType: 'enumerated',\n        role: 'info',\n        editType: 'calc',\n        values: ['tip', 'tail', 'cm', 'center'],\n        dflt: 'cm',\n        description: [\n            'Sets the cones\\' anchor with respect to their x/y/z positions.',\n            'Note that *cm* denote the cone\\'s center of mass which corresponds to',\n            '1/4 from the tail to tip.'\n        ].join(' ')\n    },\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the text elements associated with the cones.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    }\n};\n\nextendFlat(attrs, colorAttrs('', 'calc', true), {\n    showscale: colorscaleAttrs.showscale,\n    colorbar: colorbarAttrs\n});\ndelete attrs.color;\n\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\n\nfromMesh3d.forEach(function(k) {\n    attrs[k] = mesh3dAttrs[k];\n});\n\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc',\n    flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'text', 'name'],\n    dflt: 'x+y+z+norm+text+name'\n});\n\nmodule.exports = attrs;\n",null]}