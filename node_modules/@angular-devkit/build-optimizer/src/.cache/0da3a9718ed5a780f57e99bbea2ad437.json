{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/color_attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/color_attributes.js","mtime":1529418310608},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorScaleAttributes = require('./attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar palettes = require('./scales.js');\n\n/*\n * Make all the attributes for a regular colorscale:\n *  color, colorscale, cauto, cmin, cmax, autocolorscale, reversescale\n *\n * @param {string} context:\n *   the container this is in (*marker*, *marker.line* etc)\n * @param {optional string} editTypeOverride:\n *   most of these attributes already require a recalc, but the ones that do not\n *   have editType *style* or *plot* unless you override (presumably with *calc*)\n * @param {optional bool} autoColorDflt:\n *   normally autocolorscale.dflt is `true`, but pass `false` to override\n *\n * @return {object} the finished attributes object\n */\nmodule.exports = function makeColorScaleAttributes(context, editTypeOverride, autoColorDflt) {\n    var contextHead = context ? (context + '.') : '';\n\n    return {\n        color: {\n            valType: 'color',\n            arrayOk: true,\n            role: 'style',\n            editType: editTypeOverride || 'style',\n            description: [\n                'Sets the', context, 'color. It accepts either a specific color',\n                'or an array of numbers that are mapped to the colorscale',\n                'relative to the max and min values of the array or relative to',\n                '`cmin` and `cmax` if set.'\n            ].join(' ')\n        },\n        colorscale: extendFlat({}, colorScaleAttributes.colorscale, {\n            description: [\n                'Sets the colorscale and only has an effect',\n                'if `' + contextHead + 'color` is set to a numerical array.',\n                'The colorscale must be an array containing',\n                'arrays mapping a normalized value to an',\n                'rgb, rgba, hex, hsl, hsv, or named color string.',\n                'At minimum, a mapping for the lowest (0) and highest (1)',\n                'values are required. For example,',\n                '`[[0, \\'rgb(0,0,255)\\', [1, \\'rgb(255,0,0)\\']]`.',\n                'To control the bounds of the colorscale in color space,',\n                'use `' + contextHead + 'cmin` and `' + contextHead + 'cmax`.',\n                'Alternatively, `colorscale` may be a palette name string',\n                'of the following list:',\n                Object.keys(palettes).join(', ')\n            ].join(' ')\n        }),\n        cauto: extendFlat({}, colorScaleAttributes.zauto, {\n            impliedEdits: {cmin: undefined, cmax: undefined},\n            description: [\n                'Has an effect only if `' + contextHead + 'color` is set to a numerical array',\n                'and `cmin`, `cmax` are set by the user. In this case,',\n                'it controls whether the range of colors in `colorscale` is mapped to',\n                'the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax`',\n                'values (`cauto: false`).',\n                'Defaults to `false` when `cmin`, `cmax` are set by the user.'\n            ].join(' ')\n        }),\n        cmax: extendFlat({}, colorScaleAttributes.zmax, {\n            editType: editTypeOverride || colorScaleAttributes.zmax.editType,\n            impliedEdits: {cauto: false},\n            description: [\n                'Has an effect only if `' + contextHead + 'color` is set to a numerical array.',\n                'Sets the upper bound of the color domain.',\n                'Value should be associated to the `' + contextHead + 'color` array index,',\n                'and if set, `' + contextHead + 'cmin` must be set as well.'\n            ].join(' ')\n        }),\n        cmin: extendFlat({}, colorScaleAttributes.zmin, {\n            editType: editTypeOverride || colorScaleAttributes.zmin.editType,\n            impliedEdits: {cauto: false},\n            description: [\n                'Has an effect only if `' + contextHead + 'color` is set to a numerical array.',\n                'Sets the lower bound of the color domain.',\n                'Value should be associated to the `' + contextHead + 'color` array index,',\n                'and if set, `' + contextHead + 'cmax` must be set as well.'\n            ].join(' ')\n        }),\n        autocolorscale: extendFlat({}, colorScaleAttributes.autocolorscale, {\n            description: [\n                'Has an effect only if `' + contextHead + 'color` is set to a numerical array.',\n                'Determines whether the colorscale is a default palette (`autocolorscale: true`)',\n                'or the palette determined by `' + contextHead + 'colorscale`.',\n                'In case `colorscale` is unspecified or `autocolorscale` is true, the default ',\n                'palette will be chosen according to whether numbers in the `color` array are',\n                'all positive, all negative or mixed.'\n            ].join(' '),\n            dflt: autoColorDflt === false ? autoColorDflt : colorScaleAttributes.autocolorscale.dflt\n        }),\n        reversescale: extendFlat({}, colorScaleAttributes.reversescale, {\n            description: [\n                'Has an effect only if `' + contextHead + 'color` is set to a numerical array.',\n                'Reverses the color mapping if true (`cmin` will correspond to the last color',\n                'in the array and `cmax` will correspond to the first color).'\n            ].join(' ')\n        })\n    };\n};\n",null]}