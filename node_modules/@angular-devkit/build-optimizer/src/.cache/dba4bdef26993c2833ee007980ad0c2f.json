{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/plot.js","mtime":1529418308660},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createGLPlot2D\r\n\r\nvar createPick = require('gl-select-static')\r\n\r\nvar createGrid = require('./lib/grid')\r\nvar createText = require('./lib/text')\r\nvar createLine = require('./lib/line')\r\nvar createBox  = require('./lib/box')\r\n\r\nfunction GLPlot2D(gl, pickBuffer) {\r\n  this.gl               = gl\r\n  this.pickBuffer       = pickBuffer\r\n\r\n  this.screenBox        = [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]\r\n  this.viewBox          = [0, 0, 0, 0]\r\n  this.dataBox          = [-10, -10, 10, 10]\r\n\r\n  this.gridLineEnable   = [true,true]\r\n  this.gridLineWidth    = [1,1]\r\n  this.gridLineColor    = [[0,0,0,1],\r\n                           [0,0,0,1]]\r\n\r\n  this.pixelRatio       = 1\r\n\r\n  this.tickMarkLength   = [0,0,0,0]\r\n  this.tickMarkWidth    = [0,0,0,0]\r\n  this.tickMarkColor    = [[0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1]]\r\n\r\n  this.tickPad          = [15,15,15,15]\r\n  this.tickAngle        = [0,0,0,0]\r\n  this.tickEnable       = [true,true,true,true]\r\n  this.tickColor        = [[0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1]]\r\n\r\n  this.labelPad         = [15,15,15,15]\r\n  this.labelAngle       = [0,Math.PI/2,0,3.0*Math.PI/2]\r\n  this.labelEnable      = [true,true,true,true]\r\n  this.labelColor       = [[0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1]]\r\n\r\n  this.titleCenter      = [0,0]\r\n  this.titleEnable      = true\r\n  this.titleAngle       = 0\r\n  this.titleColor       = [0,0,0,1]\r\n\r\n  this.borderColor      = [0,0,0,0]\r\n  this.backgroundColor  = [0,0,0,0]\r\n\r\n  this.zeroLineEnable   = [true, true]\r\n  this.zeroLineWidth    = [4, 4]\r\n  this.zeroLineColor    = [[0, 0, 0, 1],[0, 0, 0, 1]]\r\n\r\n  this.borderLineEnable = [true,true,true,true]\r\n  this.borderLineWidth  = [2,2,2,2]\r\n  this.borderLineColor  = [[0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1]]\r\n\r\n  //Drawing parameters\r\n  this.grid             = null\r\n  this.text             = null\r\n  this.line             = null\r\n  this.box              = null\r\n  this.objects          = []\r\n  this.overlays         = []\r\n\r\n  this._tickBounds      = [Infinity, Infinity, -Infinity, -Infinity]\r\n\r\n  this.static = false\r\n\r\n  this.dirty        = false\r\n  this.pickDirty    = false\r\n  this.pickDelay    = 120\r\n  this.pickRadius   = 10\r\n  this._pickTimeout = null\r\n  this._drawPick    = this.drawPick.bind(this)\r\n\r\n  this._depthCounter = 0\r\n}\r\n\r\nvar proto = GLPlot2D.prototype\r\n\r\nproto.setDirty = function() {\r\n  this.dirty = this.pickDirty = true\r\n}\r\n\r\nproto.setOverlayDirty = function() {\r\n  this.dirty = true\r\n}\r\n\r\nproto.nextDepthValue = function() {\r\n  return (this._depthCounter++) / 65536.0\r\n}\r\n\r\nfunction lerp(a, b, t) {\r\n  var s = 0.5 * (t + 1.0)\r\n  return Math.floor((1.0-s)*a + s*b)|0\r\n}\r\n\r\nproto.draw = (function() {\r\nvar TICK_MARK_BOX = [0,0,0,0]\r\nreturn function() {\r\n  var gl         = this.gl\r\n  var screenBox  = this.screenBox\r\n  var viewPixels = this.viewBox\r\n  var dataBox    = this.dataBox\r\n  var pixelRatio = this.pixelRatio\r\n  var grid       = this.grid\r\n  var line       = this.line\r\n  var text       = this.text\r\n  var objects    = this.objects\r\n\r\n  this._depthCounter = 0\r\n\r\n  if(this.pickDirty) {\r\n    if(this._pickTimeout) {\r\n      clearTimeout(this._pickTimeout)\r\n    }\r\n    this.pickDirty = false\r\n    this._pickTimeout = setTimeout(this._drawPick, this.pickDelay)\r\n  }\r\n\r\n  if(!this.dirty) {\r\n    return\r\n  }\r\n  this.dirty = false\r\n\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null)\r\n\r\n  //Turn on scissor\r\n  gl.enable(gl.SCISSOR_TEST)\r\n\r\n  //Turn off depth buffer\r\n  gl.disable(gl.DEPTH_TEST)\r\n  gl.depthFunc(gl.LESS)\r\n  gl.depthMask(false)\r\n\r\n  //Configure premultiplied alpha blending\r\n  gl.enable(gl.BLEND)\r\n  gl.blendEquation(gl.FUNC_ADD, gl.FUNC_ADD);\r\n  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n  //Draw border\r\n  if (this.borderColor) {\r\n    gl.scissor(\r\n      screenBox[0],\r\n      screenBox[1],\r\n      screenBox[2]-screenBox[0],\r\n      screenBox[3]-screenBox[1])\r\n    var borderColor = this.borderColor\r\n    gl.clearColor(\r\n      borderColor[0]*borderColor[3],\r\n      borderColor[1]*borderColor[3],\r\n      borderColor[2]*borderColor[3],\r\n      borderColor[3])\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n  }\r\n\r\n  //Draw center pane\r\n  gl.scissor(\r\n    viewPixels[0],\r\n    viewPixels[1],\r\n    viewPixels[2]-viewPixels[0],\r\n    viewPixels[3]-viewPixels[1])\r\n  gl.viewport(\r\n    viewPixels[0],\r\n    viewPixels[1],\r\n    viewPixels[2]-viewPixels[0],\r\n    viewPixels[3]-viewPixels[1])\r\n  var backgroundColor = this.backgroundColor\r\n  gl.clearColor(\r\n    backgroundColor[0]*backgroundColor[3],\r\n    backgroundColor[1]*backgroundColor[3],\r\n    backgroundColor[2]*backgroundColor[3],\r\n    backgroundColor[3])\r\n  gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n  //Draw grid\r\n  grid.draw()\r\n\r\n  //Draw zero lines separately\r\n  var zeroLineEnable = this.zeroLineEnable\r\n  var zeroLineColor  = this.zeroLineColor\r\n  var zeroLineWidth  = this.zeroLineWidth\r\n  if(zeroLineEnable[0] || zeroLineEnable[1]) {\r\n    line.bind()\r\n    for(var i=0; i<2; ++i) {\r\n      if(!zeroLineEnable[i] ||\r\n        !(dataBox[i] <= 0 && dataBox[i+2] >= 0)) {\r\n        continue\r\n      }\r\n\r\n      var zeroIntercept = screenBox[i] -\r\n        dataBox[i] * (screenBox[i+2] - screenBox[i]) / (dataBox[i+2] - dataBox[i])\r\n\r\n      if(i === 0) {\r\n        line.drawLine(\r\n          zeroIntercept, screenBox[1], zeroIntercept, screenBox[3],\r\n          zeroLineWidth[i],\r\n          zeroLineColor[i])\r\n      } else {\r\n        line.drawLine(\r\n          screenBox[0], zeroIntercept, screenBox[2], zeroIntercept,\r\n          zeroLineWidth[i],\r\n          zeroLineColor[i])\r\n      }\r\n    }\r\n  }\r\n\r\n  //Draw traces\r\n  for(var i=0; i<objects.length; ++i) {\r\n    objects[i].draw()\r\n  }\r\n\r\n  //Return viewport to default\r\n  gl.viewport(\r\n    screenBox[0],\r\n    screenBox[1],\r\n    screenBox[2]-screenBox[0],\r\n    screenBox[3]-screenBox[1])\r\n  gl.scissor(\r\n    screenBox[0],\r\n    screenBox[1],\r\n    screenBox[2]-screenBox[0],\r\n    screenBox[3]-screenBox[1])\r\n\r\n  //Draw tick marks\r\n  this.grid.drawTickMarks()\r\n\r\n  //Draw line elements\r\n  line.bind()\r\n\r\n  //Draw border lines\r\n  var borderLineEnable = this.borderLineEnable\r\n  var borderLineWidth  = this.borderLineWidth\r\n  var borderLineColor  = this.borderLineColor\r\n  if(borderLineEnable[1]) {\r\n    line.drawLine(\r\n      viewPixels[0], viewPixels[1] - 0.5*borderLineWidth[1]*pixelRatio,\r\n      viewPixels[0], viewPixels[3] + 0.5*borderLineWidth[3]*pixelRatio,\r\n      borderLineWidth[1], borderLineColor[1])\r\n  }\r\n  if(borderLineEnable[0]) {\r\n    line.drawLine(\r\n      viewPixels[0] - 0.5*borderLineWidth[0]*pixelRatio, viewPixels[1],\r\n      viewPixels[2] + 0.5*borderLineWidth[2]*pixelRatio, viewPixels[1],\r\n      borderLineWidth[0], borderLineColor[0])\r\n  }\r\n  if(borderLineEnable[3]) {\r\n    line.drawLine(\r\n      viewPixels[2], viewPixels[1] - 0.5*borderLineWidth[1]*pixelRatio,\r\n      viewPixels[2], viewPixels[3] + 0.5*borderLineWidth[3]*pixelRatio,\r\n      borderLineWidth[3], borderLineColor[3])\r\n  }\r\n  if(borderLineEnable[2]) {\r\n    line.drawLine(\r\n      viewPixels[0] - 0.5*borderLineWidth[0]*pixelRatio, viewPixels[3],\r\n      viewPixels[2] + 0.5*borderLineWidth[2]*pixelRatio, viewPixels[3],\r\n      borderLineWidth[2], borderLineColor[2])\r\n  }\r\n\r\n  //Draw text elements\r\n  text.bind()\r\n  for(var i=0; i<2; ++i) {\r\n    text.drawTicks(i)\r\n  }\r\n  if(this.titleEnable) {\r\n    text.drawTitle()\r\n  }\r\n\r\n  //Draw other overlay elements (select boxes, etc.)\r\n  var overlays = this.overlays\r\n  for(var i=0; i<overlays.length; ++i) {\r\n    overlays[i].draw()\r\n  }\r\n\r\n  //Turn off scissor test\r\n  gl.disable(gl.SCISSOR_TEST)\r\n  gl.disable(gl.BLEND)\r\n  gl.depthMask(true)\r\n}\r\n})()\r\n\r\nproto.drawPick = (function() {\r\n\r\nreturn function() {\r\n  if (this.static) return;\r\n\r\n  var pickBuffer = this.pickBuffer\r\n  var gl = this.gl\r\n\r\n  this._pickTimeout = null\r\n  pickBuffer.begin()\r\n\r\n  var pickOffset = 1\r\n  var objects = this.objects\r\n  for(var i=0; i<objects.length; ++i) {\r\n    pickOffset = objects[i].drawPick(pickOffset)\r\n  }\r\n\r\n  pickBuffer.end()\r\n}\r\n})()\r\n\r\nproto.pick = (function() {\r\nreturn function(x, y) {\r\n  if (this.static) return;\r\n\r\n  var pixelRatio     = this.pixelRatio\r\n  var pickPixelRatio = this.pickPixelRatio\r\n  var viewBox        = this.viewBox\r\n\r\n  var scrX = Math.round((x - viewBox[0] / pixelRatio) * pickPixelRatio)|0\r\n  var scrY = Math.round((y - viewBox[1] / pixelRatio) * pickPixelRatio)|0\r\n\r\n  var pickResult = this.pickBuffer.query(scrX, scrY, this.pickRadius)\r\n  if(!pickResult) {\r\n    return null\r\n  }\r\n\r\n  var pickValue = pickResult.id +\r\n    (pickResult.value[0]<<8)  +\r\n    (pickResult.value[1]<<16) +\r\n    (pickResult.value[2]<<24)\r\n\r\n  var objects = this.objects\r\n  for(var i=0; i<objects.length; ++i) {\r\n    var result = objects[i].pick(scrX, scrY, pickValue)\r\n    if(result) {\r\n      return result\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n})()\r\n\r\nfunction deepClone(array) {\r\n  var result = array.slice()\r\n  for(var i=0; i<result.length; ++i) {\r\n    result[i] = result[i].slice()\r\n  }\r\n  return result\r\n}\r\n\r\nfunction compareTicks(a, b) {\r\n  return a.x - b.x\r\n}\r\n\r\nproto.setScreenBox = function(nbox) {\r\n  var screenBox = this.screenBox\r\n  var pixelRatio = this.pixelRatio\r\n\r\n  screenBox[0] = Math.round(nbox[0] * pixelRatio) | 0\r\n  screenBox[1] = Math.round(nbox[1] * pixelRatio) | 0\r\n  screenBox[2] = Math.round(nbox[2] * pixelRatio) | 0\r\n  screenBox[3] = Math.round(nbox[3] * pixelRatio) | 0\r\n\r\n  this.setDirty()\r\n}\r\n\r\nproto.setDataBox = function(nbox) {\r\n  var dataBox = this.dataBox\r\n\r\n  var different =\r\n    dataBox[0] !== nbox[0] ||\r\n    dataBox[1] !== nbox[1] ||\r\n    dataBox[2] !== nbox[2] ||\r\n    dataBox[3] !== nbox[3]\r\n\r\n  if(different) {\r\n    dataBox[0] = nbox[0]\r\n    dataBox[1] = nbox[1]\r\n    dataBox[2] = nbox[2]\r\n    dataBox[3] = nbox[3]\r\n\r\n    this.setDirty()\r\n  }\r\n}\r\n\r\nproto.setViewBox = function(nbox) {\r\n  var pixelRatio = this.pixelRatio\r\n  var viewBox = this.viewBox\r\n\r\n  viewBox[0] = Math.round(nbox[0] * pixelRatio)|0\r\n  viewBox[1] = Math.round(nbox[1] * pixelRatio)|0\r\n  viewBox[2] = Math.round(nbox[2] * pixelRatio)|0\r\n  viewBox[3] = Math.round(nbox[3] * pixelRatio)|0\r\n\r\n  var pickPixelRatio = this.pickPixelRatio\r\n  this.pickBuffer.shape = [\r\n    Math.round((nbox[2] - nbox[0]) * pickPixelRatio)|0,\r\n    Math.round((nbox[3] - nbox[1]) * pickPixelRatio)|0 ]\r\n\r\n  this.setDirty()\r\n}\r\n\r\nproto.update = function(options) {\r\n  options = options || {}\r\n\r\n  var gl = this.gl\r\n\r\n  this.pixelRatio      = options.pixelRatio || 1\r\n\r\n  var pixelRatio       = this.pixelRatio\r\n  this.pickPixelRatio  = Math.max(pixelRatio, 1)\r\n\r\n  this.setScreenBox(options.screenBox ||\r\n    [0, 0, gl.drawingBufferWidth/pixelRatio, gl.drawingBufferHeight/pixelRatio])\r\n\r\n  var screenBox = this.screenBox\r\n  this.setViewBox(options.viewBox ||\r\n    [0.125*(this.screenBox[2]-this.screenBox[0])/pixelRatio,\r\n     0.125*(this.screenBox[3]-this.screenBox[1])/pixelRatio,\r\n     0.875*(this.screenBox[2]-this.screenBox[0])/pixelRatio,\r\n     0.875*(this.screenBox[3]-this.screenBox[1])/pixelRatio])\r\n\r\n  var viewBox = this.viewBox\r\n  var aspectRatio = (viewBox[2] - viewBox[0]) / (viewBox[3] - viewBox[1])\r\n  this.setDataBox(options.dataBox || [-10, -10/aspectRatio, 10, 10/aspectRatio])\r\n\r\n  this.borderColor     = options.borderColor !== false ? (options.borderColor || [0,0,0,0]).slice() : false\r\n  this.backgroundColor = (options.backgroundColor || [0,0,0,0]).slice()\r\n\r\n  this.gridLineEnable  = (options.gridLineEnable || [true,true]).slice()\r\n  this.gridLineWidth   = (options.gridLineWidth || [1,1]).slice()\r\n  this.gridLineColor   = deepClone(options.gridLineColor ||\r\n    [[0.5,0.5,0.5,1],[0.5,0.5,0.5,1]])\r\n\r\n  this.zeroLineEnable   = (options.zeroLineEnable || [true, true]).slice()\r\n  this.zeroLineWidth    = (options.zeroLineWidth || [4, 4]).slice()\r\n  this.zeroLineColor    = deepClone(options.zeroLineColor ||\r\n    [[0, 0, 0, 1],[0, 0, 0, 1]])\r\n\r\n  this.tickMarkLength   = (options.tickMarkLength || [0,0,0,0]).slice()\r\n  this.tickMarkWidth    = (options.tickMarkWidth || [0,0,0,0]).slice()\r\n  this.tickMarkColor    = deepClone(options.tickMarkColor ||\r\n    [[0,0,0,1],[0,0,0,1],[0,0,0,1],[0,0,0,1]])\r\n\r\n  this.titleCenter      = (options.titleCenter || [\r\n    0.5*(viewBox[0]+viewBox[2])/pixelRatio,(viewBox[3]+120)/pixelRatio]).slice()\r\n  this.titleEnable      = !('titleEnable' in options) || !!options.titleEnable\r\n  this.titleAngle       = options.titleAngle || 0\r\n  this.titleColor       = (options.titleColor || [0,0,0,1]).slice()\r\n\r\n  this.labelPad         = (options.labelPad || [15,15,15,15]).slice()\r\n  this.labelAngle       = (options.labelAngle ||\r\n    [0,Math.PI/2,0,3.0*Math.PI/2]).slice()\r\n  this.labelEnable      = (options.labelEnable || [true,true,true,true]).slice()\r\n  this.labelColor       = deepClone(options.labelColor ||\r\n    [[0,0,0,1],[0,0,0,1],[0,0,0,1],[0,0,0,1]])\r\n\r\n  this.tickPad         = (options.tickPad || [15,15,15,15]).slice()\r\n  this.tickAngle       = (options.tickAngle || [0,0,0,0]).slice()\r\n  this.tickEnable      = (options.tickEnable || [true,true,true,true]).slice()\r\n  this.tickColor       = deepClone(options.tickColor ||\r\n    [[0,0,0,1],[0,0,0,1],[0,0,0,1],[0,0,0,1]])\r\n\r\n  this.borderLineEnable = (options.borderLineEnable ||\r\n                            [true,true,true,true]).slice()\r\n  this.borderLineWidth  = (options.borderLineWidth || [2,2,2,2]).slice()\r\n  this.borderLineColor  = deepClone(options.borderLineColor ||\r\n                          [[0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1],\r\n                           [0,0,0,1]])\r\n\r\n  var ticks = options.ticks || [ [], [] ]\r\n\r\n  //Compute bounds on ticks\r\n  var bounds = this._tickBounds\r\n  bounds[0] = bounds[1] =  Infinity\r\n  bounds[2] = bounds[3] = -Infinity\r\n  for(var i=0; i<2; ++i) {\r\n    var axisTicks = ticks[i].slice(0)\r\n    if(axisTicks.length === 0) {\r\n      continue\r\n    }\r\n    axisTicks.sort(compareTicks)\r\n    bounds[i]   = Math.min(bounds[i], axisTicks[0].x)\r\n    bounds[i+2] = Math.max(bounds[i+2], axisTicks[axisTicks.length-1].x)\r\n  }\r\n\r\n  //Update grid\r\n  this.grid.update({\r\n    bounds: bounds,\r\n    ticks:  ticks\r\n  })\r\n\r\n  //Update text\r\n  this.text.update({\r\n    bounds:     bounds,\r\n    ticks:      ticks,\r\n    labels:     options.labels    || ['x', 'y'],\r\n    labelSize:  options.labelSize || [12,12],\r\n    labelFont:  options.labelFont || ['sans-serif', 'sans-serif'],\r\n    title:      options.title     || '',\r\n    titleSize:  options.titleSize || 18,\r\n    titleFont:  options.titleFont || 'sans-serif'\r\n  })\r\n\r\n  this.static = !!options.static;\r\n\r\n  this.setDirty()\r\n}\r\n\r\nproto.dispose = function() {\r\n  this.box.dispose()\r\n  this.grid.dispose()\r\n  this.text.dispose()\r\n  this.line.dispose()\r\n  for(var i=this.objects.length-1; i>=0; --i) {\r\n    this.objects[i].dispose()\r\n  }\r\n  this.objects.length = 0\r\n  for(var i=this.overlays.length-1; i>=0; --i) {\r\n    this.overlays[i].dispose()\r\n  }\r\n  this.overlays.length = 0\r\n\r\n  this.gl = null\r\n}\r\n\r\nproto.addObject = function(object) {\r\n  if(this.objects.indexOf(object) < 0) {\r\n    this.objects.push(object)\r\n    this.setDirty()\r\n  }\r\n}\r\n\r\nproto.removeObject = function(object) {\r\n  var objects = this.objects\r\n  for(var i=0; i<objects.length; ++i) {\r\n    if(objects[i] === object) {\r\n      objects.splice(i,1)\r\n      this.setDirty()\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nproto.addOverlay = function(object) {\r\n  if(this.overlays.indexOf(object) < 0) {\r\n    this.overlays.push(object)\r\n    this.setOverlayDirty()\r\n  }\r\n}\r\n\r\nproto.removeOverlay = function(object) {\r\n  var objects = this.overlays\r\n  for(var i=0; i<objects.length; ++i) {\r\n    if(objects[i] === object) {\r\n      objects.splice(i,1)\r\n      this.setOverlayDirty()\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction createGLPlot2D(options) {\r\n  var gl = options.gl\r\n  var pickBuffer = createPick(gl, [\r\n    gl.drawingBufferWidth, gl.drawingBufferHeight])\r\n  var plot = new GLPlot2D(gl, pickBuffer)\r\n  plot.grid = createGrid(plot)\r\n  plot.text = createText(plot)\r\n  plot.line = createLine(plot)\r\n  plot.box  = createBox(plot)\r\n  plot.update(options)\r\n  return plot\r\n}\r\n",null]}