{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattercarpet/hover.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattercarpet/hover.js","mtime":1529418310739},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar scatterHover = require('../scatter/hover');\n\nmodule.exports = function hoverPoints(pointData, xval, yval, hovermode) {\n    var scatterPointData = scatterHover(pointData, xval, yval, hovermode);\n    if(!scatterPointData || scatterPointData[0].index === false) return;\n\n    var newPointData = scatterPointData[0];\n\n    // if hovering on a fill, we don't show any point data so the label is\n    // unchanged from what scatter gives us - except that it needs to\n    // be constrained to the trianglular plot area, not just the rectangular\n    // area defined by the synthetic x and y axes\n    // TODO: in some cases the vertical middle of the shape is not within\n    // the triangular viewport at all, so the label can become disconnected\n    // from the shape entirely. But calculating what portion of the shape\n    // is actually visible, as constrained by the diagonal axis lines, is not\n    // so easy and anyway we lost the information we would have needed to do\n    // this inside scatterHover.\n    if(newPointData.index === undefined) {\n        var yFracUp = 1 - (newPointData.y0 / pointData.ya._length),\n            xLen = pointData.xa._length,\n            xMin = xLen * yFracUp / 2,\n            xMax = xLen - xMin;\n        newPointData.x0 = Math.max(Math.min(newPointData.x0, xMax), xMin);\n        newPointData.x1 = Math.max(Math.min(newPointData.x1, xMax), xMin);\n        return scatterPointData;\n    }\n\n    var cdi = newPointData.cd[newPointData.index];\n\n    newPointData.a = cdi.a;\n    newPointData.b = cdi.b;\n\n    newPointData.xLabelVal = undefined;\n    newPointData.yLabelVal = undefined;\n    // TODO: nice formatting, and label by axis title, for a, b, and c?\n\n    var trace = newPointData.trace;\n    var carpet = trace._carpet;\n    var hoverinfo = cdi.hi || trace.hoverinfo;\n    var parts = hoverinfo.split('+');\n    var text = [];\n\n    function textPart(ax, val) {\n        var prefix;\n\n        if(ax.labelprefix && ax.labelprefix.length > 0) {\n            prefix = ax.labelprefix.replace(/ = $/, '');\n        } else {\n            prefix = ax._hovertitle;\n        }\n\n        text.push(prefix + ': ' + val.toFixed(3) + ax.labelsuffix);\n    }\n\n    if(parts.indexOf('all') !== -1) parts = ['a', 'b'];\n    if(parts.indexOf('a') !== -1) textPart(carpet.aaxis, cdi.a);\n    if(parts.indexOf('b') !== -1) textPart(carpet.baxis, cdi.b);\n\n    var ij = carpet.ab2ij([cdi.a, cdi.b]);\n    var i0 = Math.floor(ij[0]);\n    var ti = ij[0] - i0;\n\n    var j0 = Math.floor(ij[1]);\n    var tj = ij[1] - j0;\n\n    var xy = carpet.evalxy([], i0, j0, ti, tj);\n    text.push('y: ' + xy[1].toFixed(3));\n\n    newPointData.extraText = text.join('<br>');\n\n    return scatterPointData;\n};\n",null]}