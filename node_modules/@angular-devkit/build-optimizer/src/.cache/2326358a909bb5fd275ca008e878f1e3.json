{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/geo/constants.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/geo/constants.js","mtime":1529418310687},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n// projection names to d3 function name\nexports.projNames = {\n    // d3.geo.projection\n    'equirectangular': 'equirectangular',\n    'mercator': 'mercator',\n    'orthographic': 'orthographic',\n    'natural earth': 'naturalEarth',\n    'kavrayskiy7': 'kavrayskiy7',\n    'miller': 'miller',\n    'robinson': 'robinson',\n    'eckert4': 'eckert4',\n    'azimuthal equal area': 'azimuthalEqualArea',\n    'azimuthal equidistant': 'azimuthalEquidistant',\n    'conic equal area': 'conicEqualArea',\n    'conic conformal': 'conicConformal',\n    'conic equidistant': 'conicEquidistant',\n    'gnomonic': 'gnomonic',\n    'stereographic': 'stereographic',\n    'mollweide': 'mollweide',\n    'hammer': 'hammer',\n    'transverse mercator': 'transverseMercator',\n    'albers usa': 'albersUsa',\n    'winkel tripel': 'winkel3',\n    'aitoff': 'aitoff',\n    'sinusoidal': 'sinusoidal'\n};\n\n// name of the axes\nexports.axesNames = ['lonaxis', 'lataxis'];\n\n// max longitudinal angular span (EXPERIMENTAL)\nexports.lonaxisSpan = {\n    'orthographic': 180,\n    'azimuthal equal area': 360,\n    'azimuthal equidistant': 360,\n    'conic conformal': 180,\n    'gnomonic': 160,\n    'stereographic': 180,\n    'transverse mercator': 180,\n    '*': 360\n};\n\n// max latitudinal angular span (EXPERIMENTAL)\nexports.lataxisSpan = {\n    'conic conformal': 150,\n    'stereographic': 179.5,\n    '*': 180\n};\n\n// defaults for each scope\nexports.scopeDefaults = {\n    world: {\n        lonaxisRange: [-180, 180],\n        lataxisRange: [-90, 90],\n        projType: 'equirectangular',\n        projRotate: [0, 0, 0]\n    },\n    usa: {\n        lonaxisRange: [-180, -50],\n        lataxisRange: [15, 80],\n        projType: 'albers usa'\n    },\n    europe: {\n        lonaxisRange: [-30, 60],\n        lataxisRange: [30, 85],\n        projType: 'conic conformal',\n        projRotate: [15, 0, 0],\n        projParallels: [0, 60]\n    },\n    asia: {\n        lonaxisRange: [22, 160],\n        lataxisRange: [-15, 55],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    },\n    africa: {\n        lonaxisRange: [-30, 60],\n        lataxisRange: [-40, 40],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    },\n    'north america': {\n        lonaxisRange: [-180, -45],\n        lataxisRange: [5, 85],\n        projType: 'conic conformal',\n        projRotate: [-100, 0, 0],\n        projParallels: [29.5, 45.5]\n    },\n    'south america': {\n        lonaxisRange: [-100, -30],\n        lataxisRange: [-60, 15],\n        projType: 'mercator',\n        projRotate: [0, 0, 0]\n    }\n};\n\n// angular pad to avoid rounding error around clip angles\nexports.clipPad = 1e-3;\n\n// map projection precision\nexports.precision = 0.1;\n\n// default land and water fill colors\nexports.landColor = '#F0DC82';\nexports.waterColor = '#3399FF';\n\n// locationmode to layer name\nexports.locationmodeToLayer = {\n    'ISO-3': 'countries',\n    'USA-states': 'subunits',\n    'country names': 'countries'\n};\n\n// SVG element for a sphere (use to frame maps)\nexports.sphereSVG = {type: 'Sphere'};\n\n// N.B. base layer names must be the same as in the topojson files\n\n// base layer with a fill color\nexports.fillLayers = {\n    ocean: 1,\n    land: 1,\n    lakes: 1\n};\n\n// base layer with a only a line color\nexports.lineLayers = {\n    subunits: 1,\n    countries: 1,\n    coastlines: 1,\n    rivers: 1,\n    frame: 1\n};\n\nexports.layers = [\n    'bg',\n    'ocean', 'land', 'lakes',\n    'subunits', 'countries', 'coastlines', 'rivers',\n    'lataxis', 'lonaxis', 'frame',\n    'backplot',\n    'frontplot'\n];\n\nexports.layersForChoropleth = [\n    'bg',\n    'ocean', 'land',\n    'subunits', 'countries', 'coastlines',\n    'lataxis', 'lonaxis', 'frame',\n    'backplot',\n    'rivers', 'lakes',\n    'frontplot'\n];\n\nexports.layerNameToAdjective = {\n    ocean: 'ocean',\n    land: 'land',\n    lakes: 'lake',\n    subunits: 'subunit',\n    countries: 'country',\n    coastlines: 'coastline',\n    rivers: 'river',\n    frame: 'frame'\n};\n",null]}