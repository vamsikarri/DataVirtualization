{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/bar/style.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/bar/style.js","mtime":1529418310701},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar Drawing = require('../../components/drawing');\nvar Registry = require('../../registry');\n\nfunction style(gd, cd) {\n    var s = cd ? cd[0].node3 : d3.select(gd).selectAll('g.trace.bars');\n    var barcount = s.size();\n    var fullLayout = gd._fullLayout;\n\n    // trace styling\n    s.style('opacity', function(d) { return d[0].trace.opacity; })\n\n    // for gapless (either stacked or neighboring grouped) bars use\n    // crispEdges to turn off antialiasing so an artificial gap\n    // isn't introduced.\n    .each(function(d) {\n        if((fullLayout.barmode === 'stack' && barcount > 1) ||\n                (fullLayout.bargap === 0 &&\n                 fullLayout.bargroupgap === 0 &&\n                 !d[0].trace.marker.line.width)) {\n            d3.select(this).attr('shape-rendering', 'crispEdges');\n        }\n    });\n\n    s.selectAll('g.points').each(function(d) {\n        var sel = d3.select(this);\n        var trace = d[0].trace;\n        stylePoints(sel, trace, gd);\n    });\n\n    Registry.getComponentMethod('errorbars', 'style')(s);\n}\n\nfunction stylePoints(sel, trace, gd) {\n    var pts = sel.selectAll('path');\n    var txs = sel.selectAll('text');\n\n    Drawing.pointStyle(pts, trace, gd);\n\n    txs.each(function(d) {\n        var tx = d3.select(this);\n        var textFont;\n\n        if(tx.classed('bartext-inside')) {\n            textFont = trace.insidetextfont;\n        } else if(tx.classed('bartext-outside')) {\n            textFont = trace.outsidetextfont;\n        }\n        if(!textFont) textFont = trace.textfont;\n\n        function cast(k) {\n            var cont = textFont[k];\n            return Array.isArray(cont) ? cont[d.i] : cont;\n        }\n\n        Drawing.font(tx, cast('family'), cast('size'), cast('color'));\n    });\n}\n\nfunction styleOnSelect(gd, cd) {\n    var s = cd[0].node3;\n    var trace = cd[0].trace;\n\n    if(trace.selectedpoints) {\n        Drawing.selectedPointStyle(s.selectAll('path'), trace);\n        Drawing.selectedTextStyle(s.selectAll('text'), trace);\n    } else {\n        stylePoints(s, trace, gd);\n    }\n}\n\nmodule.exports = {\n    style: style,\n    styleOnSelect: styleOnSelect\n};\n",null]}