{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/marching-simplex-table/mstab.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/marching-simplex-table/mstab.js","mtime":1529418309943},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\n\nmodule.exports = createTable\n\nvar chull = require('convex-hull')\n\nfunction constructVertex(d, a, b) {\n  var x = new Array(d)\n  for(var i=0; i<d; ++i) {\n    x[i] = 0.0\n    if(i === a) {\n      x[i] += 0.5\n    }\n    if(i === b) {\n      x[i] += 0.5\n    }\n  }\n  return x\n}\n\nfunction constructCell(dimension, mask) {\n  if(mask === 0 || mask === (1<<(dimension+1))-1) {\n    return []\n  }\n  var points = []\n  var index  = []\n  for(var i=0; i<=dimension; ++i) {\n    if(mask & (1<<i)) {\n      points.push(constructVertex(dimension, i-1, i-1))\n      index.push(null)\n      for(var j=0; j<=dimension; ++j) {\n        if(~mask & (1<<j)) {\n          points.push(constructVertex(dimension, i-1, j-1))\n          index.push([i,j])\n        }\n      }\n    }\n  }\n  \n  //Preprocess points so first d+1 points are linearly independent\n  var hull = chull(points)\n  var faces = []\ni_loop:\n  for(var i=0; i<hull.length; ++i) {\n    var face = hull[i]\n    var nface = []\n    for(var j=0; j<face.length; ++j) {\n      if(!index[face[j]]) {\n        continue i_loop\n      }\n      nface.push(index[face[j]].slice())\n    }\n    faces.push(nface)\n  }\n  return faces\n}\n\nfunction createTable(dimension) {\n  var numCells = 1<<(dimension+1)\n  var result = new Array(numCells)\n  for(var i=0; i<numCells; ++i) {\n    result[i] = constructCell(dimension, i)\n  }\n  return result\n}",null]}