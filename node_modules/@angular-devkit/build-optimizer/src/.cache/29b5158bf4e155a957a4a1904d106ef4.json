{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattergeo/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattergeo/attributes.js","mtime":1529418310740},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar scatterAttrs = require('../scatter/attributes');\nvar plotAttrs = require('../../plots/attributes');\nvar colorAttributes = require('../../components/colorscale/color_attributes');\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar scatterMarkerAttrs = scatterAttrs.marker,\n    scatterLineAttrs = scatterAttrs.line,\n    scatterMarkerLineAttrs = scatterMarkerAttrs.line;\n\nmodule.exports = overrideAll({\n    lon: {\n        valType: 'data_array',\n        description: 'Sets the longitude coordinates (in degrees East).'\n    },\n    lat: {\n        valType: 'data_array',\n        description: 'Sets the latitude coordinates (in degrees North).'\n    },\n\n    locations: {\n        valType: 'data_array',\n        description: [\n            'Sets the coordinates via location IDs or names.',\n            'Coordinates correspond to the centroid of each location given.',\n            'See `locationmode` for more info.'\n        ].join(' ')\n    },\n    locationmode: {\n        valType: 'enumerated',\n        values: ['ISO-3', 'USA-states', 'country names'],\n        role: 'info',\n        dflt: 'ISO-3',\n        description: [\n            'Determines the set of locations used to match entries in `locations`',\n            'to regions on the map.'\n        ].join(' ')\n    },\n\n    mode: extendFlat({}, scatterAttrs.mode, {dflt: 'markers'}),\n\n    text: extendFlat({}, scatterAttrs.text, {\n        description: [\n            'Sets text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    }),\n    hovertext: extendFlat({}, scatterAttrs.hovertext, {\n        description: [\n            'Sets hover text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'To be seen, trace `hoverinfo` must contain a *text* flag.'\n        ].join(' ')\n    }),\n\n    textfont: scatterAttrs.textfont,\n    textposition: scatterAttrs.textposition,\n\n    line: {\n        color: scatterLineAttrs.color,\n        width: scatterLineAttrs.width,\n        dash: dash\n    },\n    connectgaps: scatterAttrs.connectgaps,\n\n    marker: extendFlat({\n        symbol: scatterMarkerAttrs.symbol,\n        opacity: scatterMarkerAttrs.opacity,\n        size: scatterMarkerAttrs.size,\n        sizeref: scatterMarkerAttrs.sizeref,\n        sizemin: scatterMarkerAttrs.sizemin,\n        sizemode: scatterMarkerAttrs.sizemode,\n        showscale: scatterMarkerAttrs.showscale,\n        colorbar: scatterMarkerAttrs.colorbar,\n        line: extendFlat({\n            width: scatterMarkerLineAttrs.width\n        },\n            colorAttributes('marker.line')\n        ),\n        gradient: scatterMarkerAttrs.gradient\n    },\n        colorAttributes('marker')\n    ),\n\n    fill: {\n        valType: 'enumerated',\n        values: ['none', 'toself'],\n        dflt: 'none',\n        role: 'style',\n        description: [\n            'Sets the area to fill with a solid color.',\n            'Use with `fillcolor` if not *none*.',\n            '*toself* connects the endpoints of the trace (or each segment',\n            'of the trace if it has gaps) into a closed shape.'\n        ].join(' ')\n    },\n    fillcolor: scatterAttrs.fillcolor,\n\n    selected: scatterAttrs.selected,\n    unselected: scatterAttrs.unselected,\n\n    hoverinfo: extendFlat({}, plotAttrs.hoverinfo, {\n        flags: ['lon', 'lat', 'location', 'text', 'name']\n    })\n}, 'calc', 'nested');\n",null]}