{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl2d/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl2d/index.js","mtime":1529418310689},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar Scene2D = require('./scene2d');\nvar layoutGlobalAttrs = require('../layout_attributes');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar constants = require('../cartesian/constants');\nvar Cartesian = require('../cartesian');\nvar fxAttrs = require('../../components/fx/layout_attributes');\nvar getSubplotData = require('../get_data').getSubplotData;\n\nexports.name = 'gl2d';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('../cartesian/attributes');\n\nexports.supplyLayoutDefaults = function(layoutIn, layoutOut, fullData) {\n    if(!layoutOut._has('cartesian')) {\n        Cartesian.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n};\n\n// gl2d uses svg axis attributes verbatim, but overrides editType\n// this could potentially be just `layoutAttributes` but it would\n// still need special handling somewhere to give it precedence over\n// the svg version when both are in use on one plot\nexports.layoutAttrOverrides = overrideAll(Cartesian.layoutAttributes, 'plot', 'from-root');\n\n// similar overrides for base plot attributes (and those added by components)\nexports.baseLayoutAttrOverrides = overrideAll({\n    plot_bgcolor: layoutGlobalAttrs.plot_bgcolor,\n    hoverlabel: fxAttrs.hoverlabel\n    // dragmode needs calc but only when transitioning TO lasso or select\n    // so for now it's left inside _relayout\n    // dragmode: fxAttrs.dragmode\n}, 'plot', 'nested');\n\nexports.plot = function plotGl2d(gd) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotId = subplotIds[i],\n            subplotObj = fullLayout._plots[subplotId],\n            fullSubplotData = getSubplotData(fullData, 'gl2d', subplotId);\n\n        // ref. to corresp. Scene instance\n        var scene = subplotObj._scene2d;\n\n        // If Scene is not instantiated, create one!\n        if(scene === undefined) {\n            scene = new Scene2D({\n                id: subplotId,\n                graphDiv: gd,\n                container: gd.querySelector('.gl-container'),\n                staticPlot: gd._context.staticPlot,\n                plotGlPixelRatio: gd._context.plotGlPixelRatio\n            },\n                fullLayout\n            );\n\n            // set ref to Scene instance\n            subplotObj._scene2d = scene;\n        }\n\n        scene.plot(fullSubplotData, gd.calcdata, fullLayout, gd.layout);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldSceneKeys = oldFullLayout._subplots.gl2d || [];\n\n    for(var i = 0; i < oldSceneKeys.length; i++) {\n        var id = oldSceneKeys[i],\n            oldSubplot = oldFullLayout._plots[id];\n\n        // old subplot wasn't gl2d; nothing to do\n        if(!oldSubplot._scene2d) continue;\n\n        // if no traces are present, delete gl2d subplot\n        var subplotData = getSubplotData(newFullData, 'gl2d', id);\n        if(subplotData.length === 0) {\n            oldSubplot._scene2d.destroy();\n            delete oldFullLayout._plots[id];\n        }\n    }\n\n    // since we use cartesian interactions, do cartesian clean\n    Cartesian.clean.apply(this, arguments);\n};\n\nexports.drawFramework = function(gd) {\n    if(!gd._context.staticPlot) {\n        Cartesian.drawFramework(gd);\n    }\n};\n\nexports.toSVG = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplot = fullLayout._plots[subplotIds[i]],\n            scene = subplot._scene2d;\n\n        var imageData = scene.toImage('png');\n        var image = fullLayout._glimages.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            x: 0,\n            y: 0,\n            width: '100%',\n            height: '100%',\n            preserveAspectRatio: 'none'\n        });\n\n        scene.destroy();\n    }\n};\n\nexports.updateFx = function(fullLayout) {\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotObj = fullLayout._plots[subplotIds[i]]._scene2d;\n        subplotObj.updateFx(fullLayout.dragmode);\n    }\n};\n",null]}