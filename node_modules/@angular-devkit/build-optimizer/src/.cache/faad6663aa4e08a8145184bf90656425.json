{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/render.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/render.js","mtime":1529418310733},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar c = require('./constants');\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar d3sankey = require('@plotly/d3-sankey').sankey;\nvar d3Force = require('d3-force');\nvar Lib = require('../../lib');\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar isIndex = Lib.isIndex;\nvar gup = require('../../lib/gup');\nvar keyFun = gup.keyFun;\nvar repeat = gup.repeat;\nvar unwrap = gup.unwrap;\n\n// basic data utilities\n\nfunction persistOriginalPlace(nodes) {\n    var i, distinctLayerPositions = [];\n    for(i = 0; i < nodes.length; i++) {\n        nodes[i].originalX = nodes[i].x;\n        nodes[i].originalY = nodes[i].y;\n        if(distinctLayerPositions.indexOf(nodes[i].x) === -1) {\n            distinctLayerPositions.push(nodes[i].x);\n        }\n    }\n    distinctLayerPositions.sort(function(a, b) {return a - b;});\n    for(i = 0; i < nodes.length; i++) {\n        nodes[i].originalLayerIndex = distinctLayerPositions.indexOf(nodes[i].originalX);\n        nodes[i].originalLayer = nodes[i].originalLayerIndex / (distinctLayerPositions.length - 1);\n    }\n}\n\nfunction saveCurrentDragPosition(d) {\n    d.lastDraggedX = d.x;\n    d.lastDraggedY = d.y;\n}\n\nfunction sameLayer(d) {\n    return function(n) {return n.node.originalX === d.node.originalX;};\n}\n\nfunction switchToForceFormat(nodes) {\n    // force uses x, y as centers\n    for(var i = 0; i < nodes.length; i++) {\n        nodes[i].y = nodes[i].y + nodes[i].dy / 2;\n    }\n}\n\nfunction switchToSankeyFormat(nodes) {\n    // sankey uses x, y as top left\n    for(var i = 0; i < nodes.length; i++) {\n        nodes[i].y = nodes[i].y - nodes[i].dy / 2;\n    }\n}\n\n// view models\n\nfunction sankeyModel(layout, d, traceIndex) {\n    var trace = unwrap(d).trace;\n    var domain = trace.domain;\n    var nodeSpec = trace.node;\n    var linkSpec = trace.link;\n    var arrangement = trace.arrangement;\n    var horizontal = trace.orientation === 'h';\n    var nodePad = trace.node.pad;\n    var nodeThickness = trace.node.thickness;\n    var nodeLineColor = trace.node.line.color;\n    var nodeLineWidth = trace.node.line.width;\n    var linkLineColor = trace.link.line.color;\n    var linkLineWidth = trace.link.line.width;\n    var valueFormat = trace.valueformat;\n    var valueSuffix = trace.valuesuffix;\n    var textFont = trace.textfont;\n\n    var width = layout.width * (domain.x[1] - domain.x[0]);\n    var height = layout.height * (domain.y[1] - domain.y[0]);\n\n    var links = [];\n    var hasLinkColorArray = isArrayOrTypedArray(linkSpec.color);\n    var linkedNodes = {};\n\n    var nodeCount = nodeSpec.label.length;\n    var i;\n    for(i = 0; i < linkSpec.value.length; i++) {\n        var val = linkSpec.value[i];\n        // remove negative values, but keep zeros with special treatment\n        var source = linkSpec.source[i];\n        var target = linkSpec.target[i];\n        if(!(val > 0 && isIndex(source, nodeCount) && isIndex(target, nodeCount))) {\n            continue;\n        }\n\n        source = +source;\n        target = +target;\n        linkedNodes[source] = linkedNodes[target] = true;\n\n        links.push({\n            pointNumber: i,\n            label: linkSpec.label[i],\n            color: hasLinkColorArray ? linkSpec.color[i] : linkSpec.color,\n            source: source,\n            target: target,\n            value: +val\n        });\n    }\n\n    var hasNodeColorArray = isArrayOrTypedArray(nodeSpec.color);\n    var nodes = [];\n    var removedNodes = false;\n    var nodeIndices = {};\n    for(i = 0; i < nodeCount; i++) {\n        if(linkedNodes[i]) {\n            var l = nodeSpec.label[i];\n            nodeIndices[i] = nodes.length;\n            nodes.push({\n                pointNumber: i,\n                label: l,\n                color: hasNodeColorArray ? nodeSpec.color[i] : nodeSpec.color\n            });\n        }\n        else removedNodes = true;\n    }\n\n    // need to re-index links now, since we didn't put all the nodes in\n    if(removedNodes) {\n        for(i = 0; i < links.length; i++) {\n            links[i].source = nodeIndices[links[i].source];\n            links[i].target = nodeIndices[links[i].target];\n        }\n    }\n\n    var sankey = d3sankey()\n        .size(horizontal ? [width, height] : [height, width])\n        .nodeWidth(nodeThickness)\n        .nodePadding(nodePad)\n        .nodes(nodes)\n        .links(links)\n        .layout(c.sankeyIterations);\n\n    var node, sankeyNodes = sankey.nodes();\n    for(var n = 0; n < sankeyNodes.length; n++) {\n        node = sankeyNodes[n];\n        node.width = width;\n        node.height = height;\n    }\n\n    switchToForceFormat(nodes);\n\n    return {\n        key: traceIndex,\n        trace: trace,\n        guid: Math.floor(1e12 * (1 + Math.random())),\n        horizontal: horizontal,\n        width: width,\n        height: height,\n        nodePad: nodePad,\n        nodeLineColor: nodeLineColor,\n        nodeLineWidth: nodeLineWidth,\n        linkLineColor: linkLineColor,\n        linkLineWidth: linkLineWidth,\n        valueFormat: valueFormat,\n        valueSuffix: valueSuffix,\n        textFont: textFont,\n        translateX: domain.x[0] * width + layout.margin.l,\n        translateY: layout.height - domain.y[1] * layout.height + layout.margin.t,\n        dragParallel: horizontal ? height : width,\n        dragPerpendicular: horizontal ? width : height,\n        nodes: nodes,\n        links: links,\n        arrangement: arrangement,\n        sankey: sankey,\n        forceLayouts: {},\n        interactionState: {\n            dragInProgress: false,\n            hovered: false\n        }\n    };\n}\n\nfunction linkModel(uniqueKeys, d, l) {\n    var tc = tinycolor(l.color);\n    var basicKey = l.source.label + '|' + l.target.label;\n    var foundKey = uniqueKeys[basicKey];\n    uniqueKeys[basicKey] = (foundKey || 0) + 1;\n    var key = basicKey + '__' + uniqueKeys[basicKey];\n\n    // for event data\n    l.trace = d.trace;\n    l.curveNumber = d.trace.index;\n\n    return {\n        key: key,\n        traceId: d.key,\n        link: l,\n        tinyColorHue: Color.tinyRGB(tc),\n        tinyColorAlpha: tc.getAlpha(),\n        linkLineColor: d.linkLineColor,\n        linkLineWidth: d.linkLineWidth,\n        valueFormat: d.valueFormat,\n        valueSuffix: d.valueSuffix,\n        sankey: d.sankey,\n        interactionState: d.interactionState\n    };\n}\n\nfunction nodeModel(uniqueKeys, d, n) {\n    var tc = tinycolor(n.color),\n        zoneThicknessPad = c.nodePadAcross,\n        zoneLengthPad = d.nodePad / 2,\n        visibleThickness = n.dx,\n        visibleLength = Math.max(0.5, n.dy);\n\n    var basicKey = n.label;\n    var foundKey = uniqueKeys[basicKey];\n    uniqueKeys[basicKey] = (foundKey || 0) + 1;\n    var key = basicKey + '__' + uniqueKeys[basicKey];\n\n    // for event data\n    n.trace = d.trace;\n    n.curveNumber = d.trace.index;\n\n    return {\n        key: key,\n        traceId: d.key,\n        node: n,\n        nodePad: d.nodePad,\n        nodeLineColor: d.nodeLineColor,\n        nodeLineWidth: d.nodeLineWidth,\n        textFont: d.textFont,\n        size: d.horizontal ? d.height : d.width,\n        visibleWidth: Math.ceil(visibleThickness),\n        visibleHeight: visibleLength,\n        zoneX: -zoneThicknessPad,\n        zoneY: -zoneLengthPad,\n        zoneWidth: visibleThickness + 2 * zoneThicknessPad,\n        zoneHeight: visibleLength + 2 * zoneLengthPad,\n        labelY: d.horizontal ? n.dy / 2 + 1 : n.dx / 2 + 1,\n        left: n.originalLayer === 1,\n        sizeAcross: d.width,\n        forceLayouts: d.forceLayouts,\n        horizontal: d.horizontal,\n        darkBackground: tc.getBrightness() <= 128,\n        tinyColorHue: Color.tinyRGB(tc),\n        tinyColorAlpha: tc.getAlpha(),\n        valueFormat: d.valueFormat,\n        valueSuffix: d.valueSuffix,\n        sankey: d.sankey,\n        arrangement: d.arrangement,\n        uniqueNodeLabelPathId: [d.guid, d.key, key].join(' '),\n        interactionState: d.interactionState\n    };\n}\n\n// rendering snippets\n\nfunction updateNodePositions(sankeyNode) {\n    sankeyNode\n        .attr('transform', function(d) {\n            return 'translate(' + d.node.x.toFixed(3) + ', ' + (d.node.y - d.node.dy / 2).toFixed(3) + ')';\n        });\n}\n\nfunction linkPath(d) {\n    var nodes = d.sankey.nodes();\n    switchToSankeyFormat(nodes);\n    var result = d.sankey.link()(d.link);\n    switchToForceFormat(nodes);\n    return result;\n}\n\nfunction updateNodeShapes(sankeyNode) {\n    sankeyNode.call(updateNodePositions);\n}\n\nfunction updateShapes(sankeyNode, sankeyLink) {\n    sankeyNode.call(updateNodeShapes);\n    sankeyLink.attr('d', linkPath);\n}\n\nfunction sizeNode(rect) {\n    rect.attr('width', function(d) {return d.visibleWidth;})\n        .attr('height', function(d) {return d.visibleHeight;});\n}\n\nfunction salientEnough(d) {return d.link.dy > 1 || d.linkLineWidth > 0;}\n\nfunction sankeyTransform(d) {\n    var offset = 'translate(' + d.translateX + ',' + d.translateY + ')';\n    return offset + (d.horizontal ? 'matrix(1 0 0 1 0 0)' : 'matrix(0 1 1 0 0 0)');\n}\n\nfunction nodeCentering(d) {\n    return 'translate(' + (d.horizontal ? 0 : d.labelY) + ' ' + (d.horizontal ? d.labelY : 0) + ')';\n}\n\nfunction textGuidePath(d) {\n    return d3.svg.line()([\n        [d.horizontal ? (d.left ? -d.sizeAcross : d.visibleWidth + c.nodeTextOffsetHorizontal) : c.nodeTextOffsetHorizontal, 0],\n        [d.horizontal ? (d.left ? - c.nodeTextOffsetHorizontal : d.sizeAcross) : d.visibleHeight - c.nodeTextOffsetHorizontal, 0]\n    ]);}\n\nfunction sankeyInverseTransform(d) {return d.horizontal ? 'matrix(1 0 0 1 0 0)' : 'matrix(0 1 1 0 0 0)';}\nfunction textFlip(d) {return d.horizontal ? 'scale(1 1)' : 'scale(-1 1)';}\nfunction nodeTextColor(d) {return d.darkBackground && !d.horizontal ? 'rgb(255,255,255)' : 'rgb(0,0,0)';}\nfunction nodeTextOffset(d) {return d.horizontal && d.left ? '100%' : '0%';}\n\n// event handling\n\nfunction attachPointerEvents(selection, sankey, eventSet) {\n    selection\n        .on('.basic', null) // remove any preexisting handlers\n        .on('mouseover.basic', function(d) {\n            if(!d.interactionState.dragInProgress) {\n                eventSet.hover(this, d, sankey);\n                d.interactionState.hovered = [this, d];\n            }\n        })\n        .on('mousemove.basic', function(d) {\n            if(!d.interactionState.dragInProgress) {\n                eventSet.follow(this, d);\n                d.interactionState.hovered = [this, d];\n            }\n        })\n        .on('mouseout.basic', function(d) {\n            if(!d.interactionState.dragInProgress) {\n                eventSet.unhover(this, d, sankey);\n                d.interactionState.hovered = false;\n            }\n        })\n        .on('click.basic', function(d) {\n            if(d.interactionState.hovered) {\n                eventSet.unhover(this, d, sankey);\n                d.interactionState.hovered = false;\n            }\n            if(!d.interactionState.dragInProgress) {\n                eventSet.select(this, d, sankey);\n            }\n        });\n}\n\nfunction attachDragHandler(sankeyNode, sankeyLink, callbacks) {\n\n    var dragBehavior = d3.behavior.drag()\n\n        .origin(function(d) {return d.node;})\n\n        .on('dragstart', function(d) {\n            if(d.arrangement === 'fixed') return;\n            Lib.raiseToTop(this);\n            d.interactionState.dragInProgress = d.node;\n            saveCurrentDragPosition(d.node);\n            if(d.interactionState.hovered) {\n                callbacks.nodeEvents.unhover.apply(0, d.interactionState.hovered);\n                d.interactionState.hovered = false;\n            }\n            if(d.arrangement === 'snap') {\n                var forceKey = d.traceId + '|' + Math.floor(d.node.originalX);\n                if(d.forceLayouts[forceKey]) {\n                    d.forceLayouts[forceKey].alpha(1);\n                } else { // make a forceLayout iff needed\n                    attachForce(sankeyNode, forceKey, d);\n                }\n                startForce(sankeyNode, sankeyLink, d, forceKey);\n            }\n        })\n\n        .on('drag', function(d) {\n            if(d.arrangement === 'fixed') return;\n            var x = d3.event.x;\n            var y = d3.event.y;\n            if(d.arrangement === 'snap') {\n                d.node.x = x;\n                d.node.y = y;\n            } else {\n                if(d.arrangement === 'freeform') {\n                    d.node.x = x;\n                }\n                d.node.y = Math.max(d.node.dy / 2, Math.min(d.size - d.node.dy / 2, y));\n            }\n            saveCurrentDragPosition(d.node);\n            if(d.arrangement !== 'snap') {\n                d.sankey.relayout();\n                updateShapes(sankeyNode.filter(sameLayer(d)), sankeyLink);\n            }\n        })\n\n        .on('dragend', function(d) {\n            d.interactionState.dragInProgress = false;\n        });\n\n    sankeyNode\n        .on('.drag', null) // remove possible previous handlers\n        .call(dragBehavior);\n}\n\nfunction attachForce(sankeyNode, forceKey, d) {\n    var nodes = d.sankey.nodes().filter(function(n) {return n.originalX === d.node.originalX;});\n    d.forceLayouts[forceKey] = d3Force.forceSimulation(nodes)\n        .alphaDecay(0)\n        .force('collide', d3Force.forceCollide()\n            .radius(function(n) {return n.dy / 2 + d.nodePad / 2;})\n            .strength(1)\n            .iterations(c.forceIterations))\n        .force('constrain', snappingForce(sankeyNode, forceKey, nodes, d))\n        .stop();\n}\n\nfunction startForce(sankeyNode, sankeyLink, d, forceKey) {\n    window.requestAnimationFrame(function faster() {\n        for(var i = 0; i < c.forceTicksPerFrame; i++) {\n            d.forceLayouts[forceKey].tick();\n        }\n        d.sankey.relayout();\n        updateShapes(sankeyNode.filter(sameLayer(d)), sankeyLink);\n        if(d.forceLayouts[forceKey].alpha() > 0) {\n            window.requestAnimationFrame(faster);\n        }\n    });\n}\n\nfunction snappingForce(sankeyNode, forceKey, nodes, d) {\n    return function _snappingForce() {\n        var maxVelocity = 0;\n        for(var i = 0; i < nodes.length; i++) {\n            var n = nodes[i];\n            if(n === d.interactionState.dragInProgress) { // constrain node position to the dragging pointer\n                n.x = n.lastDraggedX;\n                n.y = n.lastDraggedY;\n            } else {\n                n.vx = (n.originalX - n.x) / c.forceTicksPerFrame; // snap to layer\n                n.y = Math.min(d.size - n.dy / 2, Math.max(n.dy / 2, n.y)); // constrain to extent\n            }\n            maxVelocity = Math.max(maxVelocity, Math.abs(n.vx), Math.abs(n.vy));\n        }\n        if(!d.interactionState.dragInProgress && maxVelocity < 0.1 && d.forceLayouts[forceKey].alpha() > 0) {\n            d.forceLayouts[forceKey].alpha(0);\n        }\n    };\n}\n\n// scene graph\nmodule.exports = function(svg, styledData, layout, callbacks) {\n    var sankey = svg.selectAll('.' + c.cn.sankey)\n        .data(styledData\n                .filter(function(d) {return unwrap(d).trace.visible;})\n                .map(sankeyModel.bind(null, layout)),\n            keyFun);\n\n    sankey.exit()\n        .remove();\n\n    sankey.enter()\n        .append('g')\n        .classed(c.cn.sankey, true)\n        .style('box-sizing', 'content-box')\n        .style('position', 'absolute')\n        .style('left', 0)\n        .style('shape-rendering', 'geometricPrecision')\n        .style('pointer-events', 'auto')\n        .attr('transform', sankeyTransform);\n\n    sankey.transition()\n        .ease(c.ease).duration(c.duration)\n        .attr('transform', sankeyTransform);\n\n    var sankeyLinks = sankey.selectAll('.' + c.cn.sankeyLinks)\n        .data(repeat, keyFun);\n\n    sankeyLinks.enter()\n        .append('g')\n        .classed(c.cn.sankeyLinks, true)\n        .style('fill', 'none');\n\n    var sankeyLink = sankeyLinks.selectAll('.' + c.cn.sankeyLink)\n        .data(function(d) {\n            var uniqueKeys = {};\n            return d.sankey.links()\n                .filter(function(l) {return l.value;})\n                .map(linkModel.bind(null, uniqueKeys, d));\n        }, keyFun);\n\n    sankeyLink.enter()\n        .append('path')\n        .classed(c.cn.sankeyLink, true)\n        .attr('d', linkPath)\n        .call(attachPointerEvents, sankey, callbacks.linkEvents);\n\n    sankeyLink\n        .style('stroke', function(d) {\n            return salientEnough(d) ? Color.tinyRGB(tinycolor(d.linkLineColor)) : d.tinyColorHue;\n        })\n        .style('stroke-opacity', function(d) {\n            return salientEnough(d) ? Color.opacity(d.linkLineColor) : d.tinyColorAlpha;\n        })\n        .style('stroke-width', function(d) {return salientEnough(d) ? d.linkLineWidth : 1;})\n        .style('fill', function(d) {return d.tinyColorHue;})\n        .style('fill-opacity', function(d) {return d.tinyColorAlpha;});\n\n    sankeyLink.transition()\n        .ease(c.ease).duration(c.duration)\n        .attr('d', linkPath);\n\n    sankeyLink.exit().transition()\n        .ease(c.ease).duration(c.duration)\n        .style('opacity', 0)\n        .remove();\n\n    var sankeyNodeSet = sankey.selectAll('.' + c.cn.sankeyNodeSet)\n        .data(repeat, keyFun);\n\n    sankeyNodeSet.enter()\n        .append('g')\n        .classed(c.cn.sankeyNodeSet, true);\n\n    sankeyNodeSet\n        .style('cursor', function(d) {\n            switch(d.arrangement) {\n                case 'fixed': return 'default';\n                case 'perpendicular': return 'ns-resize';\n                default: return 'move';\n            }\n        });\n\n    var sankeyNode = sankeyNodeSet.selectAll('.' + c.cn.sankeyNode)\n        .data(function(d) {\n            var nodes = d.sankey.nodes();\n            var uniqueKeys = {};\n            persistOriginalPlace(nodes);\n            return nodes\n                .filter(function(n) {return n.value;})\n                .map(nodeModel.bind(null, uniqueKeys, d));\n        }, keyFun);\n\n    sankeyNode.enter()\n        .append('g')\n        .classed(c.cn.sankeyNode, true)\n        .call(updateNodePositions)\n        .call(attachPointerEvents, sankey, callbacks.nodeEvents);\n\n    sankeyNode\n        .call(attachDragHandler, sankeyLink, callbacks); // has to be here as it binds sankeyLink\n\n    sankeyNode.transition()\n        .ease(c.ease).duration(c.duration)\n        .call(updateNodePositions);\n\n    sankeyNode.exit().transition()\n        .ease(c.ease).duration(c.duration)\n        .style('opacity', 0)\n        .remove();\n\n    var nodeRect = sankeyNode.selectAll('.' + c.cn.nodeRect)\n        .data(repeat);\n\n    nodeRect.enter()\n        .append('rect')\n        .classed(c.cn.nodeRect, true)\n        .call(sizeNode);\n\n    nodeRect\n        .style('stroke-width', function(d) {return d.nodeLineWidth;})\n        .style('stroke', function(d) {return Color.tinyRGB(tinycolor(d.nodeLineColor));})\n        .style('stroke-opacity', function(d) {return Color.opacity(d.nodeLineColor);})\n        .style('fill', function(d) {return d.tinyColorHue;})\n        .style('fill-opacity', function(d) {return d.tinyColorAlpha;});\n\n    nodeRect.transition()\n        .ease(c.ease).duration(c.duration)\n        .call(sizeNode);\n\n    var nodeCapture = sankeyNode.selectAll('.' + c.cn.nodeCapture)\n        .data(repeat);\n\n    nodeCapture.enter()\n        .append('rect')\n        .classed(c.cn.nodeCapture, true)\n        .style('fill-opacity', 0);\n\n    nodeCapture\n        .attr('x', function(d) {return d.zoneX;})\n        .attr('y', function(d) {return d.zoneY;})\n        .attr('width', function(d) {return d.zoneWidth;})\n        .attr('height', function(d) {return d.zoneHeight;});\n\n    var nodeCentered = sankeyNode.selectAll('.' + c.cn.nodeCentered)\n        .data(repeat);\n\n    nodeCentered.enter()\n        .append('g')\n        .classed(c.cn.nodeCentered, true)\n        .attr('transform', nodeCentering);\n\n    nodeCentered\n        .transition()\n        .ease(c.ease).duration(c.duration)\n        .attr('transform', nodeCentering);\n\n    var nodeLabelGuide = nodeCentered.selectAll('.' + c.cn.nodeLabelGuide)\n        .data(repeat);\n\n    nodeLabelGuide.enter()\n        .append('path')\n        .classed(c.cn.nodeLabelGuide, true)\n        .attr('id', function(d) {return d.uniqueNodeLabelPathId;})\n        .attr('d', textGuidePath)\n        .attr('transform', sankeyInverseTransform);\n\n    nodeLabelGuide\n        .transition()\n        .ease(c.ease).duration(c.duration)\n        .attr('d', textGuidePath)\n        .attr('transform', sankeyInverseTransform);\n\n    var nodeLabel = nodeCentered.selectAll('.' + c.cn.nodeLabel)\n        .data(repeat);\n\n    nodeLabel.enter()\n        .append('text')\n        .classed(c.cn.nodeLabel, true)\n        .attr('transform', textFlip)\n        .style('user-select', 'none')\n        .style('cursor', 'default')\n        .style('fill', 'black');\n\n    nodeLabel\n        .style('text-shadow', function(d) {\n            return d.horizontal ? '-1px 1px 1px #fff, 1px 1px 1px #fff, 1px -1px 1px #fff, -1px -1px 1px #fff' : 'none';\n        })\n        .each(function(d) {Drawing.font(nodeLabel, d.textFont);});\n\n    nodeLabel\n        .transition()\n        .ease(c.ease).duration(c.duration)\n        .attr('transform', textFlip);\n\n    var nodeLabelTextPath = nodeLabel.selectAll('.' + c.cn.nodeLabelTextPath)\n        .data(repeat);\n\n    nodeLabelTextPath.enter()\n        .append('textPath')\n        .classed(c.cn.nodeLabelTextPath, true)\n        .attr('alignment-baseline', 'middle')\n        .attr('xlink:href', function(d) {return '#' + d.uniqueNodeLabelPathId;})\n        .attr('startOffset', nodeTextOffset)\n        .style('fill', nodeTextColor);\n\n    nodeLabelTextPath\n        .text(function(d) {return d.horizontal || d.node.dy > 5 ? d.node.label : '';})\n        .attr('text-anchor', function(d) {return d.horizontal && d.left ? 'end' : 'start';});\n\n    nodeLabelTextPath\n        .transition()\n        .ease(c.ease).duration(c.duration)\n        .attr('startOffset', nodeTextOffset)\n        .style('fill', nodeTextColor);\n};\n",null]}