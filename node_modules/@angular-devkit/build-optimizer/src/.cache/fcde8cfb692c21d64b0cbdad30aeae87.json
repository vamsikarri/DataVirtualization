{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/heatmap/convert_column_xyz.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/heatmap/convert_column_xyz.js","mtime":1529418310716},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function convertColumnData(trace, ax1, ax2, var1Name, var2Name, arrayVarNames) {\n    var colLen = trace._length;\n    var col1 = trace[var1Name].slice(0, colLen);\n    var col2 = trace[var2Name].slice(0, colLen);\n    var textCol = trace.text;\n    var hasColumnText = (textCol !== undefined && Lib.isArray1D(textCol));\n    var col1Calendar = trace[var1Name + 'calendar'];\n    var col2Calendar = trace[var2Name + 'calendar'];\n\n    var i, j, arrayVar, newArray, arrayVarName;\n\n    for(i = 0; i < colLen; i++) {\n        col1[i] = ax1.d2c(col1[i], 0, col1Calendar);\n        col2[i] = ax2.d2c(col2[i], 0, col2Calendar);\n    }\n\n    var col1dv = Lib.distinctVals(col1),\n        col1vals = col1dv.vals,\n        col2dv = Lib.distinctVals(col2),\n        col2vals = col2dv.vals,\n        newArrays = [];\n\n    for(i = 0; i < arrayVarNames.length; i++) {\n        newArrays[i] = Lib.init2dArray(col2vals.length, col1vals.length);\n    }\n\n    var i1, i2, text;\n\n    if(hasColumnText) text = Lib.init2dArray(col2vals.length, col1vals.length);\n\n    for(i = 0; i < colLen; i++) {\n        if(col1[i] !== BADNUM && col2[i] !== BADNUM) {\n            i1 = Lib.findBin(col1[i] + col1dv.minDiff / 2, col1vals);\n            i2 = Lib.findBin(col2[i] + col2dv.minDiff / 2, col2vals);\n\n            for(j = 0; j < arrayVarNames.length; j++) {\n                arrayVarName = arrayVarNames[j];\n                arrayVar = trace[arrayVarName];\n                newArray = newArrays[j];\n                newArray[i2][i1] = arrayVar[i];\n            }\n\n            if(hasColumnText) text[i2][i1] = textCol[i];\n        }\n    }\n\n    trace['_' + var1Name] = col1vals;\n    trace['_' + var2Name] = col2vals;\n    for(j = 0; j < arrayVarNames.length; j++) {\n        trace['_' + arrayVarNames[j]] = newArrays[j];\n    }\n    if(hasColumnText) trace._text = text;\n};\n",null]}