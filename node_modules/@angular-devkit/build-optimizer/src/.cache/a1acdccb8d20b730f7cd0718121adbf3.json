{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/plot.js","mtime":1529418310732},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar render = require('./render');\nvar Fx = require('../../components/fx');\nvar Color = require('../../components/color');\nvar Lib = require('../../lib');\nvar cn = require('./constants').cn;\n\nvar _ = Lib._;\n\nfunction renderableValuePresent(d) {return d !== '';}\n\nfunction ownTrace(selection, d) {\n    return selection.filter(function(s) {return s.key === d.traceId;});\n}\n\nfunction makeTranslucent(element, alpha) {\n    d3.select(element)\n        .select('path')\n        .style('fill-opacity', alpha);\n    d3.select(element)\n        .select('rect')\n        .style('fill-opacity', alpha);\n}\n\nfunction makeTextContrasty(element) {\n    d3.select(element)\n        .select('text.name')\n        .style('fill', 'black');\n}\n\nfunction relatedLinks(d) {\n    return function(l) {\n        return d.node.sourceLinks.indexOf(l.link) !== -1 || d.node.targetLinks.indexOf(l.link) !== -1;\n    };\n}\n\nfunction relatedNodes(l) {\n    return function(d) {\n        return d.node.sourceLinks.indexOf(l.link) !== -1 || d.node.targetLinks.indexOf(l.link) !== -1;\n    };\n}\n\nfunction nodeHoveredStyle(sankeyNode, d, sankey) {\n    if(d && sankey) {\n        ownTrace(sankey, d)\n            .selectAll('.' + cn.sankeyLink)\n            .filter(relatedLinks(d))\n            .call(linkHoveredStyle.bind(0, d, sankey, false));\n    }\n}\n\nfunction nodeNonHoveredStyle(sankeyNode, d, sankey) {\n    if(d && sankey) {\n        ownTrace(sankey, d)\n            .selectAll('.' + cn.sankeyLink)\n            .filter(relatedLinks(d))\n            .call(linkNonHoveredStyle.bind(0, d, sankey, false));\n    }\n}\n\nfunction linkHoveredStyle(d, sankey, visitNodes, sankeyLink) {\n\n    var label = sankeyLink.datum().link.label;\n\n    sankeyLink.style('fill-opacity', 0.4);\n\n    if(label) {\n        ownTrace(sankey, d)\n            .selectAll('.' + cn.sankeyLink)\n            .filter(function(l) {return l.link.label === label;})\n            .style('fill-opacity', 0.4);\n    }\n\n    if(visitNodes) {\n        ownTrace(sankey, d)\n            .selectAll('.' + cn.sankeyNode)\n            .filter(relatedNodes(d))\n            .call(nodeHoveredStyle);\n    }\n}\n\nfunction linkNonHoveredStyle(d, sankey, visitNodes, sankeyLink) {\n\n    var label = sankeyLink.datum().link.label;\n\n    sankeyLink.style('fill-opacity', function(d) {return d.tinyColorAlpha;});\n\n    if(label) {\n        ownTrace(sankey, d)\n            .selectAll('.' + cn.sankeyLink)\n            .filter(function(l) {return l.link.label === label;})\n            .style('fill-opacity', function(d) {return d.tinyColorAlpha;});\n    }\n\n    if(visitNodes) {\n        ownTrace(sankey, d)\n            .selectAll(cn.sankeyNode)\n            .filter(relatedNodes(d))\n            .call(nodeNonHoveredStyle);\n    }\n}\n\n// does not support array values for now\nfunction castHoverOption(trace, attr) {\n    var labelOpts = trace.hoverlabel || {};\n    var val = Lib.nestedProperty(labelOpts, attr).get();\n    return Array.isArray(val) ? false : val;\n}\n\nmodule.exports = function plot(gd, calcData) {\n    var fullLayout = gd._fullLayout;\n    var svg = fullLayout._paper;\n    var size = fullLayout._size;\n\n    var linkSelect = function(element, d) {\n        var evt = d.link;\n        evt.originalEvent = d3.event;\n        gd._hoverdata = [evt];\n        Fx.click(gd, { target: true });\n    };\n\n    var linkHover = function(element, d, sankey) {\n        d3.select(element).call(linkHoveredStyle.bind(0, d, sankey, true));\n        gd.emit('plotly_hover', {\n            event: d3.event,\n            points: [d.link]\n        });\n    };\n\n    var sourceLabel = _(gd, 'source:') + ' ';\n    var targetLabel = _(gd, 'target:') + ' ';\n    var incomingLabel = _(gd, 'incoming flow count:') + ' ';\n    var outgoingLabel = _(gd, 'outgoing flow count:') + ' ';\n\n    var linkHoverFollow = function(element, d) {\n        var trace = d.link.trace;\n        var rootBBox = gd._fullLayout._paperdiv.node().getBoundingClientRect();\n        var boundingBox = element.getBoundingClientRect();\n        var hoverCenterX = boundingBox.left + boundingBox.width / 2;\n        var hoverCenterY = boundingBox.top + boundingBox.height / 2;\n\n        var tooltip = Fx.loneHover({\n            x: hoverCenterX - rootBBox.left,\n            y: hoverCenterY - rootBBox.top,\n            name: d3.format(d.valueFormat)(d.link.value) + d.valueSuffix,\n            text: [\n                d.link.label || '',\n                sourceLabel + d.link.source.label,\n                targetLabel + d.link.target.label\n            ].filter(renderableValuePresent).join('<br>'),\n            color: castHoverOption(trace, 'bgcolor') || Color.addOpacity(d.tinyColorHue, 1),\n            borderColor: castHoverOption(trace, 'bordercolor'),\n            fontFamily: castHoverOption(trace, 'font.family'),\n            fontSize: castHoverOption(trace, 'font.size'),\n            fontColor: castHoverOption(trace, 'font.color'),\n            idealAlign: d3.event.x < hoverCenterX ? 'right' : 'left'\n        }, {\n            container: fullLayout._hoverlayer.node(),\n            outerContainer: fullLayout._paper.node(),\n            gd: gd\n        });\n\n        makeTranslucent(tooltip, 0.65);\n        makeTextContrasty(tooltip);\n    };\n\n    var linkUnhover = function(element, d, sankey) {\n        d3.select(element).call(linkNonHoveredStyle.bind(0, d, sankey, true));\n        gd.emit('plotly_unhover', {\n            event: d3.event,\n            points: [d.link]\n        });\n\n        Fx.loneUnhover(fullLayout._hoverlayer.node());\n    };\n\n    var nodeSelect = function(element, d, sankey) {\n        var evt = d.node;\n        evt.originalEvent = d3.event;\n        gd._hoverdata = [evt];\n        d3.select(element).call(nodeNonHoveredStyle, d, sankey);\n        Fx.click(gd, { target: true });\n    };\n\n    var nodeHover = function(element, d, sankey) {\n        d3.select(element).call(nodeHoveredStyle, d, sankey);\n        gd.emit('plotly_hover', {\n            event: d3.event,\n            points: [d.node]\n        });\n    };\n\n    var nodeHoverFollow = function(element, d) {\n        var trace = d.node.trace;\n        var nodeRect = d3.select(element).select('.' + cn.nodeRect);\n        var rootBBox = gd._fullLayout._paperdiv.node().getBoundingClientRect();\n        var boundingBox = nodeRect.node().getBoundingClientRect();\n        var hoverCenterX0 = boundingBox.left - 2 - rootBBox.left;\n        var hoverCenterX1 = boundingBox.right + 2 - rootBBox.left;\n        var hoverCenterY = boundingBox.top + boundingBox.height / 4 - rootBBox.top;\n\n        var tooltip = Fx.loneHover({\n            x0: hoverCenterX0,\n            x1: hoverCenterX1,\n            y: hoverCenterY,\n            name: d3.format(d.valueFormat)(d.node.value) + d.valueSuffix,\n            text: [\n                d.node.label,\n                incomingLabel + d.node.targetLinks.length,\n                outgoingLabel + d.node.sourceLinks.length\n            ].filter(renderableValuePresent).join('<br>'),\n            color: castHoverOption(trace, 'bgcolor') || d.tinyColorHue,\n            borderColor: castHoverOption(trace, 'bordercolor'),\n            fontFamily: castHoverOption(trace, 'font.family'),\n            fontSize: castHoverOption(trace, 'font.size'),\n            fontColor: castHoverOption(trace, 'font.color'),\n            idealAlign: 'left'\n        }, {\n            container: fullLayout._hoverlayer.node(),\n            outerContainer: fullLayout._paper.node(),\n            gd: gd\n        });\n\n        makeTranslucent(tooltip, 0.85);\n        makeTextContrasty(tooltip);\n    };\n\n    var nodeUnhover = function(element, d, sankey) {\n        d3.select(element).call(nodeNonHoveredStyle, d, sankey);\n        gd.emit('plotly_unhover', {\n            event: d3.event,\n            points: [d.node]\n        });\n\n        Fx.loneUnhover(fullLayout._hoverlayer.node());\n    };\n\n    render(\n        svg,\n        calcData,\n        {\n            width: size.w,\n            height: size.h,\n            margin: {\n                t: size.t,\n                r: size.r,\n                b: size.b,\n                l: size.l\n            }\n        },\n        {\n            linkEvents: {\n                hover: linkHover,\n                follow: linkHoverFollow,\n                unhover: linkUnhover,\n                select: linkSelect\n            },\n            nodeEvents: {\n                hover: nodeHover,\n                follow: nodeHoverFollow,\n                unhover: nodeUnhover,\n                select: nodeSelect\n            }\n        }\n    );\n};\n",null]}