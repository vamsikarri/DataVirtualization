{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/scene.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/scene.js","mtime":1529418310691},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar createPlot = require('gl-plot3d');\nvar getContext = require('webgl-context');\nvar passiveSupported = require('has-passive-events');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\nvar Fx = require('../../components/fx');\n\nvar str2RGBAarray = require('../../lib/str2rgbarray');\nvar showNoWebGlMsg = require('../../lib/show_no_webgl_msg');\n\nvar createCamera = require('./camera');\nvar project = require('./project');\nvar createAxesOptions = require('./layout/convert');\nvar createSpikeOptions = require('./layout/spikes');\nvar computeTickMarks = require('./layout/tick_marks');\n\n\nvar STATIC_CANVAS, STATIC_CONTEXT;\n\nfunction render(scene) {\n    var trace;\n\n    // update size of svg container\n    var svgContainer = scene.svgContainer;\n    var clientRect = scene.container.getBoundingClientRect();\n    var width = clientRect.width, height = clientRect.height;\n    svgContainer.setAttributeNS(null, 'viewBox', '0 0 ' + width + ' ' + height);\n    svgContainer.setAttributeNS(null, 'width', width);\n    svgContainer.setAttributeNS(null, 'height', height);\n\n    computeTickMarks(scene);\n    scene.glplot.axes.update(scene.axesOptions);\n\n    // check if pick has changed\n    var keys = Object.keys(scene.traces);\n    var lastPicked = null;\n    var selection = scene.glplot.selection;\n    for(var i = 0; i < keys.length; ++i) {\n        trace = scene.traces[keys[i]];\n        if(trace.data.hoverinfo !== 'skip' && trace.handlePick(selection)) {\n            lastPicked = trace;\n        }\n\n        if(trace.setContourLevels) trace.setContourLevels();\n    }\n\n    function formatter(axisName, val) {\n        var axis = scene.fullSceneLayout[axisName];\n\n        return Axes.tickText(axis, axis.d2l(val), 'hover').text;\n    }\n\n    var oldEventData;\n\n    if(lastPicked !== null) {\n        var pdata = project(scene.glplot.cameraParams, selection.dataCoordinate);\n        trace = lastPicked.data;\n        var ptNumber = selection.index;\n        var hoverinfo = Fx.castHoverinfo(trace, scene.fullLayout, ptNumber);\n        var hoverinfoParts = hoverinfo.split('+');\n        var isHoverinfoAll = hoverinfo === 'all';\n\n        var xVal = formatter('xaxis', selection.traceCoordinate[0]);\n        var yVal = formatter('yaxis', selection.traceCoordinate[1]);\n        var zVal = formatter('zaxis', selection.traceCoordinate[2]);\n\n        if(!isHoverinfoAll) {\n            if(hoverinfoParts.indexOf('x') === -1) xVal = undefined;\n            if(hoverinfoParts.indexOf('y') === -1) yVal = undefined;\n            if(hoverinfoParts.indexOf('z') === -1) zVal = undefined;\n            if(hoverinfoParts.indexOf('text') === -1) selection.textLabel = undefined;\n            if(hoverinfoParts.indexOf('name') === -1) lastPicked.name = undefined;\n        }\n\n        var tx;\n\n        if(trace.type === 'cone') {\n            var coneTx = [];\n            if(isHoverinfoAll || hoverinfoParts.indexOf('u') !== -1) {\n                coneTx.push('u: ' + formatter('xaxis', selection.traceCoordinate[3]));\n            }\n            if(isHoverinfoAll || hoverinfoParts.indexOf('v') !== -1) {\n                coneTx.push('v: ' + formatter('yaxis', selection.traceCoordinate[4]));\n            }\n            if(isHoverinfoAll || hoverinfoParts.indexOf('w') !== -1) {\n                coneTx.push('w: ' + formatter('zaxis', selection.traceCoordinate[5]));\n            }\n            if(isHoverinfoAll || hoverinfoParts.indexOf('norm') !== -1) {\n                coneTx.push('norm: ' + selection.traceCoordinate[6].toPrecision(3));\n            }\n            if(selection.textLabel) {\n                coneTx.push(selection.textLabel);\n            }\n            tx = coneTx.join('<br>');\n        } else {\n            tx = selection.textLabel;\n        }\n\n        if(scene.fullSceneLayout.hovermode) {\n            Fx.loneHover({\n                x: (0.5 + 0.5 * pdata[0] / pdata[3]) * width,\n                y: (0.5 - 0.5 * pdata[1] / pdata[3]) * height,\n                xLabel: xVal,\n                yLabel: yVal,\n                zLabel: zVal,\n                text: tx,\n                name: lastPicked.name,\n                color: Fx.castHoverOption(trace, ptNumber, 'bgcolor') || lastPicked.color,\n                borderColor: Fx.castHoverOption(trace, ptNumber, 'bordercolor'),\n                fontFamily: Fx.castHoverOption(trace, ptNumber, 'font.family'),\n                fontSize: Fx.castHoverOption(trace, ptNumber, 'font.size'),\n                fontColor: Fx.castHoverOption(trace, ptNumber, 'font.color')\n            }, {\n                container: svgContainer,\n                gd: scene.graphDiv\n            });\n        }\n\n        var pointData = {\n            x: selection.traceCoordinate[0],\n            y: selection.traceCoordinate[1],\n            z: selection.traceCoordinate[2],\n            data: trace._input,\n            fullData: trace,\n            curveNumber: trace.index,\n            pointNumber: ptNumber\n        };\n\n        Fx.appendArrayPointValue(pointData, trace, ptNumber);\n\n        var eventData = {points: [pointData]};\n\n        if(selection.buttons && selection.distance < 5) {\n            scene.graphDiv.emit('plotly_click', eventData);\n        }\n        else {\n            scene.graphDiv.emit('plotly_hover', eventData);\n        }\n\n        oldEventData = eventData;\n    }\n    else {\n        Fx.loneUnhover(svgContainer);\n        scene.graphDiv.emit('plotly_unhover', oldEventData);\n    }\n\n    scene.drawAnnotations(scene);\n}\n\nfunction initializeGLPlot(scene, fullLayout, canvas, gl) {\n    var glplotOptions = {\n        canvas: canvas,\n        gl: gl,\n        container: scene.container,\n        axes: scene.axesOptions,\n        spikes: scene.spikeOptions,\n        pickRadius: 10,\n        snapToData: true,\n        autoScale: true,\n        autoBounds: false\n    };\n\n    // for static plots, we reuse the WebGL context\n    //  as WebKit doesn't collect them reliably\n    if(scene.staticMode) {\n        if(!STATIC_CONTEXT) {\n            STATIC_CANVAS = document.createElement('canvas');\n            STATIC_CONTEXT = getContext({\n                canvas: STATIC_CANVAS,\n                preserveDrawingBuffer: true,\n                premultipliedAlpha: true,\n                antialias: true\n            });\n            if(!STATIC_CONTEXT) {\n                throw new Error('error creating static canvas/context for image server');\n            }\n        }\n        glplotOptions.pixelRatio = scene.pixelRatio;\n        glplotOptions.gl = STATIC_CONTEXT;\n        glplotOptions.canvas = STATIC_CANVAS;\n    }\n\n    try {\n        scene.glplot = createPlot(glplotOptions);\n    }\n    catch(e) {\n        /*\n        * createPlot will throw when webgl is not enabled in the client.\n        * Lets return an instance of the module with all functions noop'd.\n        * The destroy method - which will remove the container from the DOM\n        * is overridden with a function that removes the container only.\n        */\n        showNoWebGlMsg(scene);\n    }\n\n    var relayoutCallback = function(scene) {\n        if(scene.fullSceneLayout.dragmode === false) return;\n\n        var update = {};\n        update[scene.id + '.camera'] = getLayoutCamera(scene.camera);\n        scene.saveCamera(scene.graphDiv.layout);\n        scene.graphDiv.emit('plotly_relayout', update);\n    };\n\n    scene.glplot.canvas.addEventListener('mouseup', relayoutCallback.bind(null, scene));\n    scene.glplot.canvas.addEventListener('wheel', relayoutCallback.bind(null, scene), passiveSupported ? {passive: false} : false);\n\n    if(!scene.staticMode) {\n        scene.glplot.canvas.addEventListener('webglcontextlost', function(ev) {\n            Lib.warn('Lost WebGL context.');\n            ev.preventDefault();\n        });\n    }\n\n    if(!scene.camera) {\n        var cameraData = scene.fullSceneLayout.camera;\n        scene.camera = createCamera(scene.container, {\n            center: [cameraData.center.x, cameraData.center.y, cameraData.center.z],\n            eye: [cameraData.eye.x, cameraData.eye.y, cameraData.eye.z],\n            up: [cameraData.up.x, cameraData.up.y, cameraData.up.z],\n            zoomMin: 0.1,\n            zoomMax: 100,\n            mode: 'orbit'\n        });\n    }\n\n    scene.glplot.camera = scene.camera;\n\n    scene.glplot.oncontextloss = function() {\n        scene.recoverContext();\n    };\n\n    scene.glplot.onrender = render.bind(null, scene);\n\n    // List of scene objects\n    scene.traces = {};\n\n    return true;\n}\n\nfunction Scene(options, fullLayout) {\n\n    // create sub container for plot\n    var sceneContainer = document.createElement('div');\n    var plotContainer = options.container;\n\n    // keep a ref to the graph div to fire hover+click events\n    this.graphDiv = options.graphDiv;\n\n    // create SVG container for hover text\n    var svgContainer = document.createElementNS(\n        'http://www.w3.org/2000/svg',\n        'svg');\n    svgContainer.style.position = 'absolute';\n    svgContainer.style.top = svgContainer.style.left = '0px';\n    svgContainer.style.width = svgContainer.style.height = '100%';\n    svgContainer.style['z-index'] = 20;\n    svgContainer.style['pointer-events'] = 'none';\n    sceneContainer.appendChild(svgContainer);\n    this.svgContainer = svgContainer;\n\n    // Tag the container with the sceneID\n    sceneContainer.id = options.id;\n    sceneContainer.style.position = 'absolute';\n    sceneContainer.style.top = sceneContainer.style.left = '0px';\n    sceneContainer.style.width = sceneContainer.style.height = '100%';\n    plotContainer.appendChild(sceneContainer);\n\n    this.fullLayout = fullLayout;\n    this.id = options.id || 'scene';\n    this.fullSceneLayout = fullLayout[this.id];\n\n    // Saved from last call to plot()\n    this.plotArgs = [ [], {}, {} ];\n\n    /*\n     * Move this to calc step? Why does it work here?\n     */\n    this.axesOptions = createAxesOptions(fullLayout[this.id]);\n    this.spikeOptions = createSpikeOptions(fullLayout[this.id]);\n    this.container = sceneContainer;\n    this.staticMode = !!options.staticPlot;\n    this.pixelRatio = options.plotGlPixelRatio || 2;\n\n    // Coordinate rescaling\n    this.dataScale = [1, 1, 1];\n\n    this.contourLevels = [ [], [], [] ];\n\n    this.convertAnnotations = Registry.getComponentMethod('annotations3d', 'convert');\n    this.drawAnnotations = Registry.getComponentMethod('annotations3d', 'draw');\n\n    if(!initializeGLPlot(this, fullLayout)) return; // todo check the necessity for this line\n}\n\nvar proto = Scene.prototype;\n\nproto.recoverContext = function() {\n    var scene = this;\n    var gl = this.glplot.gl;\n    var canvas = this.glplot.canvas;\n    this.glplot.dispose();\n\n    function tryRecover() {\n        if(gl.isContextLost()) {\n            requestAnimationFrame(tryRecover);\n            return;\n        }\n        if(!initializeGLPlot(scene, scene.fullLayout, canvas, gl)) {\n            Lib.error('Catastrophic and unrecoverable WebGL error. Context lost.');\n            return;\n        }\n        scene.plot.apply(scene, scene.plotArgs);\n    }\n    requestAnimationFrame(tryRecover);\n};\n\nvar axisProperties = [ 'xaxis', 'yaxis', 'zaxis' ];\n\nfunction computeTraceBounds(scene, trace, bounds) {\n    var sceneLayout = scene.fullSceneLayout;\n\n    for(var d = 0; d < 3; d++) {\n        var axisName = axisProperties[d];\n        var axLetter = axisName.charAt(0);\n        var ax = sceneLayout[axisName];\n        var coords = trace[axLetter];\n        var calendar = trace[axLetter + 'calendar'];\n        var len = trace['_' + axLetter + 'length'];\n\n        if(!Lib.isArrayOrTypedArray(coords)) {\n            bounds[0][d] = Math.min(bounds[0][d], 0);\n            bounds[1][d] = Math.max(bounds[1][d], len - 1);\n        } else {\n            var v;\n\n            for(var i = 0; i < (len || coords.length); i++) {\n                if(Lib.isArrayOrTypedArray(coords[i])) {\n                    for(var j = 0; j < coords[i].length; ++j) {\n                        v = ax.d2l(coords[i][j], 0, calendar);\n                        if(!isNaN(v) && isFinite(v)) {\n                            bounds[0][d] = Math.min(bounds[0][d], v);\n                            bounds[1][d] = Math.max(bounds[1][d], v);\n                        }\n                    }\n                } else {\n                    v = ax.d2l(coords[i], 0, calendar);\n                    if(!isNaN(v) && isFinite(v)) {\n                        bounds[0][d] = Math.min(bounds[0][d], v);\n                        bounds[1][d] = Math.max(bounds[1][d], v);\n                    }\n                }\n            }\n        }\n    }\n}\n\nproto.plot = function(sceneData, fullLayout, layout) {\n\n    // Save parameters\n    this.plotArgs = [sceneData, fullLayout, layout];\n\n    if(this.glplot.contextLost) return;\n\n    var data, trace;\n    var i, j, axis, axisType;\n    var fullSceneLayout = fullLayout[this.id];\n    var sceneLayout = layout[this.id];\n\n    if(fullSceneLayout.bgcolor) this.glplot.clearColor = str2RGBAarray(fullSceneLayout.bgcolor);\n    else this.glplot.clearColor = [0, 0, 0, 0];\n\n    this.glplot.snapToData = true;\n\n    // Update layout\n    this.fullLayout = fullLayout;\n    this.fullSceneLayout = fullSceneLayout;\n\n    this.glplotLayout = fullSceneLayout;\n    this.axesOptions.merge(fullSceneLayout);\n    this.spikeOptions.merge(fullSceneLayout);\n\n    // Update camera and camera mode\n    this.setCamera(fullSceneLayout.camera);\n    this.updateFx(fullSceneLayout.dragmode, fullSceneLayout.hovermode);\n\n    // Update scene\n    this.glplot.update({});\n\n    // Update axes functions BEFORE updating traces\n    this.setConvert(axis);\n\n    // Convert scene data\n    if(!sceneData) sceneData = [];\n    else if(!Array.isArray(sceneData)) sceneData = [sceneData];\n\n    // Compute trace bounding box\n    var dataBounds = [\n        [Infinity, Infinity, Infinity],\n        [-Infinity, -Infinity, -Infinity]\n    ];\n    for(i = 0; i < sceneData.length; ++i) {\n        data = sceneData[i];\n        if(data.visible !== true) continue;\n\n        computeTraceBounds(this, data, dataBounds);\n    }\n    var dataScale = [1, 1, 1];\n    for(j = 0; j < 3; ++j) {\n        if(dataBounds[0][j] > dataBounds[1][j]) {\n            dataScale[j] = 1.0;\n        }\n        else {\n            if(dataBounds[1][j] === dataBounds[0][j]) {\n                dataScale[j] = 1.0;\n            }\n            else {\n                dataScale[j] = 1.0 / (dataBounds[1][j] - dataBounds[0][j]);\n            }\n        }\n    }\n\n    // Save scale\n    this.dataScale = dataScale;\n\n    // after computeTraceBounds where ax._categories are filled in\n    this.convertAnnotations(this);\n\n    // Update traces\n    for(i = 0; i < sceneData.length; ++i) {\n        data = sceneData[i];\n        if(data.visible !== true) {\n            continue;\n        }\n        trace = this.traces[data.uid];\n        if(trace) {\n            trace.update(data);\n        } else {\n            trace = data._module.plot(this, data);\n            this.traces[data.uid] = trace;\n        }\n        trace.name = data.name;\n    }\n\n    // Remove empty traces\n    var traceIds = Object.keys(this.traces);\n\n    trace_id_loop:\n    for(i = 0; i < traceIds.length; ++i) {\n        for(j = 0; j < sceneData.length; ++j) {\n            if(sceneData[j].uid === traceIds[i] && sceneData[j].visible === true) {\n                continue trace_id_loop;\n            }\n        }\n        trace = this.traces[traceIds[i]];\n        trace.dispose();\n        delete this.traces[traceIds[i]];\n    }\n\n    // order object per trace index\n    this.glplot.objects.sort(function(a, b) {\n        return a._trace.data.index - b._trace.data.index;\n    });\n\n    // Update ranges (needs to be called *after* objects are added due to updates)\n    var sceneBounds = [[0, 0, 0], [0, 0, 0]],\n        axisDataRange = [],\n        axisTypeRatios = {};\n\n    for(i = 0; i < 3; ++i) {\n        axis = fullSceneLayout[axisProperties[i]];\n        axisType = axis.type;\n\n        if(axisType in axisTypeRatios) {\n            axisTypeRatios[axisType].acc *= dataScale[i];\n            axisTypeRatios[axisType].count += 1;\n        }\n        else {\n            axisTypeRatios[axisType] = {\n                acc: dataScale[i],\n                count: 1\n            };\n        }\n\n        if(axis.autorange) {\n            sceneBounds[0][i] = Infinity;\n            sceneBounds[1][i] = -Infinity;\n\n            var objects = this.glplot.objects;\n            var annotations = this.fullSceneLayout.annotations || [];\n            var axLetter = axis._name.charAt(0);\n\n            for(j = 0; j < objects.length; j++) {\n                var obj = objects[j];\n                var objBounds = obj.bounds;\n                var pad = obj._trace.data._pad || 0;\n\n                sceneBounds[0][i] = Math.min(sceneBounds[0][i], objBounds[0][i] / dataScale[i] - pad);\n                sceneBounds[1][i] = Math.max(sceneBounds[1][i], objBounds[1][i] / dataScale[i] + pad);\n            }\n\n            for(j = 0; j < annotations.length; j++) {\n                var ann = annotations[j];\n\n                // N.B. not taking into consideration the arrowhead\n                if(ann.visible) {\n                    var pos = axis.r2l(ann[axLetter]);\n                    sceneBounds[0][i] = Math.min(sceneBounds[0][i], pos);\n                    sceneBounds[1][i] = Math.max(sceneBounds[1][i], pos);\n                }\n            }\n\n            if('rangemode' in axis && axis.rangemode === 'tozero') {\n                sceneBounds[0][i] = Math.min(sceneBounds[0][i], 0);\n                sceneBounds[1][i] = Math.max(sceneBounds[1][i], 0);\n            }\n            if(sceneBounds[0][i] > sceneBounds[1][i]) {\n                sceneBounds[0][i] = -1;\n                sceneBounds[1][i] = 1;\n            } else {\n                var d = sceneBounds[1][i] - sceneBounds[0][i];\n                sceneBounds[0][i] -= d / 32.0;\n                sceneBounds[1][i] += d / 32.0;\n            }\n        } else {\n            var range = axis.range;\n            sceneBounds[0][i] = axis.r2l(range[0]);\n            sceneBounds[1][i] = axis.r2l(range[1]);\n        }\n        if(sceneBounds[0][i] === sceneBounds[1][i]) {\n            sceneBounds[0][i] -= 1;\n            sceneBounds[1][i] += 1;\n        }\n        axisDataRange[i] = sceneBounds[1][i] - sceneBounds[0][i];\n\n        // Update plot bounds\n        this.glplot.bounds[0][i] = sceneBounds[0][i] * dataScale[i];\n        this.glplot.bounds[1][i] = sceneBounds[1][i] * dataScale[i];\n    }\n\n    var axesScaleRatio = [1, 1, 1];\n\n    // Compute axis scale per category\n    for(i = 0; i < 3; ++i) {\n        axis = fullSceneLayout[axisProperties[i]];\n        axisType = axis.type;\n        var axisRatio = axisTypeRatios[axisType];\n        axesScaleRatio[i] = Math.pow(axisRatio.acc, 1.0 / axisRatio.count) / dataScale[i];\n    }\n\n    /*\n     * Dynamically set the aspect ratio depending on the users aspect settings\n     */\n    var axisAutoScaleFactor = 4;\n    var aspectRatio;\n\n    if(fullSceneLayout.aspectmode === 'auto') {\n\n        if(Math.max.apply(null, axesScaleRatio) / Math.min.apply(null, axesScaleRatio) <= axisAutoScaleFactor) {\n\n            /*\n             * USE DATA MODE WHEN AXIS RANGE DIMENSIONS ARE RELATIVELY EQUAL\n             */\n\n            aspectRatio = axesScaleRatio;\n        } else {\n\n            /*\n             * USE EQUAL MODE WHEN AXIS RANGE DIMENSIONS ARE HIGHLY UNEQUAL\n             */\n            aspectRatio = [1, 1, 1];\n        }\n\n    } else if(fullSceneLayout.aspectmode === 'cube') {\n        aspectRatio = [1, 1, 1];\n\n    } else if(fullSceneLayout.aspectmode === 'data') {\n        aspectRatio = axesScaleRatio;\n\n    } else if(fullSceneLayout.aspectmode === 'manual') {\n        var userRatio = fullSceneLayout.aspectratio;\n        aspectRatio = [userRatio.x, userRatio.y, userRatio.z];\n\n    } else {\n        throw new Error('scene.js aspectRatio was not one of the enumerated types');\n    }\n\n    /*\n     * Write aspect Ratio back to user data and fullLayout so that it is modifies as user\n     * manipulates the aspectmode settings and the fullLayout is up-to-date.\n     */\n    fullSceneLayout.aspectratio.x = sceneLayout.aspectratio.x = aspectRatio[0];\n    fullSceneLayout.aspectratio.y = sceneLayout.aspectratio.y = aspectRatio[1];\n    fullSceneLayout.aspectratio.z = sceneLayout.aspectratio.z = aspectRatio[2];\n\n    /*\n     * Finally assign the computed aspecratio to the glplot module. This will have an effect\n     * on the next render cycle.\n     */\n    this.glplot.aspect = aspectRatio;\n\n\n    // Update frame position for multi plots\n    var domain = fullSceneLayout.domain || null,\n        size = fullLayout._size || null;\n\n    if(domain && size) {\n        var containerStyle = this.container.style;\n        containerStyle.position = 'absolute';\n        containerStyle.left = (size.l + domain.x[0] * size.w) + 'px';\n        containerStyle.top = (size.t + (1 - domain.y[1]) * size.h) + 'px';\n        containerStyle.width = (size.w * (domain.x[1] - domain.x[0])) + 'px';\n        containerStyle.height = (size.h * (domain.y[1] - domain.y[0])) + 'px';\n    }\n\n    // force redraw so that promise is returned when rendering is completed\n    this.glplot.redraw();\n};\n\nproto.destroy = function() {\n    if(!this.glplot) return;\n\n    this.camera.mouseListener.enabled = false;\n    this.container.removeEventListener('wheel', this.camera.wheelListener);\n    this.camera = this.glplot.camera = null;\n    this.glplot.dispose();\n    this.container.parentNode.removeChild(this.container);\n    this.glplot = null;\n};\n\n// getOrbitCamera :: plotly_coords -> orbit_camera_coords\n// inverse of getLayoutCamera\nfunction getOrbitCamera(camera) {\n    return [\n        [camera.eye.x, camera.eye.y, camera.eye.z],\n        [camera.center.x, camera.center.y, camera.center.z],\n        [camera.up.x, camera.up.y, camera.up.z]\n    ];\n}\n\n// getLayoutCamera :: orbit_camera_coords -> plotly_coords\n// inverse of getOrbitCamera\nfunction getLayoutCamera(camera) {\n    return {\n        up: {x: camera.up[0], y: camera.up[1], z: camera.up[2]},\n        center: {x: camera.center[0], y: camera.center[1], z: camera.center[2]},\n        eye: {x: camera.eye[0], y: camera.eye[1], z: camera.eye[2]}\n    };\n}\n\n// get camera position in plotly coords from 'orbit-camera' coords\nproto.getCamera = function getCamera() {\n    this.glplot.camera.view.recalcMatrix(this.camera.view.lastT());\n    return getLayoutCamera(this.glplot.camera);\n};\n\n// set camera position with a set of plotly coords\nproto.setCamera = function setCamera(cameraData) {\n    this.glplot.camera.lookAt.apply(this, getOrbitCamera(cameraData));\n};\n\n// save camera to user layout (i.e. gd.layout)\nproto.saveCamera = function saveCamera(layout) {\n    var cameraData = this.getCamera(),\n        cameraNestedProp = Lib.nestedProperty(layout, this.id + '.camera'),\n        cameraDataLastSave = cameraNestedProp.get(),\n        hasChanged = false;\n\n    function same(x, y, i, j) {\n        var vectors = ['up', 'center', 'eye'],\n            components = ['x', 'y', 'z'];\n        return y[vectors[i]] && (x[vectors[i]][components[j]] === y[vectors[i]][components[j]]);\n    }\n\n    if(cameraDataLastSave === undefined) hasChanged = true;\n    else {\n        for(var i = 0; i < 3; i++) {\n            for(var j = 0; j < 3; j++) {\n                if(!same(cameraData, cameraDataLastSave, i, j)) {\n                    hasChanged = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    if(hasChanged) cameraNestedProp.set(cameraData);\n\n    return hasChanged;\n};\n\nproto.updateFx = function(dragmode, hovermode) {\n    var camera = this.camera;\n\n    if(camera) {\n        // rotate and orbital are synonymous\n        if(dragmode === 'orbit') {\n            camera.mode = 'orbit';\n            camera.keyBindingMode = 'rotate';\n\n        } else if(dragmode === 'turntable') {\n            camera.up = [0, 0, 1];\n            camera.mode = 'turntable';\n            camera.keyBindingMode = 'rotate';\n\n        } else {\n\n            // none rotation modes [pan or zoom]\n            camera.keyBindingMode = dragmode;\n        }\n    }\n\n    // to put dragmode and hovermode on the same grounds from relayout\n    this.fullSceneLayout.hovermode = hovermode;\n};\n\nproto.toImage = function(format) {\n    if(!format) format = 'png';\n\n    if(this.staticMode) this.container.appendChild(STATIC_CANVAS);\n\n    // Force redraw\n    this.glplot.redraw();\n\n    // Grab context and yank out pixels\n    var gl = this.glplot.gl;\n    var w = gl.drawingBufferWidth;\n    var h = gl.drawingBufferHeight;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    var pixels = new Uint8Array(w * h * 4);\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\n    // Flip pixels\n    for(var j = 0, k = h - 1; j < k; ++j, --k) {\n        for(var i = 0; i < w; ++i) {\n            for(var l = 0; l < 4; ++l) {\n                var tmp = pixels[4 * (w * j + i) + l];\n                pixels[4 * (w * j + i) + l] = pixels[4 * (w * k + i) + l];\n                pixels[4 * (w * k + i) + l] = tmp;\n            }\n        }\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    var context = canvas.getContext('2d');\n    var imageData = context.createImageData(w, h);\n    imageData.data.set(pixels);\n    context.putImageData(imageData, 0, 0);\n\n    var dataURL;\n\n    switch(format) {\n        case 'jpeg':\n            dataURL = canvas.toDataURL('image/jpeg');\n            break;\n        case 'webp':\n            dataURL = canvas.toDataURL('image/webp');\n            break;\n        default:\n            dataURL = canvas.toDataURL('image/png');\n    }\n\n    if(this.staticMode) this.container.removeChild(STATIC_CANVAS);\n\n    return dataURL;\n};\n\nproto.setConvert = function() {\n    for(var i = 0; i < 3; i++) {\n        var ax = this.fullSceneLayout[axisProperties[i]];\n        Axes.setConvert(ax, this.fullLayout);\n        ax.setScale = Lib.noop;\n    }\n};\n\nmodule.exports = Scene;\n",null]}