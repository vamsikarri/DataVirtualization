{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-axes3d/properties.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-axes3d/properties.js","mtime":1529418308595},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["\"use strict\"\r\n\r\nmodule.exports = axesProperties\r\n\r\nvar getPlanes   = require(\"extract-frustum-planes\")\r\nvar splitPoly   = require(\"split-polygon\")\r\nvar cubeParams  = require(\"./lib/cube.js\")\r\nvar m4mul       = require(\"gl-mat4/multiply\")\r\nvar m4transpose = require(\"gl-mat4/transpose\")\r\nvar v4transformMat4 = require(\"gl-vec4/transformMat4\")\r\n\r\nvar identity    = new Float32Array([\r\n    1, 0, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 0, 1\r\n  ])\r\n\r\nvar mvp         = new Float32Array(16)\r\n\r\nfunction AxesRange3D(lo, hi, pixelsPerDataUnit) {\r\n  this.lo = lo\r\n  this.hi = hi\r\n  this.pixelsPerDataUnit = pixelsPerDataUnit\r\n}\r\n\r\nvar SCRATCH_P = [0,0,0,1]\r\nvar SCRATCH_Q = [0,0,0,1]\r\n\r\nfunction gradient(result, M, v, width, height) {\r\n  for(var i=0; i<3; ++i) {\r\n    var p = SCRATCH_P\r\n    var q = SCRATCH_Q\r\n    for(var j=0; j<3; ++j) {\r\n      q[j] = p[j] = v[j]\r\n    }\r\n    q[3] = p[3] = 1\r\n\r\n    q[i] += 1\r\n    v4transformMat4(q, q, M)\r\n    if(q[3] < 0) {\r\n      result[i] = Infinity\r\n    }\r\n\r\n    p[i] -= 1\r\n    v4transformMat4(p, p, M)\r\n    if(p[3] < 0) {\r\n      result[i] = Infinity\r\n    }\r\n\r\n    var dx = (p[0]/p[3] - q[0]/q[3]) * width\r\n    var dy = (p[1]/p[3] - q[1]/q[3]) * height\r\n\r\n    result[i] = 0.25 * Math.sqrt(dx*dx + dy*dy)\r\n  }\r\n  return result\r\n}\r\n\r\nvar RANGES = [\r\n  new AxesRange3D(Infinity, -Infinity, Infinity),\r\n  new AxesRange3D(Infinity, -Infinity, Infinity),\r\n  new AxesRange3D(Infinity, -Infinity, Infinity)\r\n]\r\n\r\nvar SCRATCH_X = [0,0,0]\r\n\r\nfunction axesProperties(axes, camera, width, height, params) {\r\n  var model       = camera.model || identity\r\n  var view        = camera.view || identity\r\n  var projection  = camera.projection || identity\r\n  var bounds      = axes.bounds\r\n  var params      = params || cubeParams(model, view, projection, bounds)\r\n  var axis        = params.axis\r\n  var edges       = params.edges\r\n\r\n  m4mul(mvp, view, model)\r\n  m4mul(mvp, projection, mvp)\r\n\r\n  //Calculate the following properties for each axis:\r\n  //\r\n  // * lo - start of visible range for each axis in tick coordinates\r\n  // * hi - end of visible range for each axis in tick coordinates\r\n  // * ticksPerPixel - pixel density of tick marks for the axis\r\n  //\r\n  var ranges = RANGES\r\n  for(var i=0; i<3; ++i) {\r\n    ranges[i].lo = Infinity\r\n    ranges[i].hi = -Infinity\r\n    ranges[i].pixelsPerDataUnit = Infinity\r\n  }\r\n\r\n  //Compute frustum planes, intersect with box\r\n  var frustum = getPlanes(m4transpose(mvp, mvp))\r\n  m4transpose(mvp, mvp)\r\n\r\n  //Loop over vertices of viewable box\r\n  for(var d=0; d<3; ++d) {\r\n    var u = (d+1)%3\r\n    var v = (d+2)%3\r\n    var x = SCRATCH_X\r\ni_loop:\r\n    for(var i=0; i<2; ++i) {\r\n      var poly = []\r\n\r\n      if((axis[d] < 0) === !!i) {\r\n        continue\r\n      }\r\n\r\n      x[d] = bounds[i][d]\r\n      for(var j=0; j<2; ++j) {\r\n        x[u] = bounds[j^i][u]\r\n        for(var k=0; k<2; ++k) {\r\n          x[v] = bounds[k^j^i][v]\r\n          poly.push(x.slice())\r\n        }\r\n      }\r\n      for(var j=0; j<frustum.length; ++j) {\r\n        if(poly.length === 0) {\r\n          continue i_loop\r\n        }\r\n        poly = splitPoly.positive(poly, frustum[j])\r\n      }\r\n\r\n      //Loop over vertices of polygon to find extremal points\r\n      for(var j=0; j<poly.length; ++j) {\r\n        var v = poly[j]\r\n        var grad = gradient(SCRATCH_X, mvp, v, width, height)\r\n        for(var k=0; k<3; ++k) {\r\n          ranges[k].lo = Math.min(ranges[k].lo, v[k])\r\n          ranges[k].hi = Math.max(ranges[k].hi, v[k])\r\n          if(k !== d) {\r\n            ranges[k].pixelsPerDataUnit = Math.min(ranges[k].pixelsPerDataUnit, Math.abs(grad[k]))\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return ranges\r\n}\r\n",null]}