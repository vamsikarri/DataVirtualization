{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contourcarpet/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contourcarpet/plot.js","mtime":1529418310715},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar map1dArray = require('../carpet/map_1d_array');\nvar makepath = require('../carpet/makepath');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\nvar getUidsFromCalcData = require('../../plots/get_data').getUidsFromCalcData;\n\nvar makeCrossings = require('../contour/make_crossings');\nvar findAllPaths = require('../contour/find_all_paths');\nvar contourPlot = require('../contour/plot');\nvar constants = require('../contour/constants');\nvar convertToConstraints = require('../contour/convert_to_constraints');\nvar joinAllPaths = require('./join_all_paths');\nvar emptyPathinfo = require('../contour/empty_pathinfo');\nvar mapPathinfo = require('./map_pathinfo');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar closeBoundaries = require('../contour/close_boundaries');\n\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n    var uidLookup = getUidsFromCalcData(cdcontours);\n\n    contourcarpetLayer.selectAll('g.contour').each(function(d) {\n        if(!uidLookup[d.trace.uid]) {\n            d3.select(this).remove();\n        }\n    });\n\n    for(var i = 0; i < cdcontours.length; i++) {\n        plotOne(gd, plotinfo, cdcontours[i], contourcarpetLayer);\n    }\n};\n\nfunction plotOne(gd, plotinfo, cd, contourcarpetLayer) {\n    var trace = cd[0].trace;\n\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    var carpetcd = gd.calcdata[carpet.index][0];\n\n    if(!carpet.visible || carpet.visible === 'legendonly') return;\n\n    var a = cd[0].a;\n    var b = cd[0].b;\n    var contours = trace.contours;\n    var uid = trace.uid;\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n    var id = 'contour' + uid;\n    var pathinfo = emptyPathinfo(contours, plotinfo, cd[0]);\n    var isConstraint = contours.type === 'constraint';\n    var operation = contours._operation;\n    var coloring = isConstraint ? (operation === '=' ? 'lines' : 'fill') : contours.coloring;\n\n    // Map [a, b] (data) --> [i, j] (pixels)\n    function ab2p(ab) {\n        var pt = carpet.ab2xy(ab[0], ab[1], true);\n        return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n    }\n\n    // Define the perimeter in a/b coordinates:\n    var perimeter = [\n        [a[0], b[b.length - 1]],\n        [a[a.length - 1], b[b.length - 1]],\n        [a[a.length - 1], b[0]],\n        [a[0], b[0]]\n    ];\n\n    // Extract the contour levels:\n    makeCrossings(pathinfo);\n    var atol = (a[a.length - 1] - a[0]) * 1e-8;\n    var btol = (b[b.length - 1] - b[0]) * 1e-8;\n    findAllPaths(pathinfo, atol, btol);\n\n    // Constraints might need to be draw inverted, which is not something contours\n    // handle by default since they're assumed fully opaque so that they can be\n    // drawn overlapping. This function flips the paths as necessary so that they're\n    // drawn correctly.\n    //\n    // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n    // closed regions so that translucent contour levels would be valid.\n    // See: https://github.com/plotly/plotly.js/issues/1356\n    var fillPathinfo = pathinfo;\n    if(contours.type === 'constraint') {\n        fillPathinfo = convertToConstraints(pathinfo, operation);\n        closeBoundaries(fillPathinfo, operation, perimeter, trace);\n    }\n\n    // Map the paths in a/b coordinates to pixel coordinates:\n    mapPathinfo(pathinfo, ab2p);\n\n    // draw everything\n    var plotGroup = contourPlot.makeContourGroup(contourcarpetLayer, cd, id);\n\n    // Compute the boundary path\n    var seg, xp, yp, i;\n    var segs = [];\n    for(i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n        seg = carpetcd.clipsegments[i];\n        xp = map1dArray([], seg.x, xa.c2p);\n        yp = map1dArray([], seg.y, ya.c2p);\n        xp.reverse();\n        yp.reverse();\n        segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    var boundaryPath = 'M' + segs.join('L') + 'Z';\n\n    // Draw the baseline background fill that fills in the space behind any other\n    // contour levels:\n    makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring);\n\n    // Draw the specific contour fills. As a simplification, they're assumed to be\n    // fully opaque so that it's easy to draw them simply overlapping. The alternative\n    // would be to flip adjacent paths and draw closed paths for each level instead.\n    makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath);\n\n    // Draw contour lines:\n    makeLinesAndLabels(plotGroup, pathinfo, gd, cd[0], contours, plotinfo, carpet);\n\n    // Clip the boundary of the plot\n    Drawing.setClipUrl(plotGroup, carpet._clipPathId);\n}\n\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n    var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n    var showLines = contours.showlines !== false;\n    var showLabels = contours.showlabels;\n    var clipLinesForLabels = showLines && showLabels;\n\n    // Even if we're not going to show lines, we need to create them\n    // if we're showing labels, because the fill paths include the perimeter\n    // so can't be used to position the labels correctly.\n    // In this case we'll remove the lines after making the labels.\n    var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo);\n\n    var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels,\n        gd._fullLayout._defs, cd0.trace.uid);\n\n    var labelGroup = plotgroup.selectAll('g.contourlabels')\n        .data(showLabels ? [0] : []);\n\n    labelGroup.exit().remove();\n\n    labelGroup.enter().append('g')\n        .classed('contourlabels', true);\n\n    if(showLabels) {\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n        var xLen = xa._length;\n        var yLen = ya._length;\n        // for simplicity use the xy box for label clipping outline.\n        var labelClipPathData = [[\n            [0, 0],\n            [xLen, 0],\n            [xLen, yLen],\n            [0, yLen]\n        ]];\n\n\n        var labelData = [];\n\n        // invalidate the getTextLocation cache in case paths changed\n        Lib.clearLocationCache();\n\n        var contourFormat = contourPlot.labelFormatter(contours, cd0.t.cb, gd._fullLayout);\n\n        var dummyText = Drawing.tester.append('text')\n            .attr('data-notex', 1)\n            .call(Drawing.font, contours.labelfont);\n\n        // use `bounds` only to keep labels away from the x/y boundaries\n        // `constrainToCarpet` below ensures labels don't go off the\n        // carpet edges\n        var bounds = {\n            left: 0,\n            right: xLen,\n            center: xLen / 2,\n            top: 0,\n            bottom: yLen,\n            middle: yLen / 2\n        };\n\n        var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen);\n\n        // the path length to use to scale the number of labels to draw:\n        var normLength = constants.LABELDISTANCE * plotDiagonal /\n            Math.max(1, pathinfo.length / constants.LABELINCREASE);\n\n        linegroup.each(function(d) {\n            var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n\n            d3.select(this).selectAll('path').each(function(pathData) {\n                var path = this;\n                var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n                if(!pathBounds) return;\n\n                constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n\n                if(pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n\n                var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength),\n                    constants.LABELMAX);\n\n                for(var i = 0; i < maxLabels; i++) {\n                    var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts,\n                        labelData, bounds);\n\n                    if(!loc) break;\n\n                    contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n                }\n            });\n        });\n\n        dummyText.remove();\n\n        contourPlot.drawLabels(labelGroup, labelData, gd, lineClip,\n            clipLinesForLabels ? labelClipPathData : null);\n    }\n\n    if(showLabels && !showLines) linegroup.remove();\n}\n\n// figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n    var pathABData;\n    for(var i = 0; i < levelData.pedgepaths.length; i++) {\n        if(pathData === levelData.pedgepaths[i]) {\n            pathABData = levelData.edgepaths[i];\n        }\n    }\n    if(!pathABData) return;\n\n    var aMin = carpet.a[0];\n    var aMax = carpet.a[carpet.a.length - 1];\n    var bMin = carpet.b[0];\n    var bMax = carpet.b[carpet.b.length - 1];\n\n    function getOffset(abPt, pathVector) {\n        var offset = 0;\n        var edgeVector;\n        var dAB = 0.1;\n        if(Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n\n        if(Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n        return offset;\n    }\n\n    var startVector = getUnitVector(path, 0, 1);\n    var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n    var minStart = getOffset(pathABData[0], startVector);\n    var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n\n    if(pathBounds.min < minStart) pathBounds.min = minStart;\n    if(pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n\n    pathBounds.len = pathBounds.max - pathBounds.min;\n}\n\nfunction getUnitVector(path, p0, p1) {\n    var pt0 = path.getPointAtLength(p0);\n    var pt1 = path.getPointAtLength(p1);\n    var dx = pt1.x - pt0.x;\n    var dy = pt1.y - pt0.y;\n    var len = Math.sqrt(dx * dx + dy * dy);\n    return [dx / len, dy / len];\n}\n\nfunction normalizeVector(v) {\n    var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    return [v[0] / len, v[1] / len];\n}\n\nfunction vectorTan(v0, v1) {\n    var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n    var sin = Math.sqrt(1 - cos * cos);\n    return sin / cos;\n}\n\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n    var seg, xp, yp, i;\n    var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n\n    var bgfill = bggroup.selectAll('path')\n        .data((coloring === 'fill' && !isConstraint) ? [0] : []);\n    bgfill.enter().append('path');\n    bgfill.exit().remove();\n\n    var segs = [];\n    for(i = 0; i < clipsegments.length; i++) {\n        seg = clipsegments[i];\n        xp = map1dArray([], seg.x, xaxis.c2p);\n        yp = map1dArray([], seg.y, yaxis.c2p);\n        segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    bgfill\n        .attr('d', 'M' + segs.join('L') + 'Z')\n        .style('stroke', 'none');\n}\n\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n    var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n\n    var fillitems = fillgroup.selectAll('path')\n        .data(coloring === 'fill' ? pathinfo : []);\n    fillitems.enter().append('path');\n    fillitems.exit().remove();\n    fillitems.each(function(pi) {\n        // join all paths for this level together into a single path\n        // first follow clockwise around the perimeter to close any open paths\n        // if the whole perimeter is above this level, start with a path\n        // enclosing the whole thing. With all that, the parity should mean\n        // that we always fill everything above the contour, nothing below\n        var fullpath = joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n\n        if(pi.prefixBoundary) {\n            fullpath = boundaryPath + fullpath;\n        }\n\n        if(!fullpath) {\n            d3.select(this).remove();\n        } else {\n            d3.select(this)\n                .attr('d', fullpath)\n                .style('stroke', 'none');\n        }\n    });\n}\n",null]}