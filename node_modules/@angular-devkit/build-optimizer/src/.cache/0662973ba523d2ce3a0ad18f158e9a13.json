{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/parcoords/parcoords.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/parcoords/parcoords.js","mtime":1529418310728},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar lineLayerMaker = require('./lines');\nvar c = require('./constants');\nvar Lib = require('../../lib');\nvar d3 = require('d3');\nvar Drawing = require('../../components/drawing');\nvar gup = require('../../lib/gup');\nvar keyFun = gup.keyFun;\nvar repeat = gup.repeat;\nvar unwrap = gup.unwrap;\nvar brush = require('./axisbrush');\n\nfunction visible(dimension) { return !('visible' in dimension) || dimension.visible; }\n\nfunction dimensionExtent(dimension) {\n\n    var lo = dimension.range ? dimension.range[0] : Lib.aggNums(Math.min, null, dimension.values, dimension._length);\n    var hi = dimension.range ? dimension.range[1] : Lib.aggNums(Math.max, null, dimension.values, dimension._length);\n\n    if(isNaN(lo) || !isFinite(lo)) {\n        lo = 0;\n    }\n\n    if(isNaN(hi) || !isFinite(hi)) {\n        hi = 0;\n    }\n\n    // avoid a degenerate (zero-width) domain\n    if(lo === hi) {\n        if(lo === 0) {\n            // no use to multiplying zero, so add/subtract in this case\n            lo -= 1;\n            hi += 1;\n        } else {\n            // this keeps the range in the order of magnitude of the data\n            lo *= 0.9;\n            hi *= 1.1;\n        }\n    }\n\n    return [lo, hi];\n}\n\nfunction toText(formatter, texts) {\n    if(texts) {\n        return function(v, i) {\n            var text = texts[i];\n            if(text === null || text === undefined) return formatter(v);\n            return text;\n        };\n    }\n    return formatter;\n}\n\nfunction domainScale(height, padding, dimension, tickvals, ticktext) {\n    var extent = dimensionExtent(dimension);\n    if(tickvals) {\n        return d3.scale.ordinal()\n            .domain(tickvals.map(toText(d3.format(dimension.tickformat), ticktext)))\n            .range(tickvals\n                .map(function(d) {\n                    var unitVal = (d - extent[0]) / (extent[1] - extent[0]);\n                    return (height - padding + unitVal * (2 * padding - height));\n                })\n            );\n    }\n    return d3.scale.linear()\n        .domain(extent)\n        .range([height - padding, padding]);\n}\n\nfunction unitToPaddedPx(height, padding) { return d3.scale.linear().range([padding, height - padding]); }\n\nfunction domainToPaddedUnitScale(dimension, padFraction) {\n    return d3.scale.linear()\n        .domain(dimensionExtent(dimension))\n        .range([padFraction, 1 - padFraction]);\n}\n\nfunction ordinalScale(dimension) {\n    if(!dimension.tickvals) return;\n\n    var extent = dimensionExtent(dimension);\n    return d3.scale.ordinal()\n        .domain(dimension.tickvals)\n        .range(dimension.tickvals.map(function(d) {\n            return (d - extent[0]) / (extent[1] - extent[0]);\n        }));\n}\n\nfunction unitToColorScale(cscale) {\n\n    var colorStops = cscale.map(function(d) { return d[0]; });\n    var colorTuples = cscale.map(function(d) { return d3.rgb(d[1]); });\n    var prop = function(n) { return function(o) { return o[n]; }; };\n\n    // We can't use d3 color interpolation as we may have non-uniform color palette raster\n    // (various color stop distances).\n    var polylinearUnitScales = 'rgb'.split('').map(function(key) {\n        return d3.scale.linear()\n            .clamp(true)\n            .domain(colorStops)\n            .range(colorTuples.map(prop(key)));\n    });\n\n    return function(d) {\n        return polylinearUnitScales.map(function(s) {\n            return s(d);\n        });\n    };\n}\n\nfunction someFiltersActive(view) {\n    return view.dimensions.some(function(p) {\n        return p.brush.filterSpecified;\n    });\n}\n\nfunction model(layout, d, i) {\n    var cd0 = unwrap(d),\n        trace = cd0.trace,\n        lineColor = cd0.lineColor,\n        cscale = cd0.cscale,\n        line = trace.line,\n        domain = trace.domain,\n        dimensions = trace.dimensions,\n        width = layout.width,\n        labelFont = trace.labelfont,\n        tickFont = trace.tickfont,\n        rangeFont = trace.rangefont;\n\n    var lines = Lib.extendDeepNoArrays({}, line, {\n        color: lineColor.map(d3.scale.linear().domain(dimensionExtent({\n            values: lineColor,\n            range: [line.cmin, line.cmax],\n            _length: trace._length\n        }))),\n        blockLineCount: c.blockLineCount,\n        canvasOverdrag: c.overdrag * c.canvasPixelRatio\n    });\n\n    var groupWidth = Math.floor(width * (domain.x[1] - domain.x[0]));\n    var groupHeight = Math.floor(layout.height * (domain.y[1] - domain.y[0]));\n\n    var pad = layout.margin || {l: 80, r: 80, t: 100, b: 80};\n    var rowContentWidth = groupWidth;\n    var rowHeight = groupHeight;\n\n    return {\n        key: i,\n        colCount: dimensions.filter(visible).length,\n        dimensions: dimensions,\n        tickDistance: c.tickDistance,\n        unitToColor: unitToColorScale(cscale),\n        lines: lines,\n        labelFont: labelFont,\n        tickFont: tickFont,\n        rangeFont: rangeFont,\n        layoutWidth: width,\n        layoutHeight: layout.height,\n        domain: domain,\n        translateX: domain.x[0] * width,\n        translateY: layout.height - domain.y[1] * layout.height,\n        pad: pad,\n        canvasWidth: rowContentWidth * c.canvasPixelRatio + 2 * lines.canvasOverdrag,\n        canvasHeight: rowHeight * c.canvasPixelRatio,\n        width: rowContentWidth,\n        height: rowHeight,\n        canvasPixelRatio: c.canvasPixelRatio\n    };\n}\n\nfunction viewModel(state, callbacks, model) {\n\n    var width = model.width;\n    var height = model.height;\n    var dimensions = model.dimensions;\n    var canvasPixelRatio = model.canvasPixelRatio;\n\n    var xScale = function(d) {return width * d / Math.max(1, model.colCount - 1);};\n\n    var unitPad = c.verticalPadding / height;\n    var _unitToPaddedPx = unitToPaddedPx(height, c.verticalPadding);\n\n    var viewModel = {\n        key: model.key,\n        xScale: xScale,\n        model: model,\n        inBrushDrag: false // consider factoring it out and putting it in a centralized global-ish gesture state object\n    };\n\n    var uniqueKeys = {};\n\n    viewModel.dimensions = dimensions.filter(visible).map(function(dimension, i) {\n        var domainToPaddedUnit = domainToPaddedUnitScale(dimension, unitPad);\n        var foundKey = uniqueKeys[dimension.label];\n        uniqueKeys[dimension.label] = (foundKey || 0) + 1;\n        var key = dimension.label + (foundKey ? '__' + foundKey : '');\n        var specifiedConstraint = dimension.constraintrange;\n        var filterRangeSpecified = specifiedConstraint && specifiedConstraint.length;\n        if(filterRangeSpecified && !Array.isArray(specifiedConstraint[0])) {\n            specifiedConstraint = [specifiedConstraint];\n        }\n        var filterRange = filterRangeSpecified ?\n            specifiedConstraint.map(function(d) { return d.map(domainToPaddedUnit); }) :\n            [[0, 1]];\n        var brushMove = function() {\n            var p = viewModel;\n            p.focusLayer && p.focusLayer.render(p.panels, true);\n            var filtersActive = someFiltersActive(p);\n            if(!state.contextShown() && filtersActive) {\n                p.contextLayer && p.contextLayer.render(p.panels, true);\n                state.contextShown(true);\n            } else if(state.contextShown() && !filtersActive) {\n                p.contextLayer && p.contextLayer.render(p.panels, true, true);\n                state.contextShown(false);\n            }\n        };\n\n        var truncatedValues = dimension.values;\n        if(truncatedValues.length > dimension._length) {\n            truncatedValues = truncatedValues.slice(0, dimension._length);\n        }\n\n        var tickvals = dimension.tickvals;\n        var ticktext;\n        function makeTickItem(v, i) { return {val: v, text: ticktext[i]}; }\n        function sortTickItem(a, b) { return a.val - b.val; }\n        if(Array.isArray(tickvals) && tickvals.length) {\n            ticktext = dimension.ticktext;\n\n            // ensure ticktext and tickvals have same length\n            if(!Array.isArray(ticktext) || !ticktext.length) {\n                ticktext = tickvals.map(d3.format(dimension.tickformat));\n            }\n            else if(ticktext.length > tickvals.length) {\n                ticktext = ticktext.slice(0, tickvals.length);\n            }\n            else if(tickvals.length > ticktext.length) {\n                tickvals = tickvals.slice(0, ticktext.length);\n            }\n\n            // check if we need to sort tickvals/ticktext\n            for(var j = 1; j < tickvals.length; j++) {\n                if(tickvals[j] < tickvals[j - 1]) {\n                    var tickItems = tickvals.map(makeTickItem).sort(sortTickItem);\n                    for(var k = 0; k < tickvals.length; k++) {\n                        tickvals[k] = tickItems[k].val;\n                        ticktext[k] = tickItems[k].text;\n                    }\n                    break;\n                }\n            }\n        }\n        else tickvals = undefined;\n\n        return {\n            key: key,\n            label: dimension.label,\n            tickFormat: dimension.tickformat,\n            tickvals: tickvals,\n            ticktext: ticktext,\n            ordinal: !!tickvals,\n            multiselect: dimension.multiselect,\n            xIndex: i,\n            crossfilterDimensionIndex: i,\n            visibleIndex: dimension._index,\n            height: height,\n            values: truncatedValues,\n            paddedUnitValues: truncatedValues.map(domainToPaddedUnit),\n            unitTickvals: tickvals && tickvals.map(domainToPaddedUnit),\n            xScale: xScale,\n            x: xScale(i),\n            canvasX: xScale(i) * canvasPixelRatio,\n            unitToPaddedPx: _unitToPaddedPx,\n            domainScale: domainScale(height, c.verticalPadding, dimension, tickvals, ticktext),\n            ordinalScale: ordinalScale(dimension),\n            parent: viewModel,\n            model: model,\n            brush: brush.makeBrush(\n                state,\n                filterRangeSpecified,\n                filterRange,\n                function() {\n                    state.linePickActive(false);\n                },\n                brushMove,\n                function(f) {\n                    var p = viewModel;\n                    p.focusLayer.render(p.panels, true);\n                    p.pickLayer && p.pickLayer.render(p.panels, true);\n                    state.linePickActive(true);\n                    if(callbacks && callbacks.filterChanged) {\n                        var invScale = domainToPaddedUnit.invert;\n\n                        // update gd.data as if a Plotly.restyle were fired\n                        var newRanges = f.map(function(r) {\n                            return r.map(invScale).sort(Lib.sorterAsc);\n                        }).sort(function(a, b) { return a[0] - b[0]; });\n                        callbacks.filterChanged(p.key, dimension._index, newRanges);\n                    }\n                }\n            )\n        };\n    });\n\n    return viewModel;\n}\n\nfunction styleExtentTexts(selection) {\n    selection\n        .classed(c.cn.axisExtentText, true)\n        .attr('text-anchor', 'middle')\n        .style('cursor', 'default')\n        .style('user-select', 'none');\n}\n\nfunction parcoordsInteractionState() {\n    var linePickActive = true;\n    var contextShown = false;\n    return {\n        linePickActive: function(val) {return arguments.length ? linePickActive = !!val : linePickActive;},\n        contextShown: function(val) {return arguments.length ? contextShown = !!val : contextShown;}\n    };\n}\n\nmodule.exports = function(root, svg, parcoordsLineLayers, styledData, layout, callbacks) {\n\n    var state = parcoordsInteractionState();\n\n    var vm = styledData\n        .filter(function(d) { return unwrap(d).trace.visible; })\n        .map(model.bind(0, layout))\n        .map(viewModel.bind(0, state, callbacks));\n\n    parcoordsLineLayers.each(function(d, i) {\n        return Lib.extendFlat(d, vm[i]);\n    });\n\n    var parcoordsLineLayer = parcoordsLineLayers.selectAll('.gl-canvas')\n        .each(function(d) {\n            // FIXME: figure out how to handle multiple instances\n            d.viewModel = vm[0];\n            d.model = d.viewModel ? d.viewModel.model : null;\n        });\n\n    var lastHovered = null;\n\n    var pickLayer = parcoordsLineLayer.filter(function(d) {return d.pick;});\n\n    // emit hover / unhover event\n    pickLayer\n        .style('pointer-events', 'auto')\n        .on('mousemove', function(d) {\n            if(state.linePickActive() && d.lineLayer && callbacks && callbacks.hover) {\n                var event = d3.event;\n                var cw = this.width;\n                var ch = this.height;\n                var pointer = d3.mouse(this);\n                var x = pointer[0];\n                var y = pointer[1];\n\n                if(x < 0 || y < 0 || x >= cw || y >= ch) {\n                    return;\n                }\n                var pixel = d.lineLayer.readPixel(x, ch - 1 - y);\n                var found = pixel[3] !== 0;\n                // inverse of the calcPickColor in `lines.js`; detailed comment there\n                var curveNumber = found ? pixel[2] + 256 * (pixel[1] + 256 * pixel[0]) : null;\n                var eventData = {\n                    x: x,\n                    y: y,\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    dataIndex: d.model.key,\n                    curveNumber: curveNumber\n                };\n                if(curveNumber !== lastHovered) { // don't unnecessarily repeat the same hit (or miss)\n                    if(found) {\n                        callbacks.hover(eventData);\n                    } else if(callbacks.unhover) {\n                        callbacks.unhover(eventData);\n                    }\n                    lastHovered = curveNumber;\n                }\n            }\n        });\n\n    parcoordsLineLayer\n        .style('opacity', function(d) {return d.pick ? 0.01 : 1;});\n\n    svg.style('background', 'rgba(255, 255, 255, 0)');\n    var parcoordsControlOverlay = svg.selectAll('.' + c.cn.parcoords)\n        .data(vm, keyFun);\n\n    parcoordsControlOverlay.exit().remove();\n\n    parcoordsControlOverlay.enter()\n        .append('g')\n        .classed(c.cn.parcoords, true)\n        .style('shape-rendering', 'crispEdges')\n        .style('pointer-events', 'none');\n\n    parcoordsControlOverlay.attr('transform', function(d) {\n        return 'translate(' + d.model.translateX + ',' + d.model.translateY + ')';\n    });\n\n    var parcoordsControlView = parcoordsControlOverlay.selectAll('.' + c.cn.parcoordsControlView)\n        .data(repeat, keyFun);\n\n    parcoordsControlView.enter()\n        .append('g')\n        .classed(c.cn.parcoordsControlView, true);\n\n    parcoordsControlView.attr('transform', function(d) {\n        return 'translate(' + d.model.pad.l + ',' + d.model.pad.t + ')';\n    });\n\n    var yAxis = parcoordsControlView.selectAll('.' + c.cn.yAxis)\n        .data(function(vm) { return vm.dimensions; }, keyFun);\n\n    function updatePanelLayout(yAxis, vm) {\n        var panels = vm.panels || (vm.panels = []);\n        var dimData = yAxis.data();\n        var panelCount = dimData.length - 1;\n        for(var p = 0; p < panelCount; p++) {\n            var panel = panels[p] || (panels[p] = {});\n            var dim1 = dimData[p];\n            var dim2 = dimData[p + 1];\n            panel.dim1 = dim1;\n            panel.dim2 = dim2;\n            panel.canvasX = dim1.canvasX;\n            panel.panelSizeX = dim2.canvasX - dim1.canvasX;\n            panel.panelSizeY = vm.model.canvasHeight;\n            panel.y = 0;\n            panel.canvasY = 0;\n        }\n    }\n\n    yAxis.enter()\n        .append('g')\n        .classed(c.cn.yAxis, true);\n\n    parcoordsControlView.each(function(vm) {\n        updatePanelLayout(yAxis, vm);\n    });\n\n    parcoordsLineLayer\n        .each(function(d) {\n            if(d.viewModel) {\n                if(d.lineLayer) d.lineLayer.update(d);\n                else d.lineLayer = lineLayerMaker(this, d);\n\n                d.viewModel[d.key] = d.lineLayer;\n                d.lineLayer.render(d.viewModel.panels, !d.context);\n            }\n        });\n\n    yAxis.attr('transform', function(d) {\n        return 'translate(' + d.xScale(d.xIndex) + ', 0)';\n    });\n\n    // drag column for reordering columns\n    yAxis.call(d3.behavior.drag()\n        .origin(function(d) { return d; })\n        .on('drag', function(d) {\n            var p = d.parent;\n            state.linePickActive(false);\n            d.x = Math.max(-c.overdrag, Math.min(d.model.width + c.overdrag, d3.event.x));\n            d.canvasX = d.x * d.model.canvasPixelRatio;\n            yAxis\n                .sort(function(a, b) { return a.x - b.x; })\n                .each(function(dd, i) {\n                    dd.xIndex = i;\n                    dd.x = d === dd ? dd.x : dd.xScale(dd.xIndex);\n                    dd.canvasX = dd.x * dd.model.canvasPixelRatio;\n                });\n\n            updatePanelLayout(yAxis, p);\n\n            yAxis.filter(function(dd) { return Math.abs(d.xIndex - dd.xIndex) !== 0; })\n                .attr('transform', function(d) { return 'translate(' + d.xScale(d.xIndex) + ', 0)'; });\n            d3.select(this).attr('transform', 'translate(' + d.x + ', 0)');\n            yAxis.each(function(dd, i, ii) { if(ii === d.parent.key) p.dimensions[i] = dd; });\n            p.contextLayer && p.contextLayer.render(p.panels, false, !someFiltersActive(p));\n            p.focusLayer.render && p.focusLayer.render(p.panels);\n        })\n        .on('dragend', function(d) {\n            var p = d.parent;\n            d.x = d.xScale(d.xIndex);\n            d.canvasX = d.x * d.model.canvasPixelRatio;\n            updatePanelLayout(yAxis, p);\n            d3.select(this)\n                .attr('transform', function(d) { return 'translate(' + d.x + ', 0)'; });\n            p.contextLayer && p.contextLayer.render(p.panels, false, !someFiltersActive(p));\n            p.focusLayer && p.focusLayer.render(p.panels);\n            p.pickLayer && p.pickLayer.render(p.panels, true);\n            state.linePickActive(true);\n\n            if(callbacks && callbacks.axesMoved) {\n                callbacks.axesMoved(p.key, p.dimensions.map(function(dd) {return dd.crossfilterDimensionIndex;}));\n            }\n        })\n    );\n\n    yAxis.exit()\n        .remove();\n\n    var axisOverlays = yAxis.selectAll('.' + c.cn.axisOverlays)\n        .data(repeat, keyFun);\n\n    axisOverlays.enter()\n        .append('g')\n        .classed(c.cn.axisOverlays, true);\n\n    axisOverlays.selectAll('.' + c.cn.axis).remove();\n\n    var axis = axisOverlays.selectAll('.' + c.cn.axis)\n        .data(repeat, keyFun);\n\n    axis.enter()\n        .append('g')\n        .classed(c.cn.axis, true);\n\n    axis\n        .each(function(d) {\n            var wantedTickCount = d.model.height / d.model.tickDistance;\n            var scale = d.domainScale;\n            var sdom = scale.domain();\n            d3.select(this)\n                .call(d3.svg.axis()\n                    .orient('left')\n                    .tickSize(4)\n                    .outerTickSize(2)\n                    .ticks(wantedTickCount, d.tickFormat) // works for continuous scales only...\n                    .tickValues(d.ordinal ? // and this works for ordinal scales\n                        sdom :\n                        null)\n                    .tickFormat(d.ordinal ? function(d) { return d; } : null)\n                    .scale(scale));\n            Drawing.font(axis.selectAll('text'), d.model.tickFont);\n        });\n\n    axis.selectAll('.domain, .tick>line')\n        .attr('fill', 'none')\n        .attr('stroke', 'black')\n        .attr('stroke-opacity', 0.25)\n        .attr('stroke-width', '1px');\n\n    axis.selectAll('text')\n        .style('text-shadow', '1px 1px 1px #fff, -1px -1px 1px #fff, 1px -1px 1px #fff, -1px 1px 1px #fff')\n        .style('cursor', 'default')\n        .style('user-select', 'none');\n\n    var axisHeading = axisOverlays.selectAll('.' + c.cn.axisHeading)\n        .data(repeat, keyFun);\n\n    axisHeading.enter()\n        .append('g')\n        .classed(c.cn.axisHeading, true);\n\n    var axisTitle = axisHeading.selectAll('.' + c.cn.axisTitle)\n        .data(repeat, keyFun);\n\n    axisTitle.enter()\n        .append('text')\n        .classed(c.cn.axisTitle, true)\n        .attr('text-anchor', 'middle')\n        .style('cursor', 'ew-resize')\n        .style('user-select', 'none')\n        .style('pointer-events', 'auto');\n\n    axisTitle\n        .attr('transform', 'translate(0,' + -c.axisTitleOffset + ')')\n        .text(function(d) { return d.label; })\n        .each(function(d) { Drawing.font(d3.select(this), d.model.labelFont); });\n\n    var axisExtent = axisOverlays.selectAll('.' + c.cn.axisExtent)\n        .data(repeat, keyFun);\n\n    axisExtent.enter()\n        .append('g')\n        .classed(c.cn.axisExtent, true);\n\n    var axisExtentTop = axisExtent.selectAll('.' + c.cn.axisExtentTop)\n        .data(repeat, keyFun);\n\n    axisExtentTop.enter()\n        .append('g')\n        .classed(c.cn.axisExtentTop, true);\n\n    axisExtentTop\n        .attr('transform', 'translate(' + 0 + ',' + -c.axisExtentOffset + ')');\n\n    var axisExtentTopText = axisExtentTop.selectAll('.' + c.cn.axisExtentTopText)\n        .data(repeat, keyFun);\n\n    function extremeText(d, isTop) {\n        if(d.ordinal) return '';\n        var domain = d.domainScale.domain();\n        return d3.format(d.tickFormat)(domain[isTop ? domain.length - 1 : 0]);\n    }\n\n    axisExtentTopText.enter()\n        .append('text')\n        .classed(c.cn.axisExtentTopText, true)\n        .call(styleExtentTexts);\n\n    axisExtentTopText\n        .text(function(d) { return extremeText(d, true); })\n        .each(function(d) { Drawing.font(d3.select(this), d.model.rangeFont); });\n\n    var axisExtentBottom = axisExtent.selectAll('.' + c.cn.axisExtentBottom)\n        .data(repeat, keyFun);\n\n    axisExtentBottom.enter()\n        .append('g')\n        .classed(c.cn.axisExtentBottom, true);\n\n    axisExtentBottom\n        .attr('transform', function(d) {\n            return 'translate(' + 0 + ',' + (d.model.height + c.axisExtentOffset) + ')';\n        });\n\n    var axisExtentBottomText = axisExtentBottom.selectAll('.' + c.cn.axisExtentBottomText)\n        .data(repeat, keyFun);\n\n    axisExtentBottomText.enter()\n        .append('text')\n        .classed(c.cn.axisExtentBottomText, true)\n        .attr('dy', '0.75em')\n        .call(styleExtentTexts);\n\n    axisExtentBottomText\n        .text(function(d) { return extremeText(d); })\n        .each(function(d) { Drawing.font(d3.select(this), d.model.rangeFont); });\n\n    brush.ensureAxisBrush(axisOverlays);\n};\n",null]}