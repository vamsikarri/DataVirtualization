{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/carpet/axis_attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/carpet/axis_attributes.js","mtime":1529418310704},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nmodule.exports = {\n    color: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets default for all colors associated with this axis',\n            'all at once: line, font, tick, and grid colors.',\n            'Grid color is lightened by blending this with the plot background',\n            'Individual pieces can override this.'\n        ].join(' ')\n    },\n    smoothing: {\n        valType: 'number',\n        dflt: 1,\n        min: 0,\n        max: 1.3,\n        role: 'info',\n        editType: 'calc'\n    },\n    title: {\n        valType: 'string',\n        role: 'info',\n        editType: 'calc',\n        description: 'Sets the title of this axis.'\n    },\n    titlefont: fontAttrs({\n        editType: 'calc',\n        description: [\n            'Sets this axis\\' title font.'\n        ].join(' ')\n    }),\n    titleoffset: {\n        valType: 'number',\n        role: 'info',\n        dflt: 10,\n        editType: 'calc',\n        description: [\n            'An additional amount by which to offset the title from the tick',\n            'labels, given in pixels'\n        ].join(' '),\n    },\n    type: {\n        valType: 'enumerated',\n        // '-' means we haven't yet run autotype or couldn't find any data\n        // it gets turned into linear in gd._fullLayout but not copied back\n        // to gd.data like the others are.\n        values: ['-', 'linear', 'date', 'category'],\n        dflt: '-',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the axis type.',\n            'By default, plotly attempts to determined the axis type',\n            'by looking into the data of the traces that referenced',\n            'the axis in question.'\n        ].join(' ')\n    },\n    autorange: {\n        valType: 'enumerated',\n        values: [true, false, 'reversed'],\n        dflt: true,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not the range of this axis is',\n            'computed in relation to the input data.',\n            'See `rangemode` for more info.',\n            'If `range` is provided, then `autorange` is set to *false*.'\n        ].join(' ')\n    },\n    rangemode: {\n        valType: 'enumerated',\n        values: ['normal', 'tozero', 'nonnegative'],\n        dflt: 'normal',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data.',\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.'\n        ].join(' ')\n    },\n    range: {\n        valType: 'info_array',\n        role: 'info',\n        editType: 'calc',\n        items: [\n            {valType: 'any', editType: 'calc'},\n            {valType: 'any', editType: 'calc'}\n        ],\n        description: [\n            'Sets the range of this axis.',\n            'If the axis `type` is *log*, then you must take the log of your',\n            'desired range (e.g. to set the range from 1 to 100,',\n            'set the range from 0 to 2).',\n            'If the axis `type` is *date*, it should be date strings,',\n            'like date data, though Date objects and unix milliseconds',\n            'will be accepted and converted to strings.',\n            'If the axis `type` is *category*, it should be numbers,',\n            'using the scale where each category is assigned a serial',\n            'number from zero in the order it appears.'\n        ].join(' ')\n    },\n\n    fixedrange: {\n        valType: 'boolean',\n        dflt: false,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Determines whether or not this axis is zoom-able.',\n            'If true, then zoom is disabled.'\n        ].join(' ')\n    },\n    cheatertype: {\n        valType: 'enumerated',\n        values: ['index', 'value'],\n        dflt: 'value',\n        role: 'info',\n        editType: 'calc'\n    },\n    tickmode: {\n        valType: 'enumerated',\n        values: ['linear', 'array'],\n        dflt: 'array',\n        role: 'info',\n        editType: 'calc'\n    },\n    nticks: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Specifies the maximum number of ticks for the particular axis.',\n            'The actual number of ticks will be chosen automatically to be',\n            'less than or equal to `nticks`.',\n            'Has an effect only if `tickmode` is set to *auto*.'\n        ].join(' ')\n    },\n    tickvals: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the values at which ticks on this axis appear.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `ticktext`.'\n        ].join(' ')\n    },\n    ticktext: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the text displayed at the ticks position via `tickvals`.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `tickvals`.'\n        ].join(' ')\n    },\n    showticklabels: {\n        valType: 'enumerated',\n        values: ['start', 'end', 'both', 'none'],\n        dflt: 'start',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether axis labels are drawn on the low side,',\n            'the high side, both, or neither side of the axis.'\n        ].join(' ')\n    },\n    tickfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the tick font.'\n    }),\n    tickangle: {\n        valType: 'angle',\n        dflt: 'auto',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the angle of the tick labels with respect to the horizontal.',\n            'For example, a `tickangle` of -90 draws the tick labels',\n            'vertically.'\n        ].join(' ')\n    },\n    tickprefix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a tick label prefix.'\n    },\n    showtickprefix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *all*, all tick labels are displayed with a prefix.',\n            'If *first*, only the first tick is displayed with a prefix.',\n            'If *last*, only the last tick is displayed with a suffix.',\n            'If *none*, tick prefixes are hidden.'\n        ].join(' ')\n    },\n    ticksuffix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a tick label suffix.'\n    },\n    showticksuffix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        role: 'style',\n        editType: 'calc',\n        description: 'Same as `showtickprefix` but for tick suffixes.'\n    },\n    showexponent: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *all*, all exponents are shown besides their significands.',\n            'If *first*, only the exponent of the first tick is shown.',\n            'If *last*, only the exponent of the last tick is shown.',\n            'If *none*, no exponents appear.'\n        ].join(' ')\n    },\n    exponentformat: {\n        valType: 'enumerated',\n        values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n        dflt: 'B',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines a formatting rule for the tick exponents.',\n            'For example, consider the number 1,000,000,000.',\n            'If *none*, it appears as 1,000,000,000.',\n            'If *e*, 1e+9.',\n            'If *E*, 1E+9.',\n            'If *power*, 1x10^9 (with 9 in a super script).',\n            'If *SI*, 1G.',\n            'If *B*, 1B.'\n        ].join(' ')\n    },\n    separatethousands: {\n        valType: 'boolean',\n        dflt: false,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If \"true\", even 4-digit integers are separated'\n        ].join(' ')\n    },\n    tickformat: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Sets the tick label formatting rule using d3 formatting mini-languages',\n            'which are very similar to those in Python. For numbers, see:',\n            'https://github.com/d3/d3-format/blob/master/README.md#locale_format',\n            'And for dates see:',\n            'https://github.com/d3/d3-time-format/blob/master/README.md#locale_format',\n            'We add one item to d3\\'s date formatter: *%{n}f* for fractional seconds',\n            'with n digits. For example, *2016-10-13 09:15:23.456* with tickformat',\n            '*%H~%M~%S.%2f* would display *09~15~23.46*'\n        ].join(' ')\n    },\n    tickformatstops: overrideAll(axesAttrs.tickformatstops, 'calc', 'from-root'),\n    categoryorder: {\n        valType: 'enumerated',\n        values: [\n            'trace', 'category ascending', 'category descending', 'array'\n            /* , 'value ascending', 'value descending'*/ // value ascending / descending to be implemented later\n        ],\n        dflt: 'trace',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Specifies the ordering logic for the case of categorical variables.',\n            'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n            'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n            'the alphanumerical order of the category names.',\n            /* 'Set `categoryorder` to *value ascending* or *value descending* if order should be determined by the',\n            'numerical order of the values.',*/ // // value ascending / descending to be implemented later\n            'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n            'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n            'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'\n        ].join(' ')\n    },\n    categoryarray: {\n        valType: 'data_array',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the order in which categories on this axis appear.',\n            'Only has an effect if `categoryorder` is set to *array*.',\n            'Used with `categoryorder`.'\n        ].join(' ')\n    },\n    labelpadding: {\n        valType: 'integer',\n        role: 'style',\n        dflt: 10,\n        editType: 'calc',\n        description: 'Extra padding between label and the axis'\n    },\n    labelprefix: {\n        valType: 'string',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a axis label prefix.'\n    },\n    labelsuffix: {\n        valType: 'string',\n        dflt: '',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets a axis label suffix.'\n    },\n    // lines and grids\n    showline: {\n        valType: 'boolean',\n        dflt: false,\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line bounding this axis is drawn.'\n        ].join(' ')\n    },\n    linecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the axis line color.'\n    },\n    linewidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    gridcolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the axis line color.'\n    },\n    gridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    showgrid: {\n        valType: 'boolean',\n        role: 'style',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not grid lines are drawn.',\n            'If *true*, the grid lines are drawn at every tick mark.'\n        ].join(' ')\n    },\n    minorgridcount: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'calc',\n        description: 'Sets the number of minor grid ticks per major grid tick'\n    },\n    minorgridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the grid lines.'\n    },\n    minorgridcolor: {\n        valType: 'color',\n        dflt: colorAttrs.lightLine,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the color of the grid lines.'\n    },\n    startline: {\n        valType: 'boolean',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line is drawn at along the starting value',\n            'of this axis.',\n            'If *true*, the start line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    startlinecolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the line color of the start line.'\n    },\n    startlinewidth: {\n        valType: 'number',\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the start line.'\n    },\n    endline: {\n        valType: 'boolean',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line is drawn at along the final value',\n            'of this axis.',\n            'If *true*, the end line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    endlinewidth: {\n        valType: 'number',\n        dflt: 1,\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the width (in px) of the end line.'\n    },\n    endlinecolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'calc',\n        description: 'Sets the line color of the end line.'\n    },\n    tick0: {\n        valType: 'number',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'calc',\n        description: 'The starting index of grid lines along the axis'\n    },\n    dtick: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        role: 'info',\n        editType: 'calc',\n        description: 'The stride between grid lines along the axis'\n    },\n    arraytick0: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'calc',\n        description: 'The starting index of grid lines along the axis'\n    },\n    arraydtick: {\n        valType: 'integer',\n        min: 1,\n        dflt: 1,\n        role: 'info',\n        editType: 'calc',\n        description: 'The stride between grid lines along the axis'\n    },\n    editType: 'calc'\n};\n",null]}