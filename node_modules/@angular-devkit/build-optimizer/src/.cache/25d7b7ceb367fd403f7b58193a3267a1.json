{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/lib/line.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/lib/line.js","mtime":1529418308656},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createLines\r\n\r\nvar createBuffer = require('gl-buffer')\r\nvar createShader = require('gl-shader')\r\n\r\nvar shaders = require('./shaders')\r\n\r\nfunction Lines(plot, vbo, shader) {\r\n  this.plot   = plot\r\n  this.vbo    = vbo\r\n  this.shader = shader\r\n}\r\n\r\nvar proto = Lines.prototype\r\n\r\nproto.bind = function() {\r\n  var shader = this.shader\r\n  this.vbo.bind()\r\n  this.shader.bind()\r\n  shader.attributes.coord.pointer()\r\n  shader.uniforms.screenBox = this.plot.screenBox\r\n}\r\n\r\nproto.drawLine = (function() {\r\n  var start = [0,0]\r\n  var end   = [0,0]\r\n  return function(startX, startY, endX, endY, width, color) {\r\n    var plot       = this.plot\r\n    var shader     = this.shader\r\n    var gl         = plot.gl\r\n\r\n    start[0] = startX\r\n    start[1] = startY\r\n    end[0]   = endX\r\n    end[1]   = endY\r\n\r\n    shader.uniforms.start  = start\r\n    shader.uniforms.end    = end\r\n    shader.uniforms.width  = width * plot.pixelRatio\r\n    shader.uniforms.color  = color\r\n\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\r\n  }\r\n}())\r\n\r\nproto.dispose = function() {\r\n  this.vbo.dispose()\r\n  this.shader.dispose()\r\n}\r\n\r\nfunction createLines(plot) {\r\n  var gl  = plot.gl\r\n  var vbo = createBuffer(gl, [\r\n    -1,-1,\r\n    -1,1,\r\n    1,-1,\r\n    1,1])\r\n  var shader  = createShader(gl, shaders.lineVert, shaders.lineFrag)\r\n  var lines   = new Lines(plot, vbo, shader)\r\n  return lines\r\n}\r\n",null]}