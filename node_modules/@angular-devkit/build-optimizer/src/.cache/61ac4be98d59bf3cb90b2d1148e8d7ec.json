{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/polar/polar.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/polar/polar.js","mtime":1529418310696},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Plots = require('../plots');\nvar Axes = require('../cartesian/axes');\nvar doAutoRange = require('../cartesian/autorange').doAutoRange;\nvar dragElement = require('../../components/dragelement');\nvar dragBox = require('../cartesian/dragbox');\nvar Fx = require('../../components/fx');\nvar Titles = require('../../components/titles');\nvar prepSelect = require('../cartesian/select').prepSelect;\nvar clearSelect = require('../cartesian/select').clearSelect;\nvar setCursor = require('../../lib/setcursor');\n\nvar MID_SHIFT = require('../../constants/alignment').MID_SHIFT;\n\nvar _ = Lib._;\nvar deg2rad = Lib.deg2rad;\nvar rad2deg = Lib.rad2deg;\nvar wrap360 = Lib.wrap360;\nvar wrap180 = Lib.wrap180;\n\nvar setConvertAngular = require('./helpers').setConvertAngular;\nvar constants = require('./constants');\n\nfunction Polar(gd, id) {\n    this.id = id;\n    this.gd = gd;\n\n    this._hasClipOnAxisFalse = null;\n    this.traceHash = {};\n    this.layers = {};\n    this.clipPaths = {};\n    this.clipIds = {};\n    this.viewInitial = {};\n\n    var fullLayout = gd._fullLayout;\n    var clipIdBase = 'clip' + fullLayout._uid + id;\n\n    this.clipIds.circle = clipIdBase + '-circle';\n    this.clipPaths.circle = fullLayout._clips.append('clipPath')\n        .attr('id', this.clipIds.circle);\n    this.clipPaths.circle.append('path');\n\n    this.framework = fullLayout._polarlayer.append('g')\n        .attr('class', id);\n\n    // unfortunately, we have to keep track of some axis tick settings\n    // so that we don't have to call Axes.doTicksSingle with its special redraw flag\n    this.radialTickLayout = null;\n    this.angularTickLayout = null;\n}\n\nvar proto = Polar.prototype;\n\nmodule.exports = function createPolar(gd, id) {\n    return new Polar(gd, id);\n};\n\nproto.plot = function(polarCalcData, fullLayout) {\n    var _this = this;\n    var polarLayout = fullLayout[_this.id];\n\n    _this._hasClipOnAxisFalse = false;\n    for(var i = 0; i < polarCalcData.length; i++) {\n        var trace = polarCalcData[i][0].trace;\n        if(trace.cliponaxis === false) {\n            _this._hasClipOnAxisFalse = true;\n            break;\n        }\n    }\n\n    _this.updateLayers(fullLayout, polarLayout);\n    _this.updateLayout(fullLayout, polarLayout);\n    Plots.generalUpdatePerTraceModule(_this.gd, _this, polarCalcData, polarLayout);\n    _this.updateFx(fullLayout, polarLayout);\n};\n\nproto.updateLayers = function(fullLayout, polarLayout) {\n    var _this = this;\n    var layers = _this.layers;\n    var radialLayout = polarLayout.radialaxis;\n    var angularLayout = polarLayout.angularaxis;\n    var layerNames = constants.layerNames;\n\n    var frontPlotIndex = layerNames.indexOf('frontplot');\n    var layerData = layerNames.slice(0, frontPlotIndex);\n    var isAngularAxisBelowTraces = angularLayout.layer === 'below traces';\n    var isRadialAxisBelowTraces = radialLayout.layer === 'below traces';\n\n    if(isAngularAxisBelowTraces) layerData.push('angular-axis');\n    if(isRadialAxisBelowTraces) layerData.push('radial-axis');\n    if(isAngularAxisBelowTraces) layerData.push('angular-line');\n    if(isRadialAxisBelowTraces) layerData.push('radial-line');\n\n    layerData.push('frontplot');\n\n    if(!isAngularAxisBelowTraces) layerData.push('angular-axis');\n    if(!isRadialAxisBelowTraces) layerData.push('radial-axis');\n    if(!isAngularAxisBelowTraces) layerData.push('angular-line');\n    if(!isRadialAxisBelowTraces) layerData.push('radial-line');\n\n    var join = _this.framework.selectAll('.polarsublayer')\n        .data(layerData, String);\n\n    join.enter().append('g')\n        .attr('class', function(d) { return 'polarsublayer ' + d;})\n        .each(function(d) {\n            var sel = layers[d] = d3.select(this);\n\n            switch(d) {\n                case 'frontplot':\n                    sel.append('g').classed('scatterlayer', true);\n                    break;\n                case 'backplot':\n                    sel.append('g').classed('maplayer', true);\n                    break;\n                case 'plotbg':\n                    layers.bgcircle = sel.append('path');\n                    break;\n                case 'radial-grid':\n                    sel.style('fill', 'none');\n                    sel.append('g').classed('x', 1);\n                    break;\n                case 'angular-grid':\n                    sel.style('fill', 'none');\n                    sel.append('g').classed('angular', 1);\n                    break;\n                case 'radial-line':\n                    sel.append('line').style('fill', 'none');\n                    break;\n                case 'angular-line':\n                    sel.append('path').style('fill', 'none');\n                    break;\n            }\n        });\n\n    join.order();\n};\n\nproto.updateLayout = function(fullLayout, polarLayout) {\n    var _this = this;\n    var layers = _this.layers;\n    var gs = fullLayout._size;\n\n    // layout domains\n    var xDomain = polarLayout.domain.x;\n    var yDomain = polarLayout.domain.y;\n    // offsets from paper edge to layout domain box\n    _this.xOffset = gs.l + gs.w * xDomain[0];\n    _this.yOffset = gs.t + gs.h * (1 - yDomain[1]);\n    // lengths of the layout domain box\n    var xLength = _this.xLength = gs.w * (xDomain[1] - xDomain[0]);\n    var yLength = _this.yLength = gs.h * (yDomain[1] - yDomain[0]);\n    // sector to plot\n    var sector = _this.sector = polarLayout.sector;\n    var sectorBBox = _this.sectorBBox = computeSectorBBox(sector);\n    var dxSectorBBox = sectorBBox[2] - sectorBBox[0];\n    var dySectorBBox = sectorBBox[3] - sectorBBox[1];\n    // aspect ratios\n    var arDomain = yLength / xLength;\n    var arSector = Math.abs(dySectorBBox / dxSectorBBox);\n    // actual lengths and domains of subplot box\n    var xLength2, yLength2;\n    var xDomain2, yDomain2;\n    var gap;\n    if(arDomain > arSector) {\n        xLength2 = xLength;\n        yLength2 = xLength * arSector;\n        gap = (yLength - yLength2) / gs.h / 2;\n        xDomain2 = [xDomain[0], xDomain[1]];\n        yDomain2 = [yDomain[0] + gap, yDomain[1] - gap];\n    } else {\n        xLength2 = yLength / arSector;\n        yLength2 = yLength;\n        gap = (xLength - xLength2) / gs.w / 2;\n        xDomain2 = [xDomain[0] + gap, xDomain[1] - gap];\n        yDomain2 = [yDomain[0], yDomain[1]];\n    }\n    _this.xLength2 = xLength2;\n    _this.yLength2 = yLength2;\n    _this.xDomain2 = xDomain2;\n    _this.yDomain2 = yDomain2;\n    // actual offsets from paper edge to the subplot box top-left corner\n    var xOffset2 = _this.xOffset2 = gs.l + gs.w * xDomain2[0];\n    var yOffset2 = _this.yOffset2 = gs.t + gs.h * (1 - yDomain2[1]);\n    // circle radius in px\n    var radius = _this.radius = xLength2 / dxSectorBBox;\n    // circle center position in px\n    var cx = _this.cx = xOffset2 - radius * sectorBBox[0];\n    var cy = _this.cy = yOffset2 + radius * sectorBBox[3];\n    // circle center in the coordinate system of plot area\n    var cxx = _this.cxx = cx - xOffset2;\n    var cyy = _this.cyy = cy - yOffset2;\n\n    _this.updateRadialAxis(fullLayout, polarLayout);\n    _this.updateRadialAxisTitle(fullLayout, polarLayout);\n    _this.updateAngularAxis(fullLayout, polarLayout);\n\n    var radialRange = _this.radialAxis.range;\n    var rSpan = radialRange[1] - radialRange[0];\n\n    var xaxis = _this.xaxis = {\n        type: 'linear',\n        _id: 'x',\n        range: [sectorBBox[0] * rSpan, sectorBBox[2] * rSpan],\n        domain: xDomain2\n    };\n    Axes.setConvert(xaxis, fullLayout);\n    xaxis.setScale();\n\n    var yaxis = _this.yaxis = {\n        type: 'linear',\n        _id: 'y',\n        range: [sectorBBox[1] * rSpan, sectorBBox[3] * rSpan],\n        domain: yDomain2\n    };\n    Axes.setConvert(yaxis, fullLayout);\n    yaxis.setScale();\n\n    xaxis.isPtWithinRange = function(d) { return _this.isPtWithinSector(d); };\n    yaxis.isPtWithinRange = function() { return true; };\n\n    layers.frontplot\n        .attr('transform', strTranslate(xOffset2, yOffset2))\n        .call(Drawing.setClipUrl, _this._hasClipOnAxisFalse ? null : _this.clipIds.circle);\n\n    layers.bgcircle.attr({\n        d: pathSectorClosed(radius, sector),\n        transform: strTranslate(cx, cy)\n    })\n    .call(Color.fill, polarLayout.bgcolor);\n\n    _this.clipPaths.circle.select('path')\n        .attr('d', pathSectorClosed(radius, sector))\n        .attr('transform', strTranslate(cxx, cyy));\n\n    // remove crispEdges - all the off-square angles in polar plots\n    // make these counterproductive.\n    _this.framework.selectAll('.crisp').classed('crisp', 0);\n};\n\nproto.updateRadialAxis = function(fullLayout, polarLayout) {\n    var _this = this;\n    var gd = _this.gd;\n    var layers = _this.layers;\n    var radius = _this.radius;\n    var cx = _this.cx;\n    var cy = _this.cy;\n    var gs = fullLayout._size;\n    var radialLayout = polarLayout.radialaxis;\n    var sector = polarLayout.sector;\n    var a0 = wrap360(sector[0]);\n\n    _this.fillViewInitialKey('radialaxis.angle', radialLayout.angle);\n\n    var ax = _this.radialAxis = Lib.extendFlat({}, radialLayout, {\n        _axislayer: layers['radial-axis'],\n        _gridlayer: layers['radial-grid'],\n\n        // make this an 'x' axis to make positioning (especially rotation) easier\n        _id: 'x',\n        _pos: 0,\n\n        // convert to 'x' axis equivalent\n        side: {counterclockwise: 'top', clockwise: 'bottom'}[radialLayout.side],\n\n        // spans length 1 radius\n        domain: [0, radius / gs.w],\n\n        // to get _boundingBox computation right when showticklabels is false\n        anchor: 'free',\n        position: 0,\n\n        // dummy truthy value to make Axes.doTicksSingle draw the grid\n        _counteraxis: true,\n\n        // don't use automargins routine for labels\n        automargin: false\n    });\n\n    setScale(ax, radialLayout, fullLayout);\n    doAutoRange(ax);\n    radialLayout.range = ax.range.slice();\n    radialLayout._input.range = ax.range.slice();\n    _this.fillViewInitialKey('radialaxis.range', ax.range.slice());\n\n    // rotate auto tick labels by 180 if in quadrant II and III to make them\n    // readable from left-to-right\n    //\n    // TODO try moving deeper in doTicksSingle for better results?\n    if(ax.tickangle === 'auto' && (a0 > 90 && a0 <= 270)) {\n        ax.tickangle = 180;\n    }\n\n    // easier to set rotate angle with custom translate function\n    ax._transfn = function(d) {\n        return 'translate(' + ax.l2p(d.x) + ',0)';\n    };\n\n    // set special grid path function\n    ax._gridpath = function(d) {\n        var r = ax.r2p(d.x);\n        return pathSector(r, sector);\n    };\n\n    var newTickLayout = strTickLayout(radialLayout);\n    if(_this.radialTickLayout !== newTickLayout) {\n        layers['radial-axis'].selectAll('.xtick').remove();\n        _this.radialTickLayout = newTickLayout;\n    }\n\n    Axes.doTicksSingle(gd, ax, true);\n\n    updateElement(layers['radial-axis'], radialLayout.showticklabels || radialLayout.ticks, {\n        transform: strTranslate(cx, cy) + strRotate(-radialLayout.angle)\n    });\n\n    // move all grid paths to about circle center,\n    // undo individual grid lines translations\n    updateElement(layers['radial-grid'], radialLayout.showgrid, {\n        transform: strTranslate(cx, cy)\n    })\n    .selectAll('path').attr('transform', null);\n\n    updateElement(layers['radial-line'].select('line'), radialLayout.showline, {\n        x1: 0,\n        y1: 0,\n        x2: radius,\n        y2: 0,\n        transform: strTranslate(cx, cy) + strRotate(-radialLayout.angle)\n    })\n    .attr('stroke-width', radialLayout.linewidth)\n    .call(Color.stroke, radialLayout.linecolor);\n};\n\nproto.updateRadialAxisTitle = function(fullLayout, polarLayout, _angle) {\n    var _this = this;\n    var gd = _this.gd;\n    var radius = _this.radius;\n    var cx = _this.cx;\n    var cy = _this.cy;\n    var radialLayout = polarLayout.radialaxis;\n    var titleClass = _this.id + 'title';\n\n    var angle = _angle !== undefined ? _angle : radialLayout.angle;\n    var angleRad = deg2rad(angle);\n    var cosa = Math.cos(angleRad);\n    var sina = Math.sin(angleRad);\n\n    var pad = 0;\n    if(radialLayout.title) {\n        var h = Drawing.bBox(_this.layers['radial-axis'].node()).height;\n        var ts = radialLayout.titlefont.size;\n        pad = radialLayout.side === 'counterclockwise' ?\n            -h - ts * 0.4 :\n            h + ts * 0.8;\n    }\n\n    _this.layers['radial-axis-title'] = Titles.draw(gd, titleClass, {\n        propContainer: radialLayout,\n        propName: _this.id + '.radialaxis.title',\n        placeholder: _(gd, 'Click to enter radial axis title'),\n        attributes: {\n            x: cx + (radius / 2) * cosa + pad * sina,\n            y: cy - (radius / 2) * sina + pad * cosa,\n            'text-anchor': 'middle'\n        },\n        transform: {rotate: -angle}\n    });\n};\n\nproto.updateAngularAxis = function(fullLayout, polarLayout) {\n    var _this = this;\n    var gd = _this.gd;\n    var layers = _this.layers;\n    var radius = _this.radius;\n    var cx = _this.cx;\n    var cy = _this.cy;\n    var angularLayout = polarLayout.angularaxis;\n    var sector = polarLayout.sector;\n    var sectorInRad = sector.map(deg2rad);\n\n    _this.fillViewInitialKey('angularaxis.rotation', angularLayout.rotation);\n\n    var ax = _this.angularAxis = Lib.extendFlat({}, angularLayout, {\n        _axislayer: layers['angular-axis'],\n        _gridlayer: layers['angular-grid'],\n\n        // angular axes need *special* logic\n        _id: 'angular',\n        _pos: 0,\n        side: 'right',\n\n        // to get auto nticks right\n        domain: [0, Math.PI],\n\n        // to get _boundingBox computation right when showticklabels is false\n        anchor: 'free',\n        position: 0,\n\n        // dummy truthy value to make Axes.doTicksSingle draw the grid\n        _counteraxis: true,\n\n        // don't use automargins routine for labels\n        automargin: false,\n\n        // don't pass through autorange logic\n        autorange: false\n    });\n\n    // Set the angular range in degrees to make auto-tick computation cleaner,\n    // changing rotation/direction should not affect the angular tick labels.\n    if(ax.type === 'linear') {\n        if(isFullCircle(sector)) {\n            ax.range = sector.slice();\n        } else {\n            ax.range = sectorInRad.map(ax.unTransformRad).map(rad2deg);\n        }\n\n        // run rad2deg on tick0 and ditck for thetaunit: 'radians' axes\n        if(ax.thetaunit === 'radians') {\n            ax.tick0 = rad2deg(ax.tick0);\n            ax.dtick = rad2deg(ax.dtick);\n        }\n\n    }\n    // Use tickval filter for category axes instead of tweaking\n    // the range w.r.t sector, so that sectors that cross 360 can\n    // show all their ticks.\n    else if(ax.type === 'category') {\n        var period = angularLayout.period ?\n            Math.max(angularLayout.period, angularLayout._categories.length) :\n            angularLayout._categories.length;\n\n        ax.range = [0, period];\n\n        ax._tickFilter = function(d) {\n            return _this.isPtWithinSector({\n                r: _this.radialAxis.range[1],\n                rad: ax.c2rad(d.x)\n            });\n        };\n    }\n\n    setScale(ax, angularLayout, fullLayout);\n\n    // wrapper around c2rad from setConvertAngular\n    // note that linear ranges are always set in degrees for Axes.doTicksSingle\n    function c2rad(d) {\n        return ax.c2rad(d.x, 'degrees');\n    }\n\n    // (x,y) at max radius\n    function rad2xy(rad) {\n        return [radius * Math.cos(rad), radius * Math.sin(rad)];\n    }\n\n    ax._transfn = function(d) {\n        var rad = c2rad(d);\n        var xy = rad2xy(rad);\n        var out = strTranslate(cx + xy[0], cy - xy[1]);\n\n        // must also rotate ticks, but don't rotate labels and grid lines\n        var sel = d3.select(this);\n        if(sel && sel.node() && sel.classed('ticks')) {\n            out += strRotate(-rad2deg(rad));\n        }\n\n        return out;\n    };\n\n    ax._gridpath = function(d) {\n        var rad = c2rad(d);\n        var xy = rad2xy(rad);\n        return 'M0,0L' + (-xy[0]) + ',' + xy[1];\n    };\n\n    var offset4fontsize = (angularLayout.ticks !== 'outside' ? 0.7 : 0.5);\n\n    ax._labelx = function(d) {\n        var rad = c2rad(d);\n        var labelStandoff = ax._labelStandoff;\n        var pad = ax._pad;\n\n        var offset4tx = signSin(rad) === 0 ?\n            0 :\n            Math.cos(rad) * (labelStandoff + pad + offset4fontsize * d.fontSize);\n        var offset4tick = signCos(rad) * (d.dx + labelStandoff + pad);\n\n        return offset4tx + offset4tick;\n    };\n\n    ax._labely = function(d) {\n        var rad = c2rad(d);\n        var labelStandoff = ax._labelStandoff;\n        var labelShift = ax._labelShift;\n        var pad = ax._pad;\n\n        var offset4tx = d.dy + d.fontSize * MID_SHIFT - labelShift;\n        var offset4tick = -Math.sin(rad) * (labelStandoff + pad + offset4fontsize * d.fontSize);\n\n        return offset4tx + offset4tick;\n    };\n\n    ax._labelanchor = function(angle, d) {\n        var rad = c2rad(d);\n        return signSin(rad) === 0 ?\n            (signCos(rad) > 0 ? 'start' : 'end') :\n            'middle';\n    };\n\n    var newTickLayout = strTickLayout(angularLayout);\n    if(_this.angularTickLayout !== newTickLayout) {\n        layers['angular-axis'].selectAll('.angulartick').remove();\n        _this.angularTickLayout = newTickLayout;\n    }\n\n    Axes.doTicksSingle(gd, ax, true);\n\n    updateElement(layers['angular-line'].select('path'), angularLayout.showline, {\n        d: pathSectorClosed(radius, sector),\n        transform: strTranslate(cx, cy)\n    })\n    .attr('stroke-width', angularLayout.linewidth)\n    .call(Color.stroke, angularLayout.linecolor);\n};\n\nproto.updateFx = function(fullLayout, polarLayout) {\n    if(!this.gd._context.staticPlot) {\n        this.updateAngularDrag(fullLayout, polarLayout);\n        this.updateRadialDrag(fullLayout, polarLayout);\n        this.updateMainDrag(fullLayout, polarLayout);\n    }\n};\n\nproto.updateMainDrag = function(fullLayout, polarLayout) {\n    var _this = this;\n    var gd = _this.gd;\n    var layers = _this.layers;\n    var zoomlayer = fullLayout._zoomlayer;\n    var MINZOOM = constants.MINZOOM;\n    var OFFEDGE = constants.OFFEDGE;\n    var radius = _this.radius;\n    var cx = _this.cx;\n    var cy = _this.cy;\n    var cxx = _this.cxx;\n    var cyy = _this.cyy;\n    var sector = polarLayout.sector;\n\n    var mainDrag = dragBox.makeDragger(layers, 'path', 'maindrag', 'crosshair');\n\n    d3.select(mainDrag)\n        .attr('d', pathSectorClosed(radius, sector))\n        .attr('transform', strTranslate(cx, cy));\n\n    var dragOpts = {\n        element: mainDrag,\n        gd: gd,\n        subplot: _this.id,\n        plotinfo: {\n            xaxis: _this.xaxis,\n            yaxis: _this.yaxis\n        },\n        xaxes: [_this.xaxis],\n        yaxes: [_this.yaxis]\n    };\n\n    // mouse px position at drag start (0), move (1)\n    var x0, y0;\n    // radial distance from circle center at drag start (0), move (1)\n    var r0, r1;\n    // zoombox persistent quantities\n    var path0, dimmed, lum;\n    // zoombox, corners elements\n    var zb, corners;\n\n    function xy2r(x, y) {\n        var xx = x - cxx;\n        var yy = y - cyy;\n        return Math.sqrt(xx * xx + yy * yy);\n    }\n\n    function xy2a(x, y) {\n        return Math.atan2(cyy - y, x - cxx);\n    }\n\n    function ra2xy(r, a) {\n        return [r * Math.cos(a), r * Math.sin(-a)];\n    }\n\n    function pathCorner(r, a) {\n        var clen = constants.cornerLen;\n        var chw = constants.cornerHalfWidth;\n\n        if(r === 0) return pathSectorClosed(2 * chw, sector);\n\n        var da = clen / r / 2;\n        var am = a - da;\n        var ap = a + da;\n        var rb = Math.max(0, Math.min(r, radius));\n        var rm = rb - chw;\n        var rp = rb + chw;\n\n        return 'M' + ra2xy(rm, am) +\n            'A' + [rm, rm] + ' 0,0,0 ' + ra2xy(rm, ap) +\n            'L' + ra2xy(rp, ap) +\n            'A' + [rp, rp] + ' 0,0,1 ' + ra2xy(rp, am) +\n            'Z';\n    }\n\n    function zoomPrep() {\n        r0 = null;\n        r1 = null;\n        path0 = pathSectorClosed(radius, sector);\n        dimmed = false;\n\n        var polarLayoutNow = gd._fullLayout[_this.id];\n        lum = tinycolor(polarLayoutNow.bgcolor).getLuminance();\n\n        zb = dragBox.makeZoombox(zoomlayer, lum, cx, cy, path0);\n        zb.attr('fill-rule', 'evenodd');\n        corners = dragBox.makeCorners(zoomlayer, cx, cy);\n        clearSelect(zoomlayer);\n    }\n\n    function zoomMove(dx, dy) {\n        var x1 = x0 + dx;\n        var y1 = y0 + dy;\n        var rr0 = xy2r(x0, y0);\n        var rr1 = Math.min(xy2r(x1, y1), radius);\n        var a0 = xy2a(x0, y0);\n        var a1 = xy2a(x1, y1);\n\n        // starting or ending drag near center (outer edge),\n        // clamps radial distance at origin (at r=radius)\n        if(rr0 < OFFEDGE) rr0 = 0;\n        else if((radius - rr0) < OFFEDGE) rr0 = radius;\n        else if(rr1 < OFFEDGE) rr1 = 0;\n        else if((radius - rr1) < OFFEDGE) rr1 = radius;\n\n        var path1;\n        var cpath;\n\n        if(Math.abs(rr1 - rr0) > MINZOOM) {\n            // make sure r0 < r1,\n            // to get correct fill pattern in path1 below\n            if(rr0 < rr1) {\n                r0 = rr0;\n                r1 = rr1;\n            } else {\n                r0 = rr1;\n                r1 = rr0;\n                a1 = [a0, a0 = a1][0]; // swap a0 and a1\n            }\n\n            path1 = path0 + pathSectorClosed(r1, sector) + pathSectorClosed(r0, sector);\n            cpath = pathCorner(r0, a0) + pathCorner(r1, a1);\n        } else {\n            r0 = null;\n            r1 = null;\n            path1 = path0;\n            cpath = 'M0,0Z';\n        }\n\n        zb.attr('d', path1);\n        corners.attr('d', cpath);\n        dragBox.transitionZoombox(zb, corners, dimmed, lum);\n        dimmed = true;\n    }\n\n    function zoomDone() {\n        dragBox.removeZoombox(gd);\n\n        if(r0 === null || r1 === null) return;\n\n        dragBox.showDoubleClickNotifier(gd);\n\n        var radialAxis = _this.radialAxis;\n        var radialRange = radialAxis.range;\n        var drange = radialRange[1] - radialRange[0];\n        var updateObj = {};\n        updateObj[_this.id + '.radialaxis.range'] = [\n            radialRange[0] + r0 * drange / radius,\n            radialRange[0] + r1 * drange / radius\n        ];\n\n        Registry.call('relayout', gd, updateObj);\n    }\n\n    dragOpts.prepFn = function(evt, startX, startY) {\n        var dragModeNow = gd._fullLayout.dragmode;\n\n        var bbox = mainDrag.getBoundingClientRect();\n        x0 = startX - bbox.left;\n        y0 = startY - bbox.top;\n\n        switch(dragModeNow) {\n            case 'zoom':\n                dragOpts.moveFn = zoomMove;\n                dragOpts.doneFn = zoomDone;\n                zoomPrep(evt, startX, startY);\n                break;\n            case 'select':\n            case 'lasso':\n                prepSelect(evt, startX, startY, dragOpts, dragModeNow);\n                break;\n        }\n    };\n\n    dragOpts.clickFn = function(numClicks, evt) {\n        dragBox.removeZoombox(gd);\n\n        // TODO double once vs twice logic (autorange vs fixed range)\n        if(numClicks === 2) {\n            var updateObj = {};\n            for(var k in _this.viewInitial) {\n                updateObj[_this.id + '.' + k] = _this.viewInitial[k];\n            }\n\n            gd.emit('plotly_doubleclick', null);\n            Registry.call('relayout', gd, updateObj);\n        }\n\n        Fx.click(gd, evt, _this.id);\n    };\n\n    mainDrag.onmousemove = function(evt) {\n        Fx.hover(gd, evt, _this.id);\n        gd._fullLayout._lasthover = mainDrag;\n        gd._fullLayout._hoversubplot = _this.id;\n    };\n\n    mainDrag.onmouseout = function(evt) {\n        if(gd._dragging) return;\n        dragElement.unhover(gd, evt);\n    };\n\n    dragElement.init(dragOpts);\n};\n\nproto.updateRadialDrag = function(fullLayout, polarLayout) {\n    var _this = this;\n    var gd = _this.gd;\n    var layers = _this.layers;\n    var radius = _this.radius;\n    var cx = _this.cx;\n    var cy = _this.cy;\n    var radialAxis = _this.radialAxis;\n    var radialLayout = polarLayout.radialaxis;\n    var angle0 = deg2rad(radialLayout.angle);\n    var range0 = radialAxis.range.slice();\n    var drange = range0[1] - range0[0];\n    var bl = constants.radialDragBoxSize;\n    var bl2 = bl / 2;\n\n    if(!radialLayout.visible) return;\n\n    var radialDrag = dragBox.makeRectDragger(layers, 'radialdrag', 'crosshair', -bl2, -bl2, bl, bl);\n    var dragOpts = {element: radialDrag, gd: gd};\n    var tx = cx + (radius + bl2) * Math.cos(angle0);\n    var ty = cy - (radius + bl2) * Math.sin(angle0);\n\n    d3.select(radialDrag)\n        .attr('transform', strTranslate(tx, ty));\n\n    // move function (either rotate or re-range flavor)\n    var moveFn2;\n    // rotate angle on done\n    var angle1;\n    // re-range range[1] on done\n    var rng1;\n\n    function moveFn(dx, dy) {\n        if(moveFn2) {\n            moveFn2(dx, dy);\n        } else {\n            var dvec = [dx, -dy];\n            var rvec = [Math.cos(angle0), Math.sin(angle0)];\n            var comp = Math.abs(Lib.dot(dvec, rvec) / Math.sqrt(Lib.dot(dvec, dvec)));\n\n            // mostly perpendicular motions rotate,\n            // mostly parallel motions re-range\n            if(!isNaN(comp)) {\n                moveFn2 = comp < 0.5 ? rotateMove : rerangeMove;\n            }\n        }\n    }\n\n    function doneFn() {\n        if(angle1 !== null) {\n            Registry.call('relayout', gd, _this.id + '.radialaxis.angle', angle1);\n        } else if(rng1 !== null) {\n            Registry.call('relayout', gd, _this.id + '.radialaxis.range[1]', rng1);\n        }\n    }\n\n    function rotateMove(dx, dy) {\n        var x1 = tx + dx;\n        var y1 = ty + dy;\n\n        angle1 = rad2deg(Math.atan2(cy - y1, x1 - cx));\n\n        var transform = strTranslate(cx, cy) + strRotate(-angle1);\n        layers['radial-axis'].attr('transform', transform);\n        layers['radial-line'].select('line').attr('transform', transform);\n\n        var fullLayoutNow = _this.gd._fullLayout;\n        var polarLayoutNow = fullLayoutNow[_this.id];\n        _this.updateRadialAxisTitle(fullLayoutNow, polarLayoutNow, angle1);\n    }\n\n    function rerangeMove(dx, dy) {\n        // project (dx, dy) unto unit radial axis vector\n        var dr = Lib.dot([dx, -dy], [Math.cos(angle0), Math.sin(angle0)]);\n        var rprime = range0[1] - drange * dr / radius * 0.75;\n\n        // make sure new range[1] does not change the range[0] -> range[1] sign\n        if((drange > 0) !== (rprime > range0[0])) return;\n        rng1 = radialAxis.range[1] = rprime;\n\n        Axes.doTicksSingle(gd, _this.radialAxis, true);\n        layers['radial-grid']\n            .attr('transform', strTranslate(cx, cy))\n            .selectAll('path').attr('transform', null);\n\n        var rSpan = rng1 - range0[0];\n        var sectorBBox = _this.sectorBBox;\n        _this.xaxis.range = [sectorBBox[0] * rSpan, sectorBBox[2] * rSpan];\n        _this.yaxis.range = [sectorBBox[1] * rSpan, sectorBBox[3] * rSpan];\n        _this.xaxis.setScale();\n        _this.yaxis.setScale();\n\n        for(var k in _this.traceHash) {\n            var moduleCalcData = _this.traceHash[k];\n            var moduleCalcDataVisible = Lib.filterVisible(moduleCalcData);\n            var _module = moduleCalcData[0][0].trace._module;\n            var polarLayoutNow = gd._fullLayout[_this.id];\n\n            _module.plot(gd, _this, moduleCalcDataVisible, polarLayoutNow);\n\n            if(!Registry.traceIs(k, 'gl')) {\n                for(var i = 0; i < moduleCalcDataVisible.length; i++) {\n                    _module.style(gd, moduleCalcDataVisible[i]);\n                }\n            }\n        }\n    }\n\n    dragOpts.prepFn = function() {\n        moveFn2 = null;\n        angle1 = null;\n        rng1 = null;\n\n        dragOpts.moveFn = moveFn;\n        dragOpts.doneFn = doneFn;\n\n        clearSelect(fullLayout._zoomlayer);\n    };\n\n    dragOpts.clampFn = function(dx, dy) {\n        if(Math.sqrt(dx * dx + dy * dy) < constants.MINDRAG) {\n            dx = 0;\n            dy = 0;\n        }\n        return [dx, dy];\n    };\n\n    dragElement.init(dragOpts);\n};\n\nproto.updateAngularDrag = function(fullLayout, polarLayout) {\n    var _this = this;\n    var gd = _this.gd;\n    var layers = _this.layers;\n    var radius = _this.radius;\n    var cx = _this.cx;\n    var cy = _this.cy;\n    var cxx = _this.cxx;\n    var cyy = _this.cyy;\n    var sector = polarLayout.sector;\n    var dbs = constants.angularDragBoxSize;\n\n    var angularDrag = dragBox.makeDragger(layers, 'path', 'angulardrag', 'move');\n    var dragOpts = {element: angularDrag, gd: gd};\n\n    d3.select(angularDrag)\n        .attr('d', pathAnnulus(radius, radius + dbs, sector))\n        .attr('transform', strTranslate(cx, cy))\n        .call(setCursor, 'move');\n\n    function xy2a(x, y) {\n        return Math.atan2(cyy + dbs - y, x - cxx - dbs);\n    }\n\n    // scatter trace, points and textpoints selections\n    var scatterTraces = layers.frontplot.select('.scatterlayer').selectAll('.trace');\n    var scatterPoints = scatterTraces.selectAll('.point');\n    var scatterTextPoints = scatterTraces.selectAll('.textpoint');\n\n    // mouse px position at drag start (0), move (1)\n    var x0, y0;\n    // angular axis angle rotation at drag start (0), move (1)\n    var rot0, rot1;\n    // copy of polar sector value at drag start\n    var sector0;\n    // angle about circle center at drag start\n    var a0;\n\n    function moveFn(dx, dy) {\n        var x1 = x0 + dx;\n        var y1 = y0 + dy;\n        var a1 = xy2a(x1, y1);\n        var da = rad2deg(a1 - a0);\n        rot1 = rot0 + da;\n\n        layers.frontplot.attr('transform',\n            strTranslate(_this.xOffset2, _this.yOffset2) + strRotate([-da, cxx, cyy])\n        );\n\n        _this.clipPaths.circle.select('path').attr('transform',\n            strTranslate(cxx, cyy) + strRotate(da)\n        );\n\n        // 'un-rotate' marker and text points\n        scatterPoints.each(function() {\n            var sel = d3.select(this);\n            var xy = Drawing.getTranslate(sel);\n            sel.attr('transform', strTranslate(xy.x, xy.y) + strRotate([da]));\n        });\n        scatterTextPoints.each(function() {\n            var sel = d3.select(this);\n            var tx = sel.select('text');\n            var xy = Drawing.getTranslate(sel);\n            // N.B rotate -> translate ordering matters\n            sel.attr('transform', strRotate([da, tx.attr('x'), tx.attr('y')]) + strTranslate(xy.x, xy.y));\n        });\n\n        var angularAxis = _this.angularAxis;\n        angularAxis.rotation = wrap180(rot1);\n\n        if(angularAxis.type === 'linear' && !isFullCircle(sector)) {\n            angularAxis.range = sector0\n                .map(deg2rad)\n                .map(angularAxis.unTransformRad)\n                .map(rad2deg);\n        }\n\n        setConvertAngular(angularAxis);\n        Axes.doTicksSingle(gd, angularAxis, true);\n\n        if(_this._hasClipOnAxisFalse && !isFullCircle(sector)) {\n            // mutate sector to trick isPtWithinSector\n            _this.sector = [sector0[0] - da, sector0[1] - da];\n            scatterTraces.call(Drawing.hideOutsideRangePoints, _this);\n        }\n\n        for(var k in _this.traceHash) {\n            if(Registry.traceIs(k, 'gl')) {\n                var moduleCalcData = _this.traceHash[k];\n                var moduleCalcDataVisible = Lib.filterVisible(moduleCalcData);\n                var _module = moduleCalcData[0][0].trace._module;\n                var polarLayoutNow = gd._fullLayout[_this.id];\n\n                _module.plot(gd, _this, moduleCalcDataVisible, polarLayoutNow);\n            }\n        }\n    }\n\n    function doneFn() {\n        scatterTextPoints.select('text').attr('transform', null);\n        var updateObj = {};\n        updateObj[_this.id + '.angularaxis.rotation'] = rot1;\n        Registry.call('relayout', gd, updateObj);\n    }\n\n    dragOpts.prepFn = function(evt, startX, startY) {\n        var polarLayoutNow = fullLayout[_this.id];\n        sector0 = polarLayoutNow.sector.slice();\n        rot0 = polarLayoutNow.angularaxis.rotation;\n\n        var bbox = angularDrag.getBoundingClientRect();\n        x0 = startX - bbox.left;\n        y0 = startY - bbox.top;\n        a0 = xy2a(x0, y0);\n\n        dragOpts.moveFn = moveFn;\n        dragOpts.doneFn = doneFn;\n\n        clearSelect(fullLayout._zoomlayer);\n    };\n\n    dragElement.init(dragOpts);\n};\n\nproto.isPtWithinSector = function(d) {\n    var sector = this.sector;\n    var radialAxis = this.radialAxis;\n    var radialRange = radialAxis.range;\n    var r = radialAxis.c2r(d.r);\n\n    var s0 = wrap360(sector[0]);\n    var s1 = wrap360(sector[1]);\n    if(s0 > s1) s1 += 360;\n\n    var deg = wrap360(rad2deg(d.rad));\n    var nextTurnDeg = deg + 360;\n\n    var r0, r1;\n    if(radialRange[1] >= radialRange[0]) {\n        r0 = radialRange[0];\n        r1 = radialRange[1];\n    } else {\n        r0 = radialRange[1];\n        r1 = radialRange[0];\n    }\n\n    return (\n        (r >= r0 && r <= r1) &&\n        (isFullCircle(sector) ||\n            (deg >= s0 && deg <= s1) ||\n            (nextTurnDeg >= s0 && nextTurnDeg <= s1)\n        )\n    );\n};\n\nproto.fillViewInitialKey = function(key, val) {\n    if(!(key in this.viewInitial)) {\n        this.viewInitial[key] = val;\n    }\n};\n\nfunction setScale(ax, axLayout, fullLayout) {\n    Axes.setConvert(ax, fullLayout);\n\n    // _min and _max are filled in during Axes.expand\n    // and cleared during Axes.setConvert\n    ax._min = axLayout._min;\n    ax._max = axLayout._max;\n\n    ax.setScale();\n}\n\nfunction strTickLayout(axLayout) {\n    var out = axLayout.ticks + String(axLayout.ticklen) + String(axLayout.showticklabels);\n    if('side' in axLayout) out += axLayout.side;\n    return out;\n}\n\n// Finds the bounding box of a given circle sector,\n// inspired by https://math.stackexchange.com/q/1852703\n//\n// assumes:\n// - sector[1] < sector[0]\n// - counterclockwise rotation\nfunction computeSectorBBox(sector) {\n    var s0 = sector[0];\n    var s1 = sector[1];\n    var arc = s1 - s0;\n    var a0 = wrap360(s0);\n    var a1 = a0 + arc;\n\n    var ax0 = Math.cos(deg2rad(a0));\n    var ay0 = Math.sin(deg2rad(a0));\n    var ax1 = Math.cos(deg2rad(a1));\n    var ay1 = Math.sin(deg2rad(a1));\n\n    var x0, y0, x1, y1;\n\n    if((a0 <= 90 && a1 >= 90) || (a0 > 90 && a1 >= 450)) {\n        y1 = 1;\n    } else if(ay0 <= 0 && ay1 <= 0) {\n        y1 = 0;\n    } else {\n        y1 = Math.max(ay0, ay1);\n    }\n\n    if((a0 <= 180 && a1 >= 180) || (a0 > 180 && a1 >= 540)) {\n        x0 = -1;\n    } else if(ax0 >= 0 && ax1 >= 0) {\n        x0 = 0;\n    } else {\n        x0 = Math.min(ax0, ax1);\n    }\n\n    if((a0 <= 270 && a1 >= 270) || (a0 > 270 && a1 >= 630)) {\n        y0 = -1;\n    } else if(ay0 >= 0 && ay1 >= 0) {\n        y0 = 0;\n    } else {\n        y0 = Math.min(ay0, ay1);\n    }\n\n    if(a1 >= 360) {\n        x1 = 1;\n    } else if(ax0 <= 0 && ax1 <= 0) {\n        x1 = 0;\n    } else {\n        x1 = Math.max(ax0, ax1);\n    }\n\n    return [x0, y0, x1, y1];\n}\n\nfunction pathSector(r, sector) {\n    if(isFullCircle(sector)) {\n        return Drawing.symbolFuncs[0](r);\n    }\n\n    var xs = r * Math.cos(deg2rad(sector[0]));\n    var ys = -r * Math.sin(deg2rad(sector[0]));\n    var xe = r * Math.cos(deg2rad(sector[1]));\n    var ye = -r * Math.sin(deg2rad(sector[1]));\n\n    var arc = Math.abs(sector[1] - sector[0]);\n    var flags = arc <= 180 ? [0, 0, 0] : [0, 1, 0];\n\n    return 'M' + [xs, ys] +\n        'A' + [r, r] + ' ' + flags + ' ' + [xe, ye];\n}\n\nfunction pathSectorClosed(r, sector) {\n    return pathSector(r, sector) +\n        (isFullCircle(sector) ? '' : 'L0,0Z');\n}\n\n// TODO recycle this routine with the ones used for pie traces.\nfunction pathAnnulus(r0, r1, sector) {\n    var largeArc = Math.abs(sector[1] - sector[0]) <= 180 ? 0 : 1;\n    // sector angle at [s]tart, [m]iddle and [e]nd\n    var ss, sm, se;\n\n    function pt(r, s) {\n        return [r * Math.cos(s), -r * Math.sin(s)];\n    }\n\n    function arc(r, s, cw) {\n        return 'A' + [r, r] + ' ' + [0, largeArc, cw] + ' ' + pt(r, s);\n    }\n\n    if(isFullCircle(sector)) {\n        ss = 0;\n        se = 2 * Math.PI;\n        sm = Math.PI;\n        return 'M' + pt(r0, ss) +\n            arc(r0, sm, 0) +\n            arc(r0, se, 0) +\n            'Z' +\n            'M' + pt(r1, ss) +\n            arc(r1, sm, 1) +\n            arc(r1, se, 1) +\n            'Z';\n    } else {\n        ss = deg2rad(sector[0]);\n        se = deg2rad(sector[1]);\n        return 'M' + pt(r0, ss) +\n            'L' + pt(r1, ss) +\n            arc(r1, se, 0) +\n            'L' + pt(r0, se) +\n            arc(r0, ss, 1) +\n            'Z';\n    }\n}\n\nfunction isFullCircle(sector) {\n    var arc = Math.abs(sector[1] - sector[0]);\n    return arc === 360;\n}\n\nfunction updateElement(sel, showAttr, attrs) {\n    if(showAttr) {\n        sel.attr('display', null);\n        sel.attr(attrs);\n    } else if(sel) {\n        sel.attr('display', 'none');\n    }\n    return sel;\n}\n\nfunction strTranslate(x, y) {\n    return 'translate(' + x + ',' + y + ')';\n}\n\nfunction strRotate(angle) {\n    return 'rotate(' + angle + ')';\n}\n\n// because Math.sign(Math.cos(Math.PI / 2)) === 1\n// oh javascript ;)\nfunction sign(v) {\n    return Math.abs(v) < 1e-10 ? 0 :\n        v > 0 ? 1 : -1;\n}\n\nfunction signCos(v) {\n    return sign(Math.cos(v));\n}\n\nfunction signSin(v) {\n    return sign(Math.sin(v));\n}\n",null]}