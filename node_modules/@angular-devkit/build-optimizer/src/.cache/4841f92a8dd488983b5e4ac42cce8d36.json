{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-pointcloud2d/pointcloud2d.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-pointcloud2d/pointcloud2d.js","mtime":1529418308675},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar createShader = require('gl-shader')\r\nvar createBuffer = require('gl-buffer')\r\n\r\nvar pool = require('typedarray-pool')\r\n\r\nvar SHADERS = require('./lib/shader')\r\n\r\nmodule.exports = createPointcloud2D\r\n\r\nfunction Pointcloud2D(plot, offsetBuffer, pickBuffer, shader, pickShader) {\r\n  this.plot           = plot\r\n  this.offsetBuffer   = offsetBuffer\r\n  this.pickBuffer     = pickBuffer\r\n  this.shader         = shader\r\n  this.pickShader     = pickShader\r\n  this.sizeMin        = 0.5\r\n  this.sizeMinCap     = 2\r\n  this.sizeMax        = 20\r\n  this.areaRatio      = 1.0\r\n  this.pointCount     = 0\r\n  this.color          = [1, 0, 0, 1]\r\n  this.borderColor    = [0, 0, 0, 1]\r\n  this.blend          = false\r\n  this.pickOffset     = 0\r\n  this.points         = null\r\n}\r\n\r\nvar proto = Pointcloud2D.prototype\r\n\r\nproto.dispose = function() {\r\n  this.shader.dispose()\r\n  this.pickShader.dispose()\r\n  this.offsetBuffer.dispose()\r\n  this.pickBuffer.dispose()\r\n  this.plot.removeObject(this)\r\n}\r\n\r\nproto.update = function(options) {\r\n\r\n  var i\r\n\r\n  options = options || {}\r\n\r\n  function dflt(opt, value) {\r\n    if(opt in options) {\r\n      return options[opt]\r\n    }\r\n    return value\r\n  }\r\n\r\n  this.sizeMin      = dflt('sizeMin', 0.5)\r\n  // this.sizeMinCap      = dflt('sizeMinCap', 2)\r\n  this.sizeMax      = dflt('sizeMax', 20)\r\n  this.color        = dflt('color', [1, 0, 0, 1]).slice()\r\n  this.areaRatio    = dflt('areaRatio', 1)\r\n  this.borderColor  = dflt('borderColor', [0, 0, 0, 1]).slice()\r\n  this.blend        = dflt('blend', false)\r\n\r\n  //Update point data\r\n\r\n  // Attempt straight-through processing (STP) to avoid allocation and copy\r\n  // TODO eventually abstract out STP logic, maybe into `pool` or a layer above\r\n  var pointCount = options.positions.length >>> 1\r\n  var dataStraightThrough = options.positions instanceof Float32Array\r\n  var idStraightThrough = options.idToIndex instanceof Int32Array && options.idToIndex.length >= pointCount // permit larger to help reuse\r\n\r\n  var data          = options.positions\r\n  var packed        = dataStraightThrough ? data : pool.mallocFloat32(data.length)\r\n  var packedId      = idStraightThrough ? options.idToIndex : pool.mallocInt32(pointCount)\r\n\r\n  if(!dataStraightThrough) {\r\n    packed.set(data)\r\n  }\r\n\r\n  if(!idStraightThrough) {\r\n    packed.set(data)\r\n    for(i = 0; i < pointCount; i++) {\r\n      packedId[i] = i\r\n    }\r\n  }\r\n\r\n  this.points       = data\r\n\r\n  this.offsetBuffer.update(packed)\r\n  this.pickBuffer.update(packedId)\r\n\r\n  if(!dataStraightThrough) {\r\n    pool.free(packed)\r\n  }\r\n\r\n  if(!idStraightThrough) {\r\n    pool.free(packedId)\r\n  }\r\n\r\n  this.pointCount = pointCount\r\n  this.pickOffset = 0\r\n}\r\n\r\nfunction count(points, dataBox) {\r\n  var visiblePointCountEstimate = 0\r\n  var length = points.length >>> 1\r\n  var i\r\n  for(i = 0; i < length; i++) {\r\n    var x = points[i * 2]\r\n    var y = points[i * 2 + 1]\r\n    if(x >= dataBox[0] && x <= dataBox[2] && y >= dataBox[1] && y <= dataBox[3])\r\n      visiblePointCountEstimate++\r\n  }\r\n  return visiblePointCountEstimate\r\n}\r\n\r\nproto.unifiedDraw = (function() {\r\n  var MATRIX = [1, 0, 0,\r\n                0, 1, 0,\r\n                0, 0, 1]\r\n  var PICK_VEC4 = [0, 0, 0, 0]\r\nreturn function(pickOffset) {\r\n  var pick = pickOffset !== void(0)\r\n\r\n  var shader        = pick ? this.pickShader : this.shader\r\n  var gl            = this.plot.gl\r\n  var dataBox       = this.plot.dataBox\r\n\r\n  if(this.pointCount === 0) {\r\n    return pickOffset\r\n  }\r\n\r\n  var dataX   = dataBox[2] - dataBox[0]\r\n  var dataY   = dataBox[3] - dataBox[1]\r\n\r\n  var visiblePointCountEstimate = count(this.points, dataBox)\r\n  var basicPointSize =  this.plot.pickPixelRatio * Math.max(Math.min(this.sizeMinCap, this.sizeMin), Math.min(this.sizeMax, this.sizeMax / Math.pow(visiblePointCountEstimate, 0.33333)))\r\n\r\n  MATRIX[0] = 2.0 / dataX\r\n  MATRIX[4] = 2.0 / dataY\r\n  MATRIX[6] = -2.0 * dataBox[0] / dataX - 1.0\r\n  MATRIX[7] = -2.0 * dataBox[1] / dataY - 1.0\r\n\r\n  this.offsetBuffer.bind()\r\n\r\n  shader.bind()\r\n  shader.attributes.position.pointer()\r\n  shader.uniforms.matrix      = MATRIX\r\n  shader.uniforms.color       = this.color\r\n  shader.uniforms.borderColor = this.borderColor\r\n  shader.uniforms.pointCloud = basicPointSize < 5\r\n  shader.uniforms.pointSize = basicPointSize\r\n  shader.uniforms.centerFraction = Math.min(1, Math.max(0, Math.sqrt(1 - this.areaRatio)))\r\n\r\n  if(pick) {\r\n\r\n    PICK_VEC4[0] = ( pickOffset        & 0xff)\r\n    PICK_VEC4[1] = ((pickOffset >> 8)  & 0xff)\r\n    PICK_VEC4[2] = ((pickOffset >> 16) & 0xff)\r\n    PICK_VEC4[3] = ((pickOffset >> 24) & 0xff)\r\n\r\n    this.pickBuffer.bind()\r\n    shader.attributes.pickId.pointer(gl.UNSIGNED_BYTE)\r\n    shader.uniforms.pickOffset = PICK_VEC4\r\n    this.pickOffset = pickOffset\r\n  }\r\n\r\n  // Worth switching these off, but we can't make assumptions about other\r\n  // renderers, so let's restore it after each draw\r\n  var blend = gl.getParameter(gl.BLEND)\r\n  var dither = gl.getParameter(gl.DITHER)\r\n\r\n  if(blend && !this.blend)\r\n    gl.disable(gl.BLEND)\r\n  if(dither)\r\n    gl.disable(gl.DITHER)\r\n\r\n  gl.drawArrays(gl.POINTS, 0, this.pointCount)\r\n\r\n  if(blend && !this.blend)\r\n    gl.enable(gl.BLEND)\r\n  if(dither)\r\n    gl.enable(gl.DITHER)\r\n\r\n  return pickOffset + this.pointCount\r\n}\r\n})()\r\n\r\nproto.draw = proto.unifiedDraw\r\nproto.drawPick = proto.unifiedDraw\r\n\r\nproto.pick = function(x, y, value) {\r\n  var pickOffset = this.pickOffset\r\n  var pointCount = this.pointCount\r\n  if(value < pickOffset || value >= pickOffset + pointCount) {\r\n    return null\r\n  }\r\n  var pointId = value - pickOffset\r\n  var points = this.points\r\n  return {\r\n    object: this,\r\n    pointId: pointId,\r\n    dataCoord: [points[2 * pointId], points[2 * pointId + 1] ]\r\n  }\r\n}\r\n\r\nfunction createPointcloud2D(plot, options) {\r\n  var gl = plot.gl\r\n  var buffer = createBuffer(gl)\r\n  var pickBuffer = createBuffer(gl)\r\n  var shader = createShader(gl, SHADERS.pointVertex, SHADERS.pointFragment)\r\n  var pickShader = createShader(gl, SHADERS.pickVertex, SHADERS.pickFragment)\r\n\r\n  var result = new Pointcloud2D(plot, buffer, pickBuffer, shader, pickShader)\r\n  result.update(options)\r\n\r\n  //Register with plot\r\n  plot.addObject(result)\r\n\r\n  return result\r\n}\r\n",null]}