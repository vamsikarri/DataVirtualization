{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/regl-splom/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/regl-splom/index.js","mtime":1529418311000},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\n\r\nconst createScatter = require('regl-scatter2d/scatter')\r\nconst pick = require('pick-by-alias')\r\nconst getBounds = require('array-bounds')\r\nconst raf = require('raf')\r\nconst arrRange = require('array-range')\r\nconst rect = require('parse-rect')\r\nconst flatten = require('flatten-vertex-data')\r\n\r\n\r\nmodule.exports = SPLOM\r\n\r\n\r\n// @constructor\r\nfunction SPLOM (regl, options) {\r\n\tif (!(this instanceof SPLOM)) return new SPLOM(regl, options)\r\n\r\n\t// render passes\r\n\tthis.traces = []\r\n\r\n\t// passes for scatter, combined across traces\r\n\tthis.passes = {}\r\n\r\n\tthis.regl = regl\r\n\r\n\t// main scatter drawing instance\r\n\tthis.scatter = createScatter(regl)\r\n\r\n\tthis.canvas = this.scatter.canvas\r\n}\r\n\r\n\r\n// update & draw passes once per frame\r\nSPLOM.prototype.render = function (...args) {\r\n\tif (args.length) {\r\n\t\tthis.update(...args)\r\n\t}\r\n\r\n\tif (this.regl.attributes.preserveDrawingBuffer) return this.draw()\r\n\r\n\t// make sure draw is not called more often than once a frame\r\n\tif (this.dirty) {\r\n\t\tif (this.planned == null) {\r\n\t\t\tthis.planned = raf(() => {\r\n\t\t\t\tthis.draw()\r\n\t\t\t\tthis.dirty = true\r\n\t\t\t\tthis.planned = null\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tthis.draw()\r\n\t\tthis.dirty = true\r\n\t\traf(() => {\r\n\t\t\tthis.dirty = false\r\n\t\t})\r\n\t}\r\n\r\n\treturn this\r\n}\r\n\r\n\r\n// update passes\r\nSPLOM.prototype.update = function (...args) {\r\n\tif (!args.length) return\r\n\r\n\tfor (let i = 0; i < args.length; i++) {\r\n\t\tthis.updateItem(i, args[i])\r\n\t}\r\n\r\n\t// remove nulled passes\r\n\tthis.traces = this.traces.filter(Boolean)\r\n\r\n\t// FIXME: update passes independently\r\n\tlet passes = []\r\n\tlet offset = 0\r\n\tfor (let i = 0; i < this.traces.length; i++) {\r\n\t\tlet trace = this.traces[i]\r\n\t\tlet tracePasses = this.traces[i].passes\r\n\t\tfor (let j = 0; j < tracePasses.length; j++) {\r\n\t\t\tpasses.push(this.passes[tracePasses[j]])\r\n\t\t}\r\n\t\t// save offset of passes\r\n\t\ttrace.passOffset = offset\r\n\t\toffset += trace.passes.length\r\n\t}\r\n\r\n\tthis.scatter.update(...passes)\r\n\r\n\treturn this\r\n}\r\n\r\n\r\n// update trace by index, not supposed to be called directly\r\nSPLOM.prototype.updateItem = function (i, options) {\r\n\tlet { regl } = this\r\n\r\n\t// remove pass if null\r\n\tif (options === null) {\r\n\t\tthis.traces[i] = null\r\n\t\treturn this\r\n\t}\r\n\r\n\tif (!options) return this\r\n\r\n\tlet o = pick(options, {\r\n\t\tdata: 'data items columns rows values dimensions samples x',\r\n\t\tsnap: 'snap cluster',\r\n\t\tsize: 'sizes size radius',\r\n\t\tcolor: 'colors color fill fill-color fillColor',\r\n\t\topacity: 'opacity alpha transparency opaque',\r\n\t\tborderSize: 'borderSizes borderSize border-size bordersize borderWidth borderWidths border-width borderwidth stroke-width strokeWidth strokewidth outline',\r\n\t\tborderColor: 'borderColors borderColor bordercolor stroke stroke-color strokeColor',\r\n\t\tmarker: 'markers marker shape',\r\n\t\trange: 'range ranges databox dataBox',\r\n\t\tviewport: 'viewport viewBox viewbox',\r\n\t\tdomain: 'domain domains area areas',\r\n\t\tpadding: 'pad padding paddings pads margin margins',\r\n\t\ttranspose: 'transpose transposed',\r\n\t\tdiagonal: 'diagonal diag showDiagonal',\r\n\t\tupper: 'upper up top upperhalf upperHalf showupperhalf showUpper showUpperHalf',\r\n\t\tlower: 'lower low bottom lowerhalf lowerHalf showlowerhalf showLowerHalf showLower'\r\n\t})\r\n\r\n\t// we provide regl buffer per-trace, since trace data can be changed\r\n\tlet trace = (this.traces[i] || (this.traces[i] = {\r\n\t\tid: i,\r\n\t\tbuffer: regl.buffer({\r\n\t\t\tusage: 'dynamic',\r\n\t\t\ttype: 'float',\r\n\t\t\tdata: new Uint8Array()\r\n\t\t}),\r\n\t\tcolor: 'black',\r\n\t\tmarker: null,\r\n\t\tsize: 12,\r\n\t\tborderColor: 'transparent',\r\n\t\tborderSize: 1,\r\n\t\tviewport:  rect([regl._gl.drawingBufferWidth, regl._gl.drawingBufferHeight]),\r\n\t\tpadding: [0, 0, 0, 0],\r\n\t\topacity: 1,\r\n\t\tdiagonal: true,\r\n\t\tupper: true,\r\n\t\tlower: true\r\n\t}))\r\n\r\n\r\n\t// save styles\r\n\tif (o.color != null) {\r\n\t\ttrace.color = o.color\r\n\t}\r\n\tif (o.size != null) {\r\n\t\ttrace.size = o.size\r\n\t}\r\n\tif (o.marker != null) {\r\n\t\ttrace.marker = o.marker\r\n\t}\r\n\tif (o.borderColor != null) {\r\n\t\ttrace.borderColor = o.borderColor\r\n\t}\r\n\tif (o.borderSize != null) {\r\n\t\ttrace.borderSize = o.borderSize\r\n\t}\r\n\tif (o.opacity != null) {\r\n\t\ttrace.opacity = o.opacity\r\n\t}\r\n\tif (o.viewport) {\r\n\t\ttrace.viewport = rect(o.viewport)\r\n\t}\r\n\tif (o.diagonal != null) trace.diagonal = o.diagonal\r\n\tif (o.upper != null) trace.upper = o.upper\r\n\tif (o.lower != null) trace.lower = o.lower\r\n\r\n\t// put flattened data into buffer\r\n\tif (o.data) {\r\n\t\ttrace.buffer(flatten(o.data))\r\n\t\ttrace.columns = o.data.length\r\n\t\ttrace.count = o.data[0].length\r\n\r\n\t\t// detect bounds per-column\r\n\t\ttrace.bounds = []\r\n\r\n\t\tfor (let i = 0; i < trace.columns; i++) {\r\n\t\t\ttrace.bounds[i] = getBounds(o.data[i], 1)\r\n\t\t}\r\n\t}\r\n\r\n\t// add proper range updating markers\r\n\tlet multirange\r\n\tif (o.range) {\r\n\t\ttrace.range = o.range\r\n\t\tmultirange = trace.range && typeof trace.range[0] !== 'number'\r\n\t}\r\n\r\n\tif (o.domain) {\r\n\t\ttrace.domain = o.domain\r\n\t}\r\n\tlet multipadding = false\r\n\tif (o.padding != null) {\r\n\t\t// multiple paddings\r\n\t\tif (Array.isArray(o.padding) && o.padding.length === trace.columns && typeof o.padding[o.padding.length - 1] === 'number') {\r\n\t\t\ttrace.padding = o.padding.map(getPad)\r\n\t\t\tmultipadding = true\r\n\t\t}\r\n\t\t// single padding\r\n\t\telse {\r\n\t\t\ttrace.padding = getPad(o.padding)\r\n\t\t}\r\n\t}\r\n\r\n\t// create passes\r\n\tlet m = trace.columns\r\n\tlet n = trace.count\r\n\r\n\tlet w = trace.viewport.width\r\n\tlet h = trace.viewport.height\r\n\tlet left = trace.viewport.x\r\n\tlet top = trace.viewport.y\r\n\tlet iw = w / m\r\n\tlet ih = h / m\r\n\r\n\ttrace.passes = []\r\n\r\n\tfor (let i = 0; i < m; i++) {\r\n\t\tfor (let j = 0; j < m; j++) {\r\n\t\t\tif (!trace.diagonal && j === i) continue\r\n\t\t\tif (!trace.upper && i > j) continue\r\n\t\t\tif (!trace.lower && i < j) continue\r\n\r\n\t\t\tlet key = passId(trace.id, i, j)\r\n\r\n\t\t\tlet pass = this.passes[key] || (this.passes[key] = {})\r\n\r\n\t\t\tif (o.data) {\r\n\t\t\t\tif (o.transpose) {\r\n\t\t\t\t\tpass.positions = {\r\n\t\t\t\t\t\tx: {buffer: trace.buffer, offset: j, count: n, stride: m},\r\n\t\t\t\t\t\ty: {buffer: trace.buffer, offset: i, count: n, stride: m}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpass.positions = {\r\n\t\t\t\t\t\tx: {buffer: trace.buffer, offset: j * n, count: n},\r\n\t\t\t\t\t\ty: {buffer: trace.buffer, offset: i * n, count: n}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpass.bounds = getBox(trace.bounds, i, j)\r\n\t\t\t}\r\n\r\n\t\t\tif (o.domain || o.viewport || o.data) {\r\n\t\t\t\tlet pad = multipadding ? getBox(trace.padding, i, j) : trace.padding\r\n\t\t\t\tif (trace.domain) {\r\n\t\t\t\t\tlet [lox, loy, hix, hiy] = getBox(trace.domain, i, j)\r\n\r\n\t\t\t\t\tpass.viewport = [\r\n\t\t\t\t\t\tleft + lox * w + pad[0],\r\n\t\t\t\t\t\ttop + loy * h + pad[1],\r\n\t\t\t\t\t\tleft + hix * w - pad[2],\r\n\t\t\t\t\t\ttop + hiy * h - pad[3]\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t\t// consider auto-domain equipartial\r\n\t\t\t\telse {\r\n\t\t\t\t\tpass.viewport = [\r\n\t\t\t\t\t\tleft + j * iw + iw * pad[0],\r\n\t\t\t\t\t\ttop + i * ih + ih * pad[1],\r\n\t\t\t\t\t\tleft + (j + 1) * iw - iw * pad[2],\r\n\t\t\t\t\t\ttop + (i + 1) * ih - ih * pad[3]\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (o.color) pass.color = trace.color\r\n\t\t\tif (o.size) pass.size = trace.size\r\n\t\t\tif (o.marker) pass.marker = trace.marker\r\n\t\t\tif (o.borderSize) pass.borderSize = trace.borderSize\r\n\t\t\tif (o.borderColor) pass.borderColor = trace.borderColor\r\n\t\t\tif (o.opacity) pass.opacity = trace.opacity\r\n\r\n\t\t\tif (o.range) {\r\n\t\t\t\tpass.range = multirange ? getBox(trace.range, i, j) : trace.range || pass.bounds\r\n\t\t\t}\r\n\r\n\t\t\ttrace.passes.push(key)\r\n\t\t}\r\n\t}\r\n\r\n\treturn this\r\n}\r\n\r\n\r\n// draw all or passed passes\r\nSPLOM.prototype.draw = function (...args) {\r\n\tif (!args.length) {\r\n\t\tthis.scatter.draw()\r\n\t}\r\n\telse {\r\n\t\tlet idx = []\r\n\t\tfor (let i = 0; i < args.length; i++) {\r\n\t\t\t// draw(0, 2, 5) - draw traces\r\n\t\t\tif (typeof args[i] === 'number' ) {\r\n\t\t\t\tlet { passes, passOffset } = this.traces[args[i]]\r\n\t\t\t\tidx.push(...arrRange(passOffset, passOffset + passes.length))\r\n\t\t\t}\r\n\t\t\t// draw([0, 1, 2 ...], [3, 4, 5]) - draw points\r\n\t\t\telse if (args[i].length) {\r\n\t\t\t\tlet els = args[i]\r\n\t\t\t\tlet { passes, passOffset } = this.traces[i]\r\n\t\t\t\tpasses = passes.map((passId, i) => {\r\n\t\t\t\t\tidx[passOffset + i] = els\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.scatter.draw(...idx)\r\n\t}\r\n\r\n\treturn this\r\n}\r\n\r\n\r\n// dispose resources\r\nSPLOM.prototype.destroy = function () {\r\n\tthis.traces.forEach(trace => {\r\n\t\tif (trace.buffer && trace.buffer.destroy) trace.buffer.destroy()\r\n\t})\r\n\tthis.traces = null\r\n\tthis.passes = null\r\n\r\n\tthis.scatter.destroy()\r\n\r\n\treturn this\r\n}\r\n\r\n\r\n// return pass corresponding to trace i- j- square\r\nfunction passId (trace, i, j) {\r\n\tlet id = (trace.id != null ? trace.id : trace)\r\n\tlet n = i\r\n\tlet m = j\r\n\tlet key = id << 16 | (n & 0xff) << 8 | m & 0xff\r\n\r\n\treturn key\r\n}\r\n\r\n\r\n// return bounding box corresponding to a pass\r\nfunction getBox (items, i, j) {\r\n\tlet ilox, iloy, ihix, ihiy, jlox, jloy, jhix, jhiy\r\n\tlet iitem = items[i], jitem = items[j]\r\n\r\n\tif (iitem.length > 2) {\r\n\t\tilox = iitem[0]\r\n\t\tihix = iitem[2]\r\n\t\tiloy = iitem[1]\r\n\t\tihiy = iitem[3]\r\n\t}\r\n\telse if (iitem.length) {\r\n\t\tilox = iloy = iitem[0]\r\n\t\tihix = ihiy = iitem[1]\r\n\t}\r\n\telse {\r\n\t\tilox = iitem.x\r\n\t\tiloy = iitem.y\r\n\t\tihix = iitem.x + iitem.width\r\n\t\tihiy = iitem.y + iitem.height\r\n\t}\r\n\r\n\tif (jitem.length > 2) {\r\n\t\tjlox = jitem[0]\r\n\t\tjhix = jitem[2]\r\n\t\tjloy = jitem[1]\r\n\t\tjhiy = jitem[3]\r\n\t}\r\n\telse if (jitem.length) {\r\n\t\tjlox = jloy = jitem[0]\r\n\t\tjhix = jhiy = jitem[1]\r\n\t}\r\n\telse {\r\n\t\tjlox = jitem.x\r\n\t\tjloy = jitem.y\r\n\t\tjhix = jitem.x + jitem.width\r\n\t\tjhiy = jitem.y + jitem.height\r\n\t}\r\n\r\n\treturn [ jlox, iloy, jhix, ihiy ]\r\n}\r\n\r\n\r\nfunction getPad (arg) {\r\n\tif (typeof arg === 'number') return [arg, arg, arg, arg]\r\n\telse if (arg.length === 2) return [arg[0], arg[1], arg[0], arg[1]]\r\n\telse {\r\n\t\tlet box = rect(arg)\r\n\t\treturn [box.x, box.y, box.x + box.width, box.y + box.height]\r\n\t}\r\n}\r\n",null]}