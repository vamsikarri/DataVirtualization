{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/axis_defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/axis_defaults.js","mtime":1529418310690},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar colorMix = require('tinycolor2').mix;\n\nvar Lib = require('../../../lib');\n\nvar layoutAttributes = require('./axis_attributes');\nvar handleTypeDefaults = require('../../cartesian/type_defaults');\nvar handleAxisDefaults = require('../../cartesian/axis_defaults');\n\nvar axesNames = ['xaxis', 'yaxis', 'zaxis'];\n\n// TODO: hard-coded lightness fraction based on gridline default colors\n// that differ from other subplot types.\nvar gridLightness = 100 * (204 - 0x44) / (255 - 0x44);\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, options) {\n    var containerIn, containerOut;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(containerIn, containerOut, layoutAttributes, attr, dflt);\n    }\n\n    for(var j = 0; j < axesNames.length; j++) {\n        var axName = axesNames[j];\n        containerIn = layoutIn[axName] || {};\n\n        containerOut = layoutOut[axName] = {\n            _id: axName[0] + options.scene,\n            _name: axName\n        };\n\n        handleTypeDefaults(containerIn, containerOut, coerce, options.data);\n\n        handleAxisDefaults(\n            containerIn,\n            containerOut,\n            coerce,\n            {\n                font: options.font,\n                letter: axName[0],\n                data: options.data,\n                showGrid: true,\n                bgColor: options.bgColor,\n                calendar: options.calendar\n            },\n            options.fullLayout);\n\n        coerce('gridcolor', colorMix(containerOut.color, options.bgColor, gridLightness).toRgbString());\n        coerce('title', axName[0]);  // shouldn't this be on-par with 2D?\n\n        containerOut.setScale = Lib.noop;\n\n        if(coerce('showspikes')) {\n            coerce('spikesides');\n            coerce('spikethickness');\n            coerce('spikecolor', containerOut.color);\n        }\n\n        coerce('showaxeslabels');\n        if(coerce('showbackground')) coerce('backgroundcolor');\n    }\n};\n",null]}