{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/point-cluster/quad.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/point-cluster/quad.js","mtime":1529418310758},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\r\n * @module  point-cluster/quad\r\n *\r\n * Bucket based quad tree clustering\r\n */\r\n\r\n'use strict'\r\n\r\nconst search = require('binary-search-bounds')\r\nconst clamp = require('clamp')\r\nconst rect = require('parse-rect')\r\nconst getBounds = require('array-bounds')\r\nconst pick = require('pick-by-alias')\r\nconst defined = require('defined')\r\nconst flatten = require('flatten-vertex-data')\r\nconst isObj = require('is-obj')\r\nconst dtype = require('dtype')\r\nconst log2 = require('math-log2')\r\n\r\n\r\nmodule.exports = function cluster (srcPoints, options) {\r\n\tif (!options) options = {}\r\n\r\n\tsrcPoints = flatten(srcPoints, 'float64')\r\n\r\n\toptions = pick(options, {\r\n\t\tbounds: 'range bounds dataBox databox',\r\n\t\tmaxDepth: 'depth maxDepth maxdepth level maxLevel maxlevel levels',\r\n\t\tdtype: 'type dtype format out dst output destination'\r\n\t\t// sort: 'sortBy sortby sort',\r\n\t\t// pick: 'pick levelPoint',\r\n\t\t// nodeSize: 'node nodeSize minNodeSize minSize size'\r\n\t})\r\n\r\n\t// let nodeSize = defined(options.nodeSize, 1)\r\n\tlet maxDepth = defined(options.maxDepth, 255)\r\n\tlet bounds = defined(options.bounds, getBounds(srcPoints, 2))\r\n\tif (bounds[0] === bounds[2]) bounds[2]++\r\n\tif (bounds[1] === bounds[3]) bounds[3]++\r\n\r\n\tlet points = normalize(srcPoints, bounds)\r\n\r\n\t// init variables\r\n\tlet n = srcPoints.length >>> 1\r\n\tlet ids\r\n\tif (!options.dtype) options.dtype = 'array'\r\n\r\n\tif (typeof options.dtype === 'string') {\r\n\t\tids = new (dtype(options.dtype))(n)\r\n\t}\r\n\telse if (options.dtype) {\r\n\t\tids = options.dtype\r\n\t\tif (Array.isArray(ids)) ids.length = n\r\n\t}\r\n\tfor (let i = 0; i < n; ++i) {\r\n\t\tids[i] = i\r\n\t}\r\n\r\n\t// point indexes for levels [0: [a,b,c,d], 1: [a,b,c,d,e,f,...], ...]\r\n\tlet levels = []\r\n\r\n\t// starting indexes of subranges in sub levels, levels.length * 4\r\n\tlet sublevels = []\r\n\r\n\t// unique group ids, sorted in z-curve fashion within levels\r\n\tlet groups = []\r\n\r\n\t// level offsets in `ids`\r\n\tlet offsets = []\r\n\r\n\r\n\t// sort points\r\n\tsort(0, 0, 1, ids, 0, 1)\r\n\r\n\r\n\t// return reordered ids with provided methods\r\n\t// save level offsets in output buffer\r\n\tlet offset = 0\r\n\tfor (let level = 0; level < levels.length; level++) {\r\n\t\tlet levelItems = levels[level]\r\n\t\tif (ids.set) ids.set(levelItems, offset)\r\n\t\telse {\r\n\t\t\tfor (let i = 0, l = levelItems.length; i < l; i++) {\r\n\t\t\t\tids[i + offset] = levelItems[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet nextOffset = offset + levels[level].length\r\n\t\toffsets[level] = [offset, nextOffset]\r\n\t\toffset = nextOffset\r\n\t}\r\n\r\n\tids.range = range\r\n\r\n\treturn ids\r\n\r\n\r\n\r\n\t// FIXME: it is possible to create one typed array heap and reuse that to avoid memory blow\r\n\tfunction sort (x, y, diam, ids, level, group) {\r\n\t\tif (!ids.length) return null\r\n\r\n\t\t// save first point as level representative\r\n\t\tlet levelItems = levels[level] || (levels[level] = [])\r\n\t\tlet levelGroups = groups[level] || (groups[level] = [])\r\n\t\tlet sublevel = sublevels[level] || (sublevels[level] = [])\r\n\t\tlet offset = levelItems.length\r\n\r\n\t\tlevel++\r\n\r\n\t\t// max depth reached - put all items into a first group\r\n\t\tif (level > maxDepth) {\r\n\t\t\tfor (let i = 0; i < ids.length; i++) {\r\n\t\t\t\tlevelItems.push(ids[i])\r\n\t\t\t\tlevelGroups.push(group)\r\n\t\t\t\tsublevel.push(null, null, null, null)\r\n\t\t\t}\r\n\r\n\t\t\treturn offset\r\n\t\t}\r\n\r\n\t\tlevelItems.push(ids[0])\r\n\t\tlevelGroups.push(group)\r\n\r\n\t\tif (ids.length <= 1) {\r\n\t\t\tsublevel.push(null, null, null, null)\r\n\t\t\treturn offset\r\n\t\t}\r\n\r\n\r\n\t\tlet d2 = diam * .5\r\n\t\tlet cx = x + d2, cy = y + d2\r\n\r\n\t\t// distribute points by 4 buckets\r\n\t\tlet lolo = [], lohi = [], hilo = [], hihi = []\r\n\r\n\t\tfor (let i = 1, l = ids.length; i < l; i++) {\r\n\t\t\tlet idx = ids[i],\r\n\t\t\t\tx = points[idx * 2],\r\n\t\t\t\ty = points[idx * 2 + 1]\r\n\t\t\tx < cx ? (y < cy ? lolo.push(idx) : lohi.push(idx)) : (y < cy ? hilo.push(idx) : hihi.push(idx))\r\n\t\t}\r\n\r\n\t\tgroup <<= 2\r\n\t\tsublevel.push(\r\n\t\t\tsort(x, y, d2, lolo, level, group),\r\n\t\t\tsort(x, cy, d2, lohi, level, group + 1),\r\n\t\t\tsort(cx, y, d2, hilo, level, group + 2),\r\n\t\t\tsort(cx, cy, d2, hihi, level, group + 3)\r\n\t\t)\r\n\r\n\t\treturn offset\r\n\t}\r\n\r\n\t// get all points within the passed range\r\n\tfunction range ( ...args ) {\r\n\t\tlet options\r\n\r\n\t\tif (isObj(args[args.length - 1])) {\r\n\t\t\tlet arg = args.pop()\r\n\r\n\t\t\t// detect if that was a rect object\r\n\t\t\tif (!args.length && (arg.x != null || arg.l != null || arg.left != null)) {\r\n\t\t\t\targs = [arg]\r\n\t\t\t\toptions = {}\r\n\t\t\t}\r\n\r\n\t\t\toptions = pick(arg, {\r\n\t\t\t\tlevel: 'level maxLevel',\r\n\t\t\t\td: 'd diam diameter r radius px pxSize pixel pixelSize maxD size minSize',\r\n\t\t\t\tlod: 'lod details ranges offsets'\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\toptions = {}\r\n\t\t}\r\n\r\n\t\tif (!args.length) args = bounds\r\n\r\n\t\tlet box = rect( ...args )\r\n\r\n\t\tlet [minX, minY, maxX, maxY] = [\r\n\t\t\tMath.min(box.x, box.x + box.width),\r\n\t\t\tMath.min(box.y, box.y + box.height),\r\n\t\t\tMath.max(box.x, box.x + box.width),\r\n\t\t\tMath.max(box.y, box.y + box.height)\r\n\t\t]\r\n\r\n\t\tlet [nminX, nminY, nmaxX, nmaxY] = normalize([minX, minY, maxX, maxY], bounds )\r\n\r\n\t\tlet maxLevel = defined(options.level, levels.length)\r\n\r\n\t\t// limit maxLevel by px size\r\n\t\tif (options.d != null) {\r\n\t\t\tlet d\r\n\t\t\tif (typeof options.d === 'number') d = [options.d, options.d]\r\n\t\t\telse if (options.d.length) d = options.d\r\n\r\n\t\t\tmaxLevel = Math.min(\r\n\t\t\t\tMath.max(\r\n\t\t\t\t\tMath.ceil(-log2(Math.abs(d[0]) / (bounds[2] - bounds[0]))),\r\n\t\t\t\t\tMath.ceil(-log2(Math.abs(d[1]) / (bounds[3] - bounds[1])))\r\n\t\t\t\t),\r\n\t\t\t\tmaxLevel\r\n\t\t\t)\r\n\t\t}\r\n\t\tmaxLevel = Math.min(maxLevel, levels.length)\r\n\r\n\t\t// return levels of details\r\n\t\tif (options.lod) {\r\n\t\t\treturn lod(nminX, nminY, nmaxX, nmaxY, maxLevel)\r\n\t\t}\r\n\r\n\r\n\r\n\t\t// do selection ids\r\n\t\tlet selection = []\r\n\r\n\t\t// FIXME: probably we can do LOD here beforehead\r\n\t\tselect( 0, 0, 1, 0, 0, 1)\r\n\r\n\t\tfunction select ( lox, loy, d, level, from, to ) {\r\n\t\t\tif (from === null || to === null) return\r\n\r\n\t\t\tlet hix = lox + d\r\n\t\t\tlet hiy = loy + d\r\n\r\n\t\t\t// if box does not intersect level - ignore\r\n\t\t\tif ( nminX > hix || nminY > hiy || nmaxX < lox || nmaxY < loy ) return\r\n\t\t\tif ( level >= maxLevel ) return\r\n\t\t\tif ( from === to ) return\r\n\r\n\t\t\t// if points fall into box range - take it\r\n\t\t\tlet levelItems = levels[level]\r\n\r\n\t\t\tif (to === undefined) to = levelItems.length\r\n\r\n\t\t\tfor (let i = from; i < to; i++) {\r\n\t\t\t\tlet id = levelItems[i]\r\n\r\n\t\t\t\tlet px = srcPoints[ id * 2 ]\r\n\t\t\t\tlet py = srcPoints[ id * 2 + 1 ]\r\n\r\n\t\t\t\tif ( px >= minX && px <= maxX && py >= minY && py <= maxY ) {selection.push(id)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// for every subsection do select\r\n\t\t\tlet offsets = sublevels[ level ]\r\n\t\t\tlet off0 = offsets[ from * 4 + 0 ]\r\n\t\t\tlet off1 = offsets[ from * 4 + 1 ]\r\n\t\t\tlet off2 = offsets[ from * 4 + 2 ]\r\n\t\t\tlet off3 = offsets[ from * 4 + 3 ]\r\n\t\t\tlet end = nextOffset(offsets, from + 1)\r\n\r\n\t\t\tlet d2 = d * .5\r\n\t\t\tlet nextLevel = level + 1\r\n\t\t\tselect( lox, loy, d2, nextLevel, off0, off1 || off2 || off3 || end)\r\n\t\t\tselect( lox, loy + d2, d2, nextLevel, off1, off2 || off3 || end)\r\n\t\t\tselect( lox + d2, loy, d2, nextLevel, off2, off3 || end)\r\n\t\t\tselect( lox + d2, loy + d2, d2, nextLevel, off3, end)\r\n\t\t}\r\n\r\n\t\tfunction nextOffset(offsets, from) {\r\n\t\t\tlet offset = null, i = 0\r\n\t\t\twhile(offset === null) {\r\n\t\t\t\toffset = offsets[ from * 4 + i ]\r\n\t\t\t\ti++\r\n\t\t\t\tif (i > offsets.length) return null\r\n\t\t\t}\r\n\t\t\treturn offset\r\n\t\t}\r\n\r\n\t\treturn selection\r\n\t}\r\n\r\n\t// get range offsets within levels to render lods appropriate for zoom level\r\n\t// TODO: it is possible to store minSize of a point to optimize neede level calc\r\n\tfunction lod (lox, loy, hix, hiy, maxLevel) {\r\n\t\tlet ranges = []\r\n\r\n\t\tfor (let level = 0; level < maxLevel; level++) {\r\n\t\t\tlet levelGroups = groups[level]\r\n\t\t\tlet from = offsets[level][0]\r\n\r\n\t\t\tlet levelGroupStart = group(lox, loy, level)\r\n\t\t\tlet levelGroupEnd = group(hix, hiy, level)\r\n\r\n\t\t\t// FIXME: utilize sublevels to speed up search range here\r\n\t\t\tlet startOffset = search.ge(levelGroups, levelGroupStart)\r\n\t\t\tlet endOffset = search.gt(levelGroups, levelGroupEnd, startOffset, levelGroups.length - 1)\r\n\r\n\t\t\tranges[level] = [startOffset + from, endOffset + from]\r\n\t\t}\r\n\r\n\t\treturn ranges\r\n\t}\r\n\r\n\t// get group id closest to the x,y coordinate, corresponding to a level\r\n\tfunction group (x, y, level) {\r\n\t\tlet group = 1\r\n\r\n\t\tlet cx = .5, cy = .5\r\n\t\tlet diam = .5\r\n\r\n\t\tfor (let i = 0; i < level; i++) {\r\n\t\t\tgroup <<= 2\r\n\r\n\t\t\tgroup += x < cx ? (y < cy ? 0 : 1) : (y < cy ? 2 : 3)\r\n\r\n\t\t\tdiam *= .5\r\n\r\n\t\t\tcx += x < cx ? -diam : diam\r\n\t\t\tcy += y < cy ? -diam : diam\r\n\t\t}\r\n\r\n\t\treturn group\r\n\t}\r\n}\r\n\r\n\r\n// normalize points by bounds\r\nfunction normalize (pts, bounds) {\r\n\tlet [lox, loy, hix, hiy] = bounds\r\n\tlet scaleX = 1.0 / (hix - lox)\r\n\tlet scaleY = 1.0 / (hiy - loy)\r\n\tlet result = new Array(pts.length)\r\n\r\n\tfor (let i = 0, n = pts.length / 2; i < n; i++) {\r\n\t\tresult[2*i] = clamp((pts[2*i] - lox) * scaleX, 0, 1)\r\n\t\tresult[2*i+1] = clamp((pts[2*i+1] - loy) * scaleY, 0, 1)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n",null]}