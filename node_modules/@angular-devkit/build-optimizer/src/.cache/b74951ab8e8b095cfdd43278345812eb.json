{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattergl/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattergl/attributes.js","mtime":1529418310741},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar plotAttrs = require('../../plots/attributes');\nvar scatterAttrs = require('../scatter/attributes');\nvar colorAttrs = require('../../components/colorscale/color_attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar DASHES = require('./constants').DASHES;\n\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\n\nvar attrs = module.exports = overrideAll({\n    x: scatterAttrs.x,\n    x0: scatterAttrs.x0,\n    dx: scatterAttrs.dx,\n    y: scatterAttrs.y,\n    y0: scatterAttrs.y0,\n    dy: scatterAttrs.dy,\n\n    text: extendFlat({}, scatterAttrs.text, {\n        description: [\n            'Sets text elements associated with each (x,y) pair to appear on hover.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (x,y) coordinates.'\n        ].join(' ')\n    }),\n    mode: {\n        valType: 'flaglist',\n        flags: ['lines', 'markers'],\n        extras: ['none'],\n        role: 'info',\n        description: [\n            'Determines the drawing mode for this scatter trace.'\n        ].join(' ')\n    },\n    line: {\n        color: scatterLineAttrs.color,\n        width: scatterLineAttrs.width,\n        dash: {\n            valType: 'enumerated',\n            values: Object.keys(DASHES),\n            dflt: 'solid',\n            role: 'style',\n            description: 'Sets the style of the lines.'\n        }\n    },\n    marker: extendFlat({}, colorAttrs('marker'), {\n        symbol: scatterMarkerAttrs.symbol,\n        size: scatterMarkerAttrs.size,\n        sizeref: scatterMarkerAttrs.sizeref,\n        sizemin: scatterMarkerAttrs.sizemin,\n        sizemode: scatterMarkerAttrs.sizemode,\n        opacity: scatterMarkerAttrs.opacity,\n        showscale: scatterMarkerAttrs.showscale,\n        colorbar: scatterMarkerAttrs.colorbar,\n        line: extendFlat({}, colorAttrs('marker.line'), {\n            width: scatterMarkerLineAttrs.width\n        })\n    }),\n    connectgaps: scatterAttrs.connectgaps,\n    fill: scatterAttrs.fill,\n    fillcolor: scatterAttrs.fillcolor,\n\n    hoveron: scatterAttrs.hoveron,\n\n    selected: {\n        marker: scatterAttrs.selected.marker\n    },\n    unselected: {\n        marker: scatterAttrs.unselected.marker\n    },\n\n    opacity: plotAttrs.opacity\n\n}, 'calc', 'nested');\n\nattrs.x.editType = attrs.y.editType = attrs.x0.editType = attrs.y0.editType = 'calc+clearAxisTypes';\n",null]}