{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/alpha-complex/alpha.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/alpha-complex/alpha.js","mtime":1529418306067},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\n\nmodule.exports = alphaComplex\n\nvar delaunay = require('delaunay-triangulate')\nvar circumradius = require('circumradius')\n\nfunction alphaComplex(alpha, points) {\n  return delaunay(points).filter(function(cell) {\n    var simplex = new Array(cell.length)\n    for(var i=0; i<cell.length; ++i) {\n      simplex[i] = points[cell[i]]\n    }\n    return circumradius(simplex) * alpha < 1\n  })\n}",null]}