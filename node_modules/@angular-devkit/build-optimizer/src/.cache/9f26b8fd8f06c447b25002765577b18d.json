{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/annotations/calc_autorange.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/annotations/calc_autorange.js","mtime":1529418310602},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar draw = require('./draw').draw;\n\n\nmodule.exports = function calcAutorange(gd) {\n    var fullLayout = gd._fullLayout,\n        annotationList = Lib.filterVisible(fullLayout.annotations);\n\n    if(!annotationList.length || !gd._fullData.length) return;\n\n    var annotationAxes = {};\n    annotationList.forEach(function(ann) {\n        annotationAxes[ann.xref] = 1;\n        annotationAxes[ann.yref] = 1;\n    });\n\n    for(var axId in annotationAxes) {\n        var ax = Axes.getFromId(gd, axId);\n        if(ax && ax.autorange) {\n            return Lib.syncOrAsync([\n                draw,\n                annAutorange\n            ], gd);\n        }\n    }\n};\n\nfunction annAutorange(gd) {\n    var fullLayout = gd._fullLayout;\n\n    // find the bounding boxes for each of these annotations'\n    // relative to their anchor points\n    // use the arrow and the text bg rectangle,\n    // as the whole anno may include hidden text in its bbox\n    Lib.filterVisible(fullLayout.annotations).forEach(function(ann) {\n        var xa = Axes.getFromId(gd, ann.xref),\n            ya = Axes.getFromId(gd, ann.yref),\n            headSize = 3 * ann.arrowsize * ann.arrowwidth || 0,\n            startHeadSize = 3 * ann.startarrowsize * ann.arrowwidth || 0;\n\n        var headPlus, headMinus, startHeadPlus, startHeadMinus;\n\n        if(xa && xa.autorange) {\n            headPlus = headSize + ann.xshift;\n            headMinus = headSize - ann.xshift;\n            startHeadPlus = startHeadSize + ann.xshift;\n            startHeadMinus = startHeadSize - ann.xshift;\n\n            if(ann.axref === ann.xref) {\n                // expand for the arrowhead (padded by arrowhead)\n                Axes.expand(xa, [xa.r2c(ann.x)], {\n                    ppadplus: headPlus,\n                    ppadminus: headMinus\n                });\n                // again for the textbox (padded by textbox)\n                Axes.expand(xa, [xa.r2c(ann.ax)], {\n                    ppadplus: Math.max(ann._xpadplus, startHeadPlus),\n                    ppadminus: Math.max(ann._xpadminus, startHeadMinus)\n                });\n            }\n            else {\n                startHeadPlus = ann.ax ? startHeadPlus + ann.ax : startHeadPlus;\n                startHeadMinus = ann.ax ? startHeadMinus - ann.ax : startHeadMinus;\n                Axes.expand(xa, [xa.r2c(ann.x)], {\n                    ppadplus: Math.max(ann._xpadplus, headPlus, startHeadPlus),\n                    ppadminus: Math.max(ann._xpadminus, headMinus, startHeadMinus)\n                });\n            }\n        }\n\n        if(ya && ya.autorange) {\n            headPlus = headSize - ann.yshift;\n            headMinus = headSize + ann.yshift;\n            startHeadPlus = startHeadSize - ann.yshift;\n            startHeadMinus = startHeadSize + ann.yshift;\n\n            if(ann.ayref === ann.yref) {\n                Axes.expand(ya, [ya.r2c(ann.y)], {\n                    ppadplus: headPlus,\n                    ppadminus: headMinus\n                });\n                Axes.expand(ya, [ya.r2c(ann.ay)], {\n                    ppadplus: Math.max(ann._ypadplus, startHeadPlus),\n                    ppadminus: Math.max(ann._ypadminus, startHeadMinus)\n                });\n            }\n            else {\n                startHeadPlus = ann.ay ? startHeadPlus + ann.ay : startHeadPlus;\n                startHeadMinus = ann.ay ? startHeadMinus - ann.ay : startHeadMinus;\n                Axes.expand(ya, [ya.r2c(ann.y)], {\n                    ppadplus: Math.max(ann._ypadplus, headPlus, startHeadPlus),\n                    ppadminus: Math.max(ann._ypadminus, headMinus, startHeadMinus)\n                });\n            }\n        }\n    });\n}\n",null]}