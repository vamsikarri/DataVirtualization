{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/legend/style.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/legend/style.js","mtime":1529418310619},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Drawing = require('../drawing');\nvar Color = require('../color');\n\nvar subTypes = require('../../traces/scatter/subtypes');\nvar stylePie = require('../../traces/pie/style_one');\n\nmodule.exports = function style(s, gd) {\n    s.each(function(d) {\n        var traceGroup = d3.select(this);\n\n        var layers = Lib.ensureSingle(traceGroup, 'g', 'layers');\n        layers.style('opacity', d[0].trace.opacity);\n\n        var fill = layers\n            .selectAll('g.legendfill')\n                .data([d]);\n        fill.enter().append('g')\n            .classed('legendfill', true);\n\n        var line = layers\n            .selectAll('g.legendlines')\n                .data([d]);\n        line.enter().append('g')\n            .classed('legendlines', true);\n\n        var symbol = layers\n            .selectAll('g.legendsymbols')\n                .data([d]);\n        symbol.enter().append('g')\n            .classed('legendsymbols', true);\n\n        symbol.selectAll('g.legendpoints')\n            .data([d])\n          .enter().append('g')\n            .classed('legendpoints', true);\n    })\n    .each(styleBars)\n    .each(styleBoxes)\n    .each(stylePies)\n    .each(styleLines)\n    .each(stylePoints)\n    .each(styleCandles)\n    .each(styleOHLC);\n\n    function styleLines(d) {\n        var trace = d[0].trace;\n        var showFill = trace.visible && trace.fill && trace.fill !== 'none';\n        var showLine = subTypes.hasLines(trace);\n        var contours = trace.contours;\n\n        if(contours && contours.type === 'constraint') {\n            showLine = contours.showlines;\n            showFill = contours._operation !== '=';\n        }\n\n        var fill = d3.select(this).select('.legendfill').selectAll('path')\n            .data(showFill ? [d] : []);\n        fill.enter().append('path').classed('js-fill', true);\n        fill.exit().remove();\n        fill.attr('d', 'M5,0h30v6h-30z')\n            .call(Drawing.fillGroupStyle);\n\n        var line = d3.select(this).select('.legendlines').selectAll('path')\n            .data(showLine ? [d] : []);\n        line.enter().append('path').classed('js-line', true)\n            .attr('d', 'M5,0h30');\n        line.exit().remove();\n        line.call(Drawing.lineGroupStyle);\n    }\n\n    function stylePoints(d) {\n        var d0 = d[0],\n            trace = d0.trace,\n            showMarkers = subTypes.hasMarkers(trace),\n            showText = subTypes.hasText(trace),\n            showLines = subTypes.hasLines(trace);\n\n        var dMod, tMod;\n\n        // 'scatter3d' and 'scattergeo' don't use gd.calcdata yet;\n        // use d0.trace to infer arrayOk attributes\n\n        function boundVal(attrIn, arrayToValFn, bounds) {\n            var valIn = Lib.nestedProperty(trace, attrIn).get(),\n                valToBound = (Array.isArray(valIn) && arrayToValFn) ?\n                    arrayToValFn(valIn) : valIn;\n\n            if(bounds) {\n                if(valToBound < bounds[0]) return bounds[0];\n                else if(valToBound > bounds[1]) return bounds[1];\n            }\n            return valToBound;\n        }\n\n        function pickFirst(array) { return array[0]; }\n\n        // constrain text, markers, etc so they'll fit on the legend\n        if(showMarkers || showText || showLines) {\n            var dEdit = {};\n            var tEdit = {};\n\n            if(showMarkers) {\n                dEdit.mc = boundVal('marker.color', pickFirst);\n                dEdit.mo = boundVal('marker.opacity', Lib.mean, [0.2, 1]);\n                dEdit.ms = boundVal('marker.size', Lib.mean, [2, 16]);\n                dEdit.mlc = boundVal('marker.line.color', pickFirst);\n                dEdit.mlw = boundVal('marker.line.width', Lib.mean, [0, 5]);\n                tEdit.marker = {\n                    sizeref: 1,\n                    sizemin: 1,\n                    sizemode: 'diameter'\n                };\n            }\n\n            if(showLines) {\n                tEdit.line = {\n                    width: boundVal('line.width', pickFirst, [0, 10])\n                };\n            }\n\n            if(showText) {\n                dEdit.tx = 'Aa';\n                dEdit.tp = boundVal('textposition', pickFirst);\n                dEdit.ts = 10;\n                dEdit.tc = boundVal('textfont.color', pickFirst);\n                dEdit.tf = boundVal('textfont.family', pickFirst);\n            }\n\n            dMod = [Lib.minExtend(d0, dEdit)];\n            tMod = Lib.minExtend(trace, tEdit);\n\n            // always show legend items in base state\n            tMod.selectedpoints = null;\n        }\n\n        var ptgroup = d3.select(this).select('g.legendpoints');\n\n        var pts = ptgroup.selectAll('path.scatterpts')\n            .data(showMarkers ? dMod : []);\n        pts.enter().append('path').classed('scatterpts', true)\n            .attr('transform', 'translate(20,0)');\n        pts.exit().remove();\n        pts.call(Drawing.pointStyle, tMod, gd);\n\n        // 'mrc' is set in pointStyle and used in textPointStyle:\n        // constrain it here\n        if(showMarkers) dMod[0].mrc = 3;\n\n        var txt = ptgroup.selectAll('g.pointtext')\n            .data(showText ? dMod : []);\n        txt.enter()\n            .append('g').classed('pointtext', true)\n                .append('text').attr('transform', 'translate(20,0)');\n        txt.exit().remove();\n        txt.selectAll('text').call(Drawing.textPointStyle, tMod, gd);\n    }\n\n    function styleBars(d) {\n        var trace = d[0].trace,\n            marker = trace.marker || {},\n            markerLine = marker.line || {},\n            barpath = d3.select(this).select('g.legendpoints')\n                .selectAll('path.legendbar')\n                .data(Registry.traceIs(trace, 'bar') ? [d] : []);\n        barpath.enter().append('path').classed('legendbar', true)\n            .attr('d', 'M6,6H-6V-6H6Z')\n            .attr('transform', 'translate(20,0)');\n        barpath.exit().remove();\n        barpath.each(function(d) {\n            var p = d3.select(this),\n                d0 = d[0],\n                w = (d0.mlw + 1 || markerLine.width + 1) - 1;\n\n            p.style('stroke-width', w + 'px')\n                .call(Color.fill, d0.mc || marker.color);\n\n            if(w) {\n                p.call(Color.stroke, d0.mlc || markerLine.color);\n            }\n        });\n    }\n\n    function styleBoxes(d) {\n        var trace = d[0].trace,\n            pts = d3.select(this).select('g.legendpoints')\n                .selectAll('path.legendbox')\n                .data(Registry.traceIs(trace, 'box-violin') && trace.visible ? [d] : []);\n        pts.enter().append('path').classed('legendbox', true)\n            // if we want the median bar, prepend M6,0H-6\n            .attr('d', 'M6,6H-6V-6H6Z')\n            .attr('transform', 'translate(20,0)');\n        pts.exit().remove();\n        pts.each(function() {\n            var w = trace.line.width,\n                p = d3.select(this);\n\n            p.style('stroke-width', w + 'px')\n                .call(Color.fill, trace.fillcolor);\n\n            if(w) {\n                Color.stroke(p, trace.line.color);\n            }\n        });\n    }\n\n    function styleCandles(d) {\n        var trace = d[0].trace,\n            pts = d3.select(this).select('g.legendpoints')\n                .selectAll('path.legendcandle')\n                .data(trace.type === 'candlestick' && trace.visible ? [d, d] : []);\n        pts.enter().append('path').classed('legendcandle', true)\n            .attr('d', function(_, i) {\n                if(i) return 'M-15,0H-8M-8,6V-6H8Z'; // increasing\n                return 'M15,0H8M8,-6V6H-8Z'; // decreasing\n            })\n            .attr('transform', 'translate(20,0)')\n            .style('stroke-miterlimit', 1);\n        pts.exit().remove();\n        pts.each(function(_, i) {\n            var container = trace[i ? 'increasing' : 'decreasing'];\n            var w = container.line.width,\n                p = d3.select(this);\n\n            p.style('stroke-width', w + 'px')\n                .call(Color.fill, container.fillcolor);\n\n            if(w) {\n                Color.stroke(p, container.line.color);\n            }\n        });\n    }\n\n    function styleOHLC(d) {\n        var trace = d[0].trace,\n            pts = d3.select(this).select('g.legendpoints')\n                .selectAll('path.legendohlc')\n                .data(trace.type === 'ohlc' && trace.visible ? [d, d] : []);\n        pts.enter().append('path').classed('legendohlc', true)\n            .attr('d', function(_, i) {\n                if(i) return 'M-15,0H0M-8,-6V0'; // increasing\n                return 'M15,0H0M8,6V0'; // decreasing\n            })\n            .attr('transform', 'translate(20,0)')\n            .style('stroke-miterlimit', 1);\n        pts.exit().remove();\n        pts.each(function(_, i) {\n            var container = trace[i ? 'increasing' : 'decreasing'];\n            var w = container.line.width,\n                p = d3.select(this);\n\n            p.style('fill', 'none')\n                .call(Drawing.dashLine, container.line.dash, w);\n\n            if(w) {\n                Color.stroke(p, container.line.color);\n            }\n        });\n    }\n\n    function stylePies(d) {\n        var trace = d[0].trace,\n            pts = d3.select(this).select('g.legendpoints')\n                .selectAll('path.legendpie')\n                .data(Registry.traceIs(trace, 'pie') && trace.visible ? [d] : []);\n        pts.enter().append('path').classed('legendpie', true)\n            .attr('d', 'M6,6H-6V-6H6Z')\n            .attr('transform', 'translate(20,0)');\n        pts.exit().remove();\n\n        if(pts.size()) pts.call(stylePie, d[0], trace);\n    }\n};\n",null]}