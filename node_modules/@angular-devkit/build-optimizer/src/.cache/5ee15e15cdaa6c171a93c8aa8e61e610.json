{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorbar/draw.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorbar/draw.js","mtime":1529418310607},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\n\nvar Plots = require('../../plots/plots');\nvar Registry = require('../../registry');\nvar Axes = require('../../plots/cartesian/axes');\nvar dragElement = require('../dragelement');\nvar Lib = require('../../lib');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar setCursor = require('../../lib/setcursor');\nvar Drawing = require('../drawing');\nvar Color = require('../color');\nvar Titles = require('../titles');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar LINE_SPACING = require('../../constants/alignment').LINE_SPACING;\n\nvar handleAxisDefaults = require('../../plots/cartesian/axis_defaults');\nvar handleAxisPositionDefaults = require('../../plots/cartesian/position_defaults');\nvar axisLayoutAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar attributes = require('./attributes');\nvar cn = require('./constants').cn;\n\nmodule.exports = function draw(gd, id) {\n    // opts: options object, containing everything from attributes\n    // plus a few others that are the equivalent of the colorbar \"data\"\n    var opts = {};\n    Object.keys(attributes).forEach(function(k) {\n        opts[k] = null;\n    });\n    // fillcolor can be a d3 scale, domain is z values, range is colors\n    // or leave it out for no fill,\n    // or set to a string constant for single-color fill\n    opts.fillcolor = null;\n    // line.color has the same options as fillcolor\n    opts.line = {color: null, width: null, dash: null};\n    // levels of lines to draw.\n    // note that this DOES NOT determine the extent of the bar\n    // that's given by the domain of fillcolor\n    // (or line.color if no fillcolor domain)\n    opts.levels = {start: null, end: null, size: null};\n    // separate fill levels (for example, heatmap coloring of a\n    // contour map) if this is omitted, fillcolors will be\n    // evaluated halfway between levels\n    opts.filllevels = null;\n\n    function component() {\n        var fullLayout = gd._fullLayout,\n            gs = fullLayout._size;\n        if((typeof opts.fillcolor !== 'function') &&\n                (typeof opts.line.color !== 'function')) {\n            fullLayout._infolayer.selectAll('g.' + id).remove();\n            return;\n        }\n        var zrange = d3.extent(((typeof opts.fillcolor === 'function') ?\n            opts.fillcolor : opts.line.color).domain());\n        var linelevels = [];\n        var filllevels = [];\n        var linecolormap = typeof opts.line.color === 'function' ?\n            opts.line.color : function() { return opts.line.color; };\n        var fillcolormap = typeof opts.fillcolor === 'function' ?\n            opts.fillcolor : function() { return opts.fillcolor; };\n        var l;\n        var i;\n\n        var l0 = opts.levels.end + opts.levels.size / 100,\n            ls = opts.levels.size,\n            zr0 = (1.001 * zrange[0] - 0.001 * zrange[1]),\n            zr1 = (1.001 * zrange[1] - 0.001 * zrange[0]);\n        for(i = 0; i < 1e5; i++) {\n            l = opts.levels.start + i * ls;\n            if(ls > 0 ? (l >= l0) : (l <= l0)) break;\n            if(l > zr0 && l < zr1) linelevels.push(l);\n        }\n\n        if(typeof opts.fillcolor === 'function') {\n            if(opts.filllevels) {\n                l0 = opts.filllevels.end + opts.filllevels.size / 100;\n                ls = opts.filllevels.size;\n                for(i = 0; i < 1e5; i++) {\n                    l = opts.filllevels.start + i * ls;\n                    if(ls > 0 ? (l >= l0) : (l <= l0)) break;\n                    if(l > zrange[0] && l < zrange[1]) filllevels.push(l);\n                }\n            }\n            else {\n                filllevels = linelevels.map(function(v) {\n                    return v - opts.levels.size / 2;\n                });\n                filllevels.push(filllevels[filllevels.length - 1] +\n                    opts.levels.size);\n            }\n        }\n        else if(opts.fillcolor && typeof opts.fillcolor === 'string') {\n            // doesn't matter what this value is, with a single value\n            // we'll make a single fill rect covering the whole bar\n            filllevels = [0];\n        }\n\n        if(opts.levels.size < 0) {\n            linelevels.reverse();\n            filllevels.reverse();\n        }\n\n        // now make a Plotly Axes object to scale with and draw ticks\n        // TODO: does not support orientation other than right\n\n        // we calculate pixel sizes based on the specified graph size,\n        // not the actual (in case something pushed the margins around)\n        // which is a little odd but avoids an odd iterative effect\n        // when the colorbar itself is pushing the margins.\n        // but then the fractional size is calculated based on the\n        // actual graph size, so that the axes will size correctly.\n        var originalPlotHeight = fullLayout.height - fullLayout.margin.t - fullLayout.margin.b,\n            originalPlotWidth = fullLayout.width - fullLayout.margin.l - fullLayout.margin.r,\n            thickPx = Math.round(opts.thickness *\n                (opts.thicknessmode === 'fraction' ? originalPlotWidth : 1)),\n            thickFrac = thickPx / gs.w,\n            lenPx = Math.round(opts.len *\n                (opts.lenmode === 'fraction' ? originalPlotHeight : 1)),\n            lenFrac = lenPx / gs.h,\n            xpadFrac = opts.xpad / gs.w,\n            yExtraPx = (opts.borderwidth + opts.outlinewidth) / 2,\n            ypadFrac = opts.ypad / gs.h,\n\n            // x positioning: do it initially just for left anchor,\n            // then fix at the end (since we don't know the width yet)\n            xLeft = Math.round(opts.x * gs.w + opts.xpad),\n            // for dragging... this is getting a little muddled...\n            xLeftFrac = opts.x - thickFrac *\n                ({middle: 0.5, right: 1}[opts.xanchor]||0),\n\n            // y positioning we can do correctly from the start\n            yBottomFrac = opts.y + lenFrac *\n                (({top: -0.5, bottom: 0.5}[opts.yanchor] || 0) - 0.5),\n            yBottomPx = Math.round(gs.h * (1 - yBottomFrac)),\n            yTopPx = yBottomPx - lenPx,\n            titleEl,\n            cbAxisIn = {\n                type: 'linear',\n                range: zrange,\n                tickmode: opts.tickmode,\n                nticks: opts.nticks,\n                tick0: opts.tick0,\n                dtick: opts.dtick,\n                tickvals: opts.tickvals,\n                ticktext: opts.ticktext,\n                ticks: opts.ticks,\n                ticklen: opts.ticklen,\n                tickwidth: opts.tickwidth,\n                tickcolor: opts.tickcolor,\n                showticklabels: opts.showticklabels,\n                tickfont: opts.tickfont,\n                tickangle: opts.tickangle,\n                tickformat: opts.tickformat,\n                exponentformat: opts.exponentformat,\n                separatethousands: opts.separatethousands,\n                showexponent: opts.showexponent,\n                showtickprefix: opts.showtickprefix,\n                tickprefix: opts.tickprefix,\n                showticksuffix: opts.showticksuffix,\n                ticksuffix: opts.ticksuffix,\n                title: opts.title,\n                titlefont: opts.titlefont,\n                showline: true,\n                anchor: 'free',\n                position: 1\n            },\n            cbAxisOut = {\n                type: 'linear',\n                _id: 'y' + id\n            },\n            axisOptions = {\n                letter: 'y',\n                font: fullLayout.font,\n                noHover: true,\n                calendar: fullLayout.calendar  // not really necessary (yet?)\n            };\n\n        // Coerce w.r.t. Axes layoutAttributes:\n        // re-use axes.js logic without updating _fullData\n        function coerce(attr, dflt) {\n            return Lib.coerce(cbAxisIn, cbAxisOut, axisLayoutAttrs, attr, dflt);\n        }\n\n        // Prepare the Plotly axis object\n        handleAxisDefaults(cbAxisIn, cbAxisOut, coerce, axisOptions, fullLayout);\n        handleAxisPositionDefaults(cbAxisIn, cbAxisOut, coerce, axisOptions);\n\n        // position can't go in through supplyDefaults\n        // because that restricts it to [0,1]\n        cbAxisOut.position = opts.x + xpadFrac + thickFrac;\n\n        // save for other callers to access this axis\n        component.axis = cbAxisOut;\n\n        if(['top', 'bottom'].indexOf(opts.titleside) !== -1) {\n            cbAxisOut.titleside = opts.titleside;\n            cbAxisOut.titlex = opts.x + xpadFrac;\n            cbAxisOut.titley = yBottomFrac +\n                (opts.titleside === 'top' ? lenFrac - ypadFrac : ypadFrac);\n        }\n\n        if(opts.line.color && opts.tickmode === 'auto') {\n            cbAxisOut.tickmode = 'linear';\n            cbAxisOut.tick0 = opts.levels.start;\n            var dtick = opts.levels.size;\n            // expand if too many contours, so we don't get too many ticks\n            var autoNtick = Lib.constrain(\n                    (yBottomPx - yTopPx) / 50, 4, 15) + 1,\n                dtFactor = (zrange[1] - zrange[0]) /\n                    ((opts.nticks || autoNtick) * dtick);\n            if(dtFactor > 1) {\n                var dtexp = Math.pow(10, Math.floor(\n                    Math.log(dtFactor) / Math.LN10));\n                dtick *= dtexp * Lib.roundUp(dtFactor / dtexp, [2, 5, 10]);\n                // if the contours are at round multiples, reset tick0\n                // so they're still at round multiples. Otherwise,\n                // keep the first label on the first contour level\n                if((Math.abs(opts.levels.start) /\n                        opts.levels.size + 1e-6) % 1 < 2e-6) {\n                    cbAxisOut.tick0 = 0;\n                }\n            }\n            cbAxisOut.dtick = dtick;\n        }\n\n        // set domain after init, because we may want to\n        // allow it outside [0,1]\n        cbAxisOut.domain = [\n            yBottomFrac + ypadFrac,\n            yBottomFrac + lenFrac - ypadFrac\n        ];\n        cbAxisOut.setScale();\n\n        // now draw the elements\n        var container = Lib.ensureSingle(fullLayout._infolayer, 'g', id, function(s) {\n            s.classed(cn.colorbar, true)\n                .each(function() {\n                    var s = d3.select(this);\n                    s.append('rect').classed(cn.cbbg, true);\n                    s.append('g').classed(cn.cbfills, true);\n                    s.append('g').classed(cn.cblines, true);\n                    s.append('g').classed(cn.cbaxis, true).classed(cn.crisp, true);\n                    s.append('g').classed(cn.cbtitleunshift, true)\n                        .append('g').classed(cn.cbtitle, true);\n                    s.append('rect').classed(cn.cboutline, true);\n                    s.select('.cbtitle').datum(0);\n                });\n        });\n\n        container.attr('transform', 'translate(' + Math.round(gs.l) +\n            ',' + Math.round(gs.t) + ')');\n        // TODO: this opposite transform is a hack until we make it\n        // more rational which items get this offset\n        var titleCont = container.select('.cbtitleunshift')\n            .attr('transform', 'translate(-' +\n                Math.round(gs.l) + ',-' +\n                Math.round(gs.t) + ')');\n\n        cbAxisOut._axislayer = container.select('.cbaxis');\n        var titleHeight = 0;\n        if(['top', 'bottom'].indexOf(opts.titleside) !== -1) {\n            // draw the title so we know how much room it needs\n            // when we squish the axis. This one only applies to\n            // top or bottom titles, not right side.\n            var x = gs.l + (opts.x + xpadFrac) * gs.w,\n                fontSize = cbAxisOut.titlefont.size,\n                y;\n\n            if(opts.titleside === 'top') {\n                y = (1 - (yBottomFrac + lenFrac - ypadFrac)) * gs.h +\n                    gs.t + 3 + fontSize * 0.75;\n            }\n            else {\n                y = (1 - (yBottomFrac + ypadFrac)) * gs.h +\n                    gs.t - 3 - fontSize * 0.25;\n            }\n            drawTitle(cbAxisOut._id + 'title', {\n                attributes: {x: x, y: y, 'text-anchor': 'start'}\n            });\n        }\n\n        function drawAxis() {\n            if(['top', 'bottom'].indexOf(opts.titleside) !== -1) {\n                // squish the axis top to make room for the title\n                var titleGroup = container.select('.cbtitle'),\n                    titleText = titleGroup.select('text'),\n                    titleTrans =\n                        [-opts.outlinewidth / 2, opts.outlinewidth / 2],\n                    mathJaxNode = titleGroup\n                        .select('.h' + cbAxisOut._id + 'title-math-group')\n                        .node(),\n                    lineSize = 15.6;\n                if(titleText.node()) {\n                    lineSize =\n                        parseInt(titleText.node().style.fontSize, 10) * LINE_SPACING;\n                }\n                if(mathJaxNode) {\n                    titleHeight = Drawing.bBox(mathJaxNode).height;\n                    if(titleHeight > lineSize) {\n                        // not entirely sure how mathjax is doing\n                        // vertical alignment, but this seems to work.\n                        titleTrans[1] -= (titleHeight - lineSize) / 2;\n                    }\n                }\n                else if(titleText.node() &&\n                        !titleText.classed(cn.jsPlaceholder)) {\n                    titleHeight = Drawing.bBox(titleText.node()).height;\n                }\n                if(titleHeight) {\n                    // buffer btwn colorbar and title\n                    // TODO: configurable\n                    titleHeight += 5;\n\n                    if(opts.titleside === 'top') {\n                        cbAxisOut.domain[1] -= titleHeight / gs.h;\n                        titleTrans[1] *= -1;\n                    }\n                    else {\n                        cbAxisOut.domain[0] += titleHeight / gs.h;\n                        var nlines = svgTextUtils.lineCount(titleText);\n                        titleTrans[1] += (1 - nlines) * lineSize;\n                    }\n\n                    titleGroup.attr('transform',\n                        'translate(' + titleTrans + ')');\n\n                    cbAxisOut.setScale();\n                }\n            }\n\n            container.selectAll('.cbfills,.cblines')\n                .attr('transform', 'translate(0,' +\n                    Math.round(gs.h * (1 - cbAxisOut.domain[1])) + ')');\n\n            cbAxisOut._axislayer.attr('transform', 'translate(0,' +\n                Math.round(-gs.t) + ')');\n\n            var fills = container.select('.cbfills')\n                .selectAll('rect.cbfill')\n                    .data(filllevels);\n            fills.enter().append('rect')\n                .classed(cn.cbfill, true)\n                .style('stroke', 'none');\n            fills.exit().remove();\n            fills.each(function(d, i) {\n                var z = [\n                    (i === 0) ? zrange[0] :\n                        (filllevels[i] + filllevels[i - 1]) / 2,\n                    (i === filllevels.length - 1) ? zrange[1] :\n                        (filllevels[i] + filllevels[i + 1]) / 2\n                ]\n                .map(cbAxisOut.c2p)\n                .map(Math.round);\n\n                // offset the side adjoining the next rectangle so they\n                // overlap, to prevent antialiasing gaps\n                if(i !== filllevels.length - 1) {\n                    z[1] += (z[1] > z[0]) ? 1 : -1;\n                }\n\n\n                // Tinycolor can't handle exponents and\n                // at this scale, removing it makes no difference.\n                var colorString = fillcolormap(d).replace('e-', ''),\n                    opaqueColor = tinycolor(colorString).toHexString();\n\n                // Colorbar cannot currently support opacities so we\n                // use an opaque fill even when alpha channels present\n                d3.select(this).attr({\n                    x: xLeft,\n                    width: Math.max(thickPx, 2),\n                    y: d3.min(z),\n                    height: Math.max(d3.max(z) - d3.min(z), 2),\n                    fill: opaqueColor\n                });\n            });\n\n            var lines = container.select('.cblines')\n                .selectAll('path.cbline')\n                    .data(opts.line.color && opts.line.width ?\n                        linelevels : []);\n            lines.enter().append('path')\n                .classed(cn.cbline, true);\n            lines.exit().remove();\n            lines.each(function(d) {\n                d3.select(this)\n                    .attr('d', 'M' + xLeft + ',' +\n                        (Math.round(cbAxisOut.c2p(d)) + (opts.line.width / 2) % 1) +\n                        'h' + thickPx)\n                    .call(Drawing.lineGroupStyle,\n                        opts.line.width, linecolormap(d), opts.line.dash);\n            });\n\n            // force full redraw of labels and ticks\n            cbAxisOut._axislayer.selectAll('g.' + cbAxisOut._id + 'tick,path')\n                .remove();\n\n            cbAxisOut._pos = xLeft + thickPx +\n                (opts.outlinewidth||0) / 2 - (opts.ticks === 'outside' ? 1 : 0);\n            cbAxisOut.side = 'right';\n\n            // separate out axis and title drawing,\n            // so we don't need such complicated logic in Titles.draw\n            // if title is on the top or bottom, we've already drawn it\n            // this title call only handles side=right\n            return Lib.syncOrAsync([\n                function() {\n                    return Axes.doTicksSingle(gd, cbAxisOut, true);\n                },\n                function() {\n                    if(['top', 'bottom'].indexOf(opts.titleside) === -1) {\n                        var fontSize = cbAxisOut.titlefont.size,\n                            y = cbAxisOut._offset + cbAxisOut._length / 2,\n                            x = gs.l + (cbAxisOut.position || 0) * gs.w + ((cbAxisOut.side === 'right') ?\n                                10 + fontSize * ((cbAxisOut.showticklabels ? 1 : 0.5)) :\n                                -10 - fontSize * ((cbAxisOut.showticklabels ? 0.5 : 0)));\n\n                        // the 'h' + is a hack to get around the fact that\n                        // convertToTspans rotates any 'y...' class by 90 degrees.\n                        // TODO: find a better way to control this.\n                        drawTitle('h' + cbAxisOut._id + 'title', {\n                            avoid: {\n                                selection: d3.select(gd).selectAll('g.' + cbAxisOut._id + 'tick'),\n                                side: opts.titleside,\n                                offsetLeft: gs.l,\n                                offsetTop: 0,\n                                maxShift: fullLayout.width\n                            },\n                            attributes: {x: x, y: y, 'text-anchor': 'middle'},\n                            transform: {rotate: '-90', offset: 0}\n                        });\n                    }\n                }]);\n        }\n\n        function drawTitle(titleClass, titleOpts) {\n            var trace = getTrace(),\n                propName;\n            if(Registry.traceIs(trace, 'markerColorscale')) {\n                propName = 'marker.colorbar.title';\n            }\n            else propName = 'colorbar.title';\n\n            var dfltTitleOpts = {\n                propContainer: cbAxisOut,\n                propName: propName,\n                traceIndex: trace.index,\n                placeholder: fullLayout._dfltTitle.colorbar,\n                containerGroup: container.select('.cbtitle')\n            };\n\n            // this class-to-rotate thing with convertToTspans is\n            // getting hackier and hackier... delete groups with the\n            // wrong class (in case earlier the colorbar was drawn on\n            // a different side, I think?)\n            var otherClass = titleClass.charAt(0) === 'h' ?\n                titleClass.substr(1) : ('h' + titleClass);\n            container.selectAll('.' + otherClass + ',.' + otherClass + '-math-group')\n                .remove();\n\n            Titles.draw(gd, titleClass,\n                extendFlat(dfltTitleOpts, titleOpts || {}));\n        }\n\n        function positionCB() {\n            // wait for the axis & title to finish rendering before\n            // continuing positioning\n            // TODO: why are we redrawing multiple times now with this?\n            // I guess autoMargin doesn't like being post-promise?\n            var innerWidth = thickPx + opts.outlinewidth / 2 +\n                    Drawing.bBox(cbAxisOut._axislayer.node()).width;\n            titleEl = titleCont.select('text');\n            if(titleEl.node() && !titleEl.classed(cn.jsPlaceholder)) {\n                var mathJaxNode = titleCont\n                        .select('.h' + cbAxisOut._id + 'title-math-group')\n                        .node(),\n                    titleWidth;\n                if(mathJaxNode &&\n                        ['top', 'bottom'].indexOf(opts.titleside) !== -1) {\n                    titleWidth = Drawing.bBox(mathJaxNode).width;\n                }\n                else {\n                    // note: the formula below works for all titlesides,\n                    // (except for top/bottom mathjax, above)\n                    // but the weird gs.l is because the titleunshift\n                    // transform gets removed by Drawing.bBox\n                    titleWidth =\n                        Drawing.bBox(titleCont.node()).right -\n                        xLeft - gs.l;\n                }\n                innerWidth = Math.max(innerWidth, titleWidth);\n            }\n\n            var outerwidth = 2 * opts.xpad + innerWidth +\n                    opts.borderwidth + opts.outlinewidth / 2,\n                outerheight = yBottomPx - yTopPx;\n\n            container.select('.cbbg').attr({\n                x: xLeft - opts.xpad -\n                    (opts.borderwidth + opts.outlinewidth) / 2,\n                y: yTopPx - yExtraPx,\n                width: Math.max(outerwidth, 2),\n                height: Math.max(outerheight + 2 * yExtraPx, 2)\n            })\n            .call(Color.fill, opts.bgcolor)\n            .call(Color.stroke, opts.bordercolor)\n            .style({'stroke-width': opts.borderwidth});\n\n            container.selectAll('.cboutline').attr({\n                x: xLeft,\n                y: yTopPx + opts.ypad +\n                    (opts.titleside === 'top' ? titleHeight : 0),\n                width: Math.max(thickPx, 2),\n                height: Math.max(outerheight - 2 * opts.ypad - titleHeight, 2)\n            })\n            .call(Color.stroke, opts.outlinecolor)\n            .style({\n                fill: 'None',\n                'stroke-width': opts.outlinewidth\n            });\n\n            // fix positioning for xanchor!='left'\n            var xoffset = ({center: 0.5, right: 1}[opts.xanchor] || 0) *\n                outerwidth;\n            container.attr('transform',\n                'translate(' + (gs.l - xoffset) + ',' + gs.t + ')');\n\n            // auto margin adjustment\n            Plots.autoMargin(gd, id, {\n                x: opts.x,\n                y: opts.y,\n                l: outerwidth * ({right: 1, center: 0.5}[opts.xanchor] || 0),\n                r: outerwidth * ({left: 1, center: 0.5}[opts.xanchor] || 0),\n                t: outerheight * ({bottom: 1, middle: 0.5}[opts.yanchor] || 0),\n                b: outerheight * ({top: 1, middle: 0.5}[opts.yanchor] || 0)\n            });\n        }\n\n        var cbDone = Lib.syncOrAsync([\n            Plots.previousPromises,\n            drawAxis,\n            Plots.previousPromises,\n            positionCB\n        ], gd);\n\n        if(cbDone && cbDone.then) (gd._promises || []).push(cbDone);\n\n        // dragging...\n        if(gd._context.edits.colorbarPosition) {\n            var t0,\n                xf,\n                yf;\n\n            dragElement.init({\n                element: container.node(),\n                gd: gd,\n                prepFn: function() {\n                    t0 = container.attr('transform');\n                    setCursor(container);\n                },\n                moveFn: function(dx, dy) {\n                    container.attr('transform',\n                        t0 + ' ' + 'translate(' + dx + ',' + dy + ')');\n\n                    xf = dragElement.align(xLeftFrac + (dx / gs.w), thickFrac,\n                        0, 1, opts.xanchor);\n                    yf = dragElement.align(yBottomFrac - (dy / gs.h), lenFrac,\n                        0, 1, opts.yanchor);\n\n                    var csr = dragElement.getCursor(xf, yf,\n                        opts.xanchor, opts.yanchor);\n                    setCursor(container, csr);\n                },\n                doneFn: function() {\n                    setCursor(container);\n\n                    if(xf !== undefined && yf !== undefined) {\n                        Registry.call('restyle',\n                            gd,\n                            {'colorbar.x': xf, 'colorbar.y': yf},\n                            getTrace().index\n                        );\n                    }\n                }\n            });\n        }\n        return cbDone;\n    }\n\n    function getTrace() {\n        var idNum = id.substr(2),\n            i,\n            trace;\n        for(i = 0; i < gd._fullData.length; i++) {\n            trace = gd._fullData[i];\n            if(trace.uid === idNum) return trace;\n        }\n    }\n\n    // setter/getters for every item defined in opts\n    Object.keys(opts).forEach(function(name) {\n        component[name] = function(v) {\n            // getter\n            if(!arguments.length) return opts[name];\n\n            // setter - for multi-part properties,\n            // set only the parts that are provided\n            opts[name] = Lib.isPlainObject(opts[name]) ?\n                 Lib.extendFlat(opts[name], v) :\n                 v;\n\n            return component;\n        };\n    });\n\n    // or use .options to set multiple options at once via a dictionary\n    component.options = function(o) {\n        Object.keys(o).forEach(function(name) {\n            // in case something random comes through\n            // that's not an option, ignore it\n            if(typeof component[name] === 'function') {\n                component[name](o[name]);\n            }\n        });\n        return component;\n    };\n\n    component._opts = opts;\n\n    return component;\n};\n",null]}