{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/lib/grid.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/lib/grid.js","mtime":1529418308656},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createGrid\r\n\r\nvar createBuffer  = require('gl-buffer')\r\nvar createShader  = require('gl-shader')\r\nvar bsearch       = require('binary-search-bounds')\r\nvar shaders       = require('./shaders')\r\n\r\nfunction Grid(plot, vbo, shader, tickShader) {\r\n  this.plot   = plot\r\n  this.vbo    = vbo\r\n  this.shader = shader\r\n  this.tickShader = tickShader\r\n  this.ticks  = [[], []]\r\n}\r\n\r\nfunction compareTickNum(a, b) {\r\n  return a - b\r\n}\r\n\r\nvar proto = Grid.prototype\r\n\r\nproto.draw = (function() {\r\n\r\n  var DATA_SHIFT = [0,0]\r\n  var DATA_SCALE = [0,0]\r\n  var DATA_AXIS  = [0,0]\r\n\r\n  return function() {\r\n    var plot       = this.plot\r\n    var vbo        = this.vbo\r\n    var shader     = this.shader\r\n    var ticks      = this.ticks\r\n    var gl         = plot.gl\r\n    var bounds     = plot._tickBounds\r\n    var dataBox    = plot.dataBox\r\n    var viewPixels = plot.viewBox\r\n    var lineWidth  = plot.gridLineWidth\r\n    var gridColor  = plot.gridLineColor\r\n    var gridEnable = plot.gridLineEnable\r\n    var pixelRatio = plot.pixelRatio\r\n\r\n    for(var i=0; i<2; ++i) {\r\n      var lo = bounds[i]\r\n      var hi = bounds[i+2]\r\n      var boundScale = hi - lo\r\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\r\n      var dataWidth   = dataBox[i+2] - dataBox[i]\r\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth\r\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth\r\n    }\r\n\r\n    shader.bind()\r\n    vbo.bind()\r\n    shader.attributes.dataCoord.pointer()\r\n    shader.uniforms.dataShift = DATA_SHIFT\r\n    shader.uniforms.dataScale = DATA_SCALE\r\n\r\n    var offset = 0\r\n    for(var i=0; i<2; ++i) {\r\n      DATA_AXIS[0] = DATA_AXIS[1] = 0\r\n      DATA_AXIS[i] = 1\r\n      shader.uniforms.dataAxis  = DATA_AXIS\r\n      shader.uniforms.lineWidth = lineWidth[i] / (viewPixels[i+2] - viewPixels[i]) * pixelRatio\r\n      shader.uniforms.color     = gridColor[i]\r\n\r\n      var size = ticks[i].length * 6\r\n      if(gridEnable[i] && size) {\r\n        gl.drawArrays(gl.TRIANGLES, offset, size)\r\n      }\r\n      offset += size\r\n    }\r\n  }\r\n})()\r\n\r\nproto.drawTickMarks = (function() {\r\n  var DATA_SHIFT = [0,0]\r\n  var DATA_SCALE = [0,0]\r\n  var X_AXIS     = [1,0]\r\n  var Y_AXIS     = [0,1]\r\n  var SCR_OFFSET = [0,0]\r\n  var TICK_SCALE = [0,0]\r\n\r\n  return function() {\r\n    var plot       = this.plot\r\n    var vbo        = this.vbo\r\n    var shader     = this.tickShader\r\n    var ticks      = this.ticks\r\n    var gl         = plot.gl\r\n    var bounds     = plot._tickBounds\r\n    var dataBox    = plot.dataBox\r\n    var viewBox    = plot.viewBox\r\n    var pixelRatio = plot.pixelRatio\r\n    var screenBox  = plot.screenBox\r\n\r\n    var screenWidth  = screenBox[2] - screenBox[0]\r\n    var screenHeight = screenBox[3] - screenBox[1]\r\n    var viewWidth    = viewBox[2]   - viewBox[0]\r\n    var viewHeight   = viewBox[3]   - viewBox[1]\r\n\r\n    for(var i=0; i<2; ++i) {\r\n      var lo = bounds[i]\r\n      var hi = bounds[i+2]\r\n      var boundScale = hi - lo\r\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\r\n      var dataWidth   = (dataBox[i+2] - dataBox[i])\r\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth\r\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth\r\n    }\r\n\r\n    DATA_SCALE[0] *= viewWidth / screenWidth\r\n    DATA_SHIFT[0] *= viewWidth / screenWidth\r\n\r\n    DATA_SCALE[1] *= viewHeight / screenHeight\r\n    DATA_SHIFT[1] *= viewHeight / screenHeight\r\n\r\n    shader.bind()\r\n    vbo.bind()\r\n\r\n    shader.attributes.dataCoord.pointer()\r\n\r\n    var uniforms = shader.uniforms\r\n    uniforms.dataShift = DATA_SHIFT\r\n    uniforms.dataScale = DATA_SCALE\r\n\r\n    var tickMarkLength = plot.tickMarkLength\r\n    var tickMarkWidth  = plot.tickMarkWidth\r\n    var tickMarkColor  = plot.tickMarkColor\r\n\r\n    var xTicksOffset = 0\r\n    var yTicksOffset = ticks[0].length * 6\r\n\r\n    var xStart = Math.min(bsearch.ge(ticks[0], (dataBox[0] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length)\r\n    var xEnd   = Math.min(bsearch.gt(ticks[0], (dataBox[2] - bounds[0]) / (bounds[2] - bounds[0]), compareTickNum), ticks[0].length)\r\n    var xOffset = xTicksOffset + 6 * xStart\r\n    var xCount  = 6 * Math.max(0, xEnd - xStart)\r\n\r\n    var yStart = Math.min(bsearch.ge(ticks[1], (dataBox[1] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length)\r\n    var yEnd   = Math.min(bsearch.gt(ticks[1], (dataBox[3] - bounds[1]) / (bounds[3] - bounds[1]), compareTickNum), ticks[1].length)\r\n    var yOffset = yTicksOffset + 6 * yStart\r\n    var yCount  = 6 * Math.max(0, yEnd - yStart)\r\n\r\n    SCR_OFFSET[0]         = 2.0 * (viewBox[0] - tickMarkLength[1]) / screenWidth - 1.0\r\n    SCR_OFFSET[1]         = (viewBox[3] + viewBox[1]) / screenHeight - 1.0\r\n    TICK_SCALE[0]         = tickMarkLength[1] * pixelRatio / screenWidth\r\n    TICK_SCALE[1]         = tickMarkWidth[1]  * pixelRatio / screenHeight\r\n\r\n    if(yCount) {\r\n      uniforms.color        = tickMarkColor[1]\r\n      uniforms.tickScale    = TICK_SCALE\r\n      uniforms.dataAxis     = Y_AXIS\r\n      uniforms.screenOffset = SCR_OFFSET\r\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount)\r\n    }\r\n\r\n    SCR_OFFSET[0]         = (viewBox[2] + viewBox[0]) / screenWidth - 1.0\r\n    SCR_OFFSET[1]         = 2.0 * (viewBox[1] - tickMarkLength[0]) / screenHeight - 1.0\r\n    TICK_SCALE[0]         = tickMarkWidth[0]  * pixelRatio / screenWidth\r\n    TICK_SCALE[1]         = tickMarkLength[0] * pixelRatio / screenHeight\r\n\r\n    if(xCount) {\r\n      uniforms.color        = tickMarkColor[0]\r\n      uniforms.tickScale    = TICK_SCALE\r\n      uniforms.dataAxis     = X_AXIS\r\n      uniforms.screenOffset = SCR_OFFSET\r\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount)\r\n    }\r\n\r\n    SCR_OFFSET[0]         = 2.0 * (viewBox[2] + tickMarkLength[3]) / screenWidth - 1.0\r\n    SCR_OFFSET[1]         = (viewBox[3] + viewBox[1]) / screenHeight - 1.0\r\n    TICK_SCALE[0]         = tickMarkLength[3] * pixelRatio / screenWidth\r\n    TICK_SCALE[1]         = tickMarkWidth[3]  * pixelRatio / screenHeight\r\n\r\n    if(yCount) {\r\n      uniforms.color        = tickMarkColor[3]\r\n      uniforms.tickScale    = TICK_SCALE\r\n      uniforms.dataAxis     = Y_AXIS\r\n      uniforms.screenOffset = SCR_OFFSET\r\n      gl.drawArrays(gl.TRIANGLES, yOffset, yCount)\r\n    }\r\n\r\n    SCR_OFFSET[0]         = (viewBox[2] + viewBox[0]) / screenWidth - 1.0\r\n    SCR_OFFSET[1]         = 2.0 * (viewBox[3] + tickMarkLength[2]) / screenHeight - 1.0\r\n    TICK_SCALE[0]         = tickMarkWidth[2]  * pixelRatio / screenWidth\r\n    TICK_SCALE[1]         = tickMarkLength[2] * pixelRatio / screenHeight\r\n\r\n    if(xCount) {\r\n      uniforms.color        = tickMarkColor[2]\r\n      uniforms.tickScale    = TICK_SCALE\r\n      uniforms.dataAxis     = X_AXIS\r\n      uniforms.screenOffset = SCR_OFFSET\r\n      gl.drawArrays(gl.TRIANGLES, xOffset, xCount)\r\n    }\r\n  }\r\n})()\r\n\r\nproto.update = (function() {\r\n  var OFFSET_X = [1,  1, -1, -1,  1, -1]\r\n  var OFFSET_Y = [1, -1,  1,  1, -1, -1]\r\n\r\n  return function(options) {\r\n    var ticks  = options.ticks\r\n    var bounds = options.bounds\r\n    var data   = new Float32Array(6 * 3 * (ticks[0].length + ticks[1].length))\r\n\r\n    var zeroLineEnable = this.plot.zeroLineEnable\r\n\r\n    var ptr    = 0\r\n    var gridTicks = [[], []]\r\n    for(var dim=0; dim<2; ++dim) {\r\n      var localTicks = gridTicks[dim]\r\n      var axisTicks = ticks[dim]\r\n      var lo = bounds[dim]\r\n      var hi = bounds[dim+2]\r\n      for(var i=0; i<axisTicks.length; ++i) {\r\n        var x = (axisTicks[i].x - lo) / (hi - lo)\r\n        localTicks.push(x)\r\n        for(var j=0; j<6; ++j) {\r\n          data[ptr++] = x\r\n          data[ptr++] = OFFSET_X[j]\r\n          data[ptr++] = OFFSET_Y[j]\r\n        }\r\n      }\r\n    }\r\n\r\n    this.ticks = gridTicks\r\n    this.vbo.update(data)\r\n  }\r\n})()\r\n\r\nproto.dispose = function() {\r\n  this.vbo.dispose()\r\n  this.shader.dispose()\r\n  this.tickShader.dispose()\r\n}\r\n\r\nfunction createGrid(plot) {\r\n  var gl     = plot.gl\r\n  var vbo    = createBuffer(gl)\r\n  var shader = createShader(gl, shaders.gridVert, shaders.gridFrag)\r\n  var tickShader = createShader(gl, shaders.tickVert, shaders.gridFrag)\r\n  var grid   = new Grid(plot, vbo, shader, tickShader)\r\n  return grid\r\n}\r\n",null]}