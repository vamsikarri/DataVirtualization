{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/table/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/table/attributes.js","mtime":1529418310748},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar annAttrs = require('../../components/annotations/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nmodule.exports = overrideAll({\n    domain: domainAttrs({name: 'table', trace: true}),\n\n    columnwidth: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: null,\n        role: 'style',\n        description: [\n            'The width of columns expressed as a ratio. Columns fill the available width',\n            'in proportion of their specified column widths.'\n        ].join(' ')\n    },\n\n    columnorder: {\n        valType: 'data_array',\n        role: 'info',\n        description: [\n            'Specifies the rendered order of the data columns; for example, a value `2` at position `0`',\n            'means that column index `0` in the data will be rendered as the',\n            'third column, as columns have an index base of zero.'\n        ].join(' ')\n    },\n\n    header: {\n\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Sets the cell value formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                'https://github.com/d3/d3-format/blob/master/README.md#locale_format'\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 28,\n            role: 'style',\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n                role: 'style'\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n                role: 'style'\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'white',\n                role: 'style',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    },\n\n    cells: {\n\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Cell values. `values[m][n]` represents the value of the `n`th point in column `m`,',\n                'therefore the `values[m]` vector length for all columns must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number or a string.'\n            ].join(' ')\n        },\n\n        format: {\n            valType: 'data_array',\n            role: 'info',\n            dflt: [],\n            description: [\n                'Sets the cell value formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                'https://github.com/d3/d3-format/blob/master/README.md#locale_format'\n            ].join(' ')\n        },\n\n        prefix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Prefix for cell values.'\n        },\n\n        suffix: {\n            valType: 'string',\n            arrayOk: true,\n            dflt: null,\n            role: 'style',\n            description: 'Suffix for cell values.'\n        },\n\n        height: {\n            valType: 'number',\n            dflt: 20,\n            role: 'style',\n            description: 'The height of cells.'\n        },\n\n        align: extendFlat({}, annAttrs.align, {arrayOk: true}),\n\n        line: {\n            width: {\n                valType: 'number',\n                arrayOk: true,\n                dflt: 1,\n                role: 'style'\n            },\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                dflt: 'grey',\n                role: 'style'\n            }\n        },\n\n        fill: {\n            color: {\n                valType: 'color',\n                arrayOk: true,\n                role: 'style',\n                dflt: 'white',\n                description: [\n                    'Sets the cell fill color. It accepts either a specific color',\n                    ' or an array of colors.'\n                ].join('')\n            }\n        },\n\n        font: extendFlat({}, fontAttrs({arrayOk: true}))\n    }\n}, 'calc', 'from-root');\n",null]}