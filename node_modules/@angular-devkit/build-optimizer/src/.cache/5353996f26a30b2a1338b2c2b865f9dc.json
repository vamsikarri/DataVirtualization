{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/hebrew.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/hebrew.js","mtime":1529418312975},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nï»¿/* http://keith-wood.name/calendars.html\n   Hebrew calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Hebrew civil calendar.\n    Based on code from <a href=\"http://www.fourmilab.ch/documents/calendar/\">http://www.fourmilab.ch/documents/calendar/</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Hebrew_calendar\">http://en.wikipedia.org/wiki/Hebrew_calendar</a>.\n    @class HebrewCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction HebrewCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nHebrewCalendar.prototype = new main.baseCalendar;\n\nassign(HebrewCalendar.prototype, {\n    /** The calendar name.\n        @memberof HebrewCalendar */\n    name: 'Hebrew',\n    /** Julian date of start of Hebrew epoch: 7 October 3761 BCE.\n        @memberof HebrewCalendar */\n    jdEpoch: 347995.5,\n    /** Days per month in a common year.\n        @memberof HebrewCalendar */\n    daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 29],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof HebrewCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof HebrewCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof HebrewCalendar */\n    firstMonth: 7,\n    /** The minimum day number.\n        @memberof HebrewCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof HebrewCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Hebrew',\n            epochs: ['BAM', 'AM'],\n            monthNames: ['Nisan', 'Iyar', 'Sivan', 'Tammuz', 'Av', 'Elul',\n            'Tishrei', 'Cheshvan', 'Kislev', 'Tevet', 'Shevat', 'Adar', 'Adar II'],\n            monthNamesShort: ['Nis', 'Iya', 'Siv', 'Tam', 'Av', 'Elu', 'Tis', 'Che', 'Kis', 'Tev', 'She', 'Ada', 'Ad2'],\n            dayNames: ['Yom Rishon', 'Yom Sheni', 'Yom Shlishi', 'Yom Revi\\'i', 'Yom Chamishi', 'Yom Shishi', 'Yom Shabbat'],\n            dayNamesShort: ['Ris', 'She', 'Shl', 'Rev', 'Cha', 'Shi', 'Sha'],\n            dayNamesMin: ['Ri','She','Shl','Re','Ch','Shi','Sha'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return this._leapYear(date.year());\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    _leapYear: function(year) {\n        year = (year < 0 ? year + 1 : year);\n        return mod(year * 7 + 1, 19) < 7;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return this._leapYear(year.year ? year.year() : year) ? 13 : 12;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        year = date.year();\n        return this.toJD((year === -1 ? +1 : year + 1), 7, 1) - this.toJD(year, 7, 1);\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        if (year.year) {\n            month = year.month();\n            year = year.year();\n        }\n        this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return (month === 12 && this.leapYear(year) ? 30 : // Adar I\n                (month === 8 && mod(this.daysInYear(year), 10) === 5 ? 30 : // Cheshvan in shlemah year\n                (month === 9 && mod(this.daysInYear(year), 10) === 3 ? 29 : // Kislev in chaserah year\n                this.daysPerMonth[month - 1])));\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 6;\n    },\n\n    /** Retrieve additional information about a date - year type.\n        @memberof HebrewCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return {yearType: (this.leapYear(date) ? 'embolismic' : 'common') + ' ' +\n            ['deficient', 'regular', 'complete'][this.daysInYear(date) % 10 - 3]};\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof HebrewCalendar\n        @param year {CDate)|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        var adjYear = (year <= 0 ? year + 1 : year);\n        var jd = this.jdEpoch + this._delay1(adjYear) +\n            this._delay2(adjYear) + day + 1;\n        if (month < 7) {\n            for (var m = 7; m <= this.monthsInYear(year); m++) {\n                jd += this.daysInMonth(year, m);\n            }\n            for (var m = 1; m < month; m++) {\n                jd += this.daysInMonth(year, m);\n            }\n        }\n        else {\n            for (var m = 7; m < month; m++) {\n                jd += this.daysInMonth(year, m);\n            }\n        }\n        return jd;\n    },\n\n    /** Test for delay of start of new year and to avoid\n        Sunday, Wednesday, or Friday as start of the new year.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {number} The days to offset by. */\n    _delay1: function(year) {\n        var months = Math.floor((235 * year - 234) / 19);\n        var parts = 12084 + 13753 * months;\n        var day = months * 29 + Math.floor(parts / 25920);\n        if (mod(3 * (day + 1), 7) < 3) {\n            day++;\n        }\n        return day;\n    },\n\n    /** Check for delay in start of new year due to length of adjacent years.\n        @memberof HebrewCalendar\n        @private\n        @param year {number} The year to examine.\n        @return {number} The days to offset by. */\n    _delay2: function(year) {\n        var last = this._delay1(year - 1);\n        var present = this._delay1(year);\n        var next = this._delay1(year + 1);\n        return ((next - present) === 356 ? 2 : ((present - last) === 382 ? 1 : 0));\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof HebrewCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd) + 0.5;\n        var year = Math.floor(((jd - this.jdEpoch) * 98496.0) / 35975351.0) - 1;\n        while (jd >= this.toJD((year === -1 ? +1 : year + 1), 7, 1)) {\n            year++;\n        }\n        var month = (jd < this.toJD(year, 1, 1)) ? 7 : 1;\n        while (jd > this.toJD(year, month, this.daysInMonth(year, month))) {\n            month++;\n        }\n        var day = jd - this.toJD(year, month, 1) + 1;\n        return this.newDate(year, month, day);\n    }\n});\n\n// Modulus function which works for non-integers.\nfunction mod(a, b) {\n    return a - (b * Math.floor(a / b));\n}\n\n// Hebrew calendar implementation\nmain.calendars.hebrew = HebrewCalendar;\n\n",null]}