{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/carpet/set_convert.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/carpet/set_convert.js","mtime":1529418310708},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar constants = require('./constants');\nvar search = require('../../lib/search').findBin;\nvar computeControlPoints = require('./compute_control_points');\nvar createSplineEvaluator = require('./create_spline_evaluator');\nvar createIDerivativeEvaluator = require('./create_i_derivative_evaluator');\nvar createJDerivativeEvaluator = require('./create_j_derivative_evaluator');\n\n/*\n * Create conversion functions to go from one basis to another. In particular the letter\n * abbreviations are:\n *\n *   i: i/j coordinates along the grid. Integer values correspond to data points\n *   a: real-valued coordinates along the a/b axes\n *   c: cartesian x-y coordinates\n *   p: screen-space pixel coordinates\n */\nmodule.exports = function setConvert(trace) {\n    var a = trace._a;\n    var b = trace._b;\n    var na = a.length;\n    var nb = b.length;\n    var aax = trace.aaxis;\n    var bax = trace.baxis;\n\n    // Grab the limits once rather than recomputing the bounds for every point\n    // independently:\n    var amin = a[0];\n    var amax = a[na - 1];\n    var bmin = b[0];\n    var bmax = b[nb - 1];\n    var arange = a[a.length - 1] - a[0];\n    var brange = b[b.length - 1] - b[0];\n\n    // Compute the tolerance so that points are visible slightly outside the\n    // defined carpet axis:\n    var atol = arange * constants.RELATIVE_CULL_TOLERANCE;\n    var btol = brange * constants.RELATIVE_CULL_TOLERANCE;\n\n    // Expand the limits to include the relative tolerance:\n    amin -= atol;\n    amax += atol;\n    bmin -= btol;\n    bmax += btol;\n\n    trace.isVisible = function(a, b) {\n        return a > amin && a < amax && b > bmin && b < bmax;\n    };\n\n    trace.isOccluded = function(a, b) {\n        return a < amin || a > amax || b < bmin || b > bmax;\n    };\n\n    trace.setScale = function() {\n        var x = trace._x;\n        var y = trace._y;\n\n        // This is potentially a very expensive step! It does the bulk of the work of constructing\n        // an expanded basis of control points. Note in particular that it overwrites the existing\n        // basis without creating a new array since that would potentially thrash the garbage\n        // collector.\n        var result = computeControlPoints(trace._xctrl, trace._yctrl, x, y, aax.smoothing, bax.smoothing);\n        trace._xctrl = result[0];\n        trace._yctrl = result[1];\n\n        // This step is the second step in the process, but it's somewhat simpler. It just unrolls\n        // some logic since it would be unnecessarily expensive to compute both interpolations\n        // nearly identically but separately and to include a bunch of linear vs. bicubic logic in\n        // every single call.\n        trace.evalxy = createSplineEvaluator([trace._xctrl, trace._yctrl], na, nb, aax.smoothing, bax.smoothing);\n\n        trace.dxydi = createIDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n        trace.dxydj = createJDerivativeEvaluator([trace._xctrl, trace._yctrl], aax.smoothing, bax.smoothing);\n    };\n\n    /*\n     * Convert from i/j data grid coordinates to a/b values. Note in particular that this\n     * is *linear* interpolation, even if the data is interpolated bicubically.\n     */\n    trace.i2a = function(i) {\n        var i0 = Math.max(0, Math.floor(i[0]), na - 2);\n        var ti = i[0] - i0;\n        return (1 - ti) * a[i0] + ti * a[i0 + 1];\n    };\n\n    trace.j2b = function(j) {\n        var j0 = Math.max(0, Math.floor(j[1]), na - 2);\n        var tj = j[1] - j0;\n        return (1 - tj) * b[j0] + tj * b[j0 + 1];\n    };\n\n    trace.ij2ab = function(ij) {\n        return [trace.i2a(ij[0]), trace.j2b(ij[1])];\n    };\n\n    /*\n     * Convert from a/b coordinates to i/j grid-numbered coordinates. This requires searching\n     * through the a/b data arrays and assumes they are monotonic, which is presumed to have\n     * been enforced already.\n     */\n    trace.a2i = function(aval) {\n        var i0 = Math.max(0, Math.min(search(aval, a), na - 2));\n        var a0 = a[i0];\n        var a1 = a[i0 + 1];\n        return Math.max(0, Math.min(na - 1, i0 + (aval - a0) / (a1 - a0)));\n    };\n\n    trace.b2j = function(bval) {\n        var j0 = Math.max(0, Math.min(search(bval, b), nb - 2));\n        var b0 = b[j0];\n        var b1 = b[j0 + 1];\n        return Math.max(0, Math.min(nb - 1, j0 + (bval - b0) / (b1 - b0)));\n    };\n\n    trace.ab2ij = function(ab) {\n        return [trace.a2i(ab[0]), trace.b2j(ab[1])];\n    };\n\n    /*\n     * Convert from i/j coordinates to x/y caretesian coordinates. This means either bilinear\n     * or bicubic spline evaluation, but the hard part is already done at this point.\n     */\n    trace.i2c = function(i, j) {\n        return trace.evalxy([], i, j);\n    };\n\n    trace.ab2xy = function(aval, bval, extrapolate) {\n        if(!extrapolate && (aval < a[0] || aval > a[na - 1] | bval < b[0] || bval > b[nb - 1])) {\n            return [false, false];\n        }\n        var i = trace.a2i(aval);\n        var j = trace.b2j(bval);\n\n        var pt = trace.evalxy([], i, j);\n\n        if(extrapolate) {\n            // This section uses the boundary derivatives to extrapolate linearly outside\n            // the defined range. Consider a scatter line with one point inside the carpet\n            // axis and one point outside. If we don't extrapolate, we can't draw the line\n            // at all.\n            var iex = 0;\n            var jex = 0;\n            var der = [];\n\n            var i0, ti, j0, tj;\n            if(aval < a[0]) {\n                i0 = 0;\n                ti = 0;\n                iex = (aval - a[0]) / (a[1] - a[0]);\n            } else if(aval > a[na - 1]) {\n                i0 = na - 2;\n                ti = 1;\n                iex = (aval - a[na - 1]) / (a[na - 1] - a[na - 2]);\n            } else {\n                i0 = Math.max(0, Math.min(na - 2, Math.floor(i)));\n                ti = i - i0;\n            }\n\n            if(bval < b[0]) {\n                j0 = 0;\n                tj = 0;\n                jex = (bval - b[0]) / (b[1] - b[0]);\n            } else if(bval > b[nb - 1]) {\n                j0 = nb - 2;\n                tj = 1;\n                jex = (bval - b[nb - 1]) / (b[nb - 1] - b[nb - 2]);\n            } else {\n                j0 = Math.max(0, Math.min(nb - 2, Math.floor(j)));\n                tj = j - j0;\n            }\n\n            if(iex) {\n                trace.dxydi(der, i0, j0, ti, tj);\n                pt[0] += der[0] * iex;\n                pt[1] += der[1] * iex;\n            }\n\n            if(jex) {\n                trace.dxydj(der, i0, j0, ti, tj);\n                pt[0] += der[0] * jex;\n                pt[1] += der[1] * jex;\n            }\n        }\n\n        return pt;\n    };\n\n\n    trace.c2p = function(xy, xa, ya) {\n        return [xa.c2p(xy[0]), ya.c2p(xy[1])];\n    };\n\n    trace.p2x = function(p, xa, ya) {\n        return [xa.p2c(p[0]), ya.p2c(p[1])];\n    };\n\n    trace.dadi = function(i /* , u*/) {\n        // Right now only a piecewise linear a or b basis is permitted since smoother interpolation\n        // would cause monotonicity problems. As a retult, u is entirely disregarded in this\n        // computation, though we'll specify it as a parameter for the sake of completeness and\n        // future-proofing. It would be possible to use monotonic cubic interpolation, for example.\n        //\n        // See: https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n        // u = u || 0;\n\n        var i0 = Math.max(0, Math.min(a.length - 2, i));\n\n        // The step (demoninator) is implicitly 1 since that's the grid spacing.\n        return a[i0 + 1] - a[i0];\n    };\n\n    trace.dbdj = function(j /* , v*/) {\n        // See above caveats for dadi which also apply here\n        var j0 = Math.max(0, Math.min(b.length - 2, j));\n\n        // The step (demoninator) is implicitly 1 since that's the grid spacing.\n        return b[j0 + 1] - b[j0];\n    };\n\n    // Takes: grid cell coordinate (i, j) and fractional grid cell coordinates (u, v)\n    // Returns: (dx/da, dy/db)\n    //\n    // NB: separate grid cell + fractional grid cell coordinate format is due to the discontinuous\n    // derivative, as described better in create_i_derivative_evaluator.js\n    trace.dxyda = function(i0, j0, u, v) {\n        var dxydi = trace.dxydi(null, i0, j0, u, v);\n        var dadi = trace.dadi(i0, u);\n\n        return [dxydi[0] / dadi, dxydi[1] / dadi];\n    };\n\n    trace.dxydb = function(i0, j0, u, v) {\n        var dxydj = trace.dxydj(null, i0, j0, u, v);\n        var dbdj = trace.dbdj(j0, v);\n\n        return [dxydj[0] / dbdj, dxydj[1] / dbdj];\n    };\n\n    // Sometimes we don't care about precision and all we really want is decent rough\n    // directions (as is the case with labels). In that case, we can do a very rough finite\n    // difference and spare having to worry about precise grid coordinates:\n    trace.dxyda_rough = function(a, b, reldiff) {\n        var h = arange * (reldiff || 0.1);\n        var plus = trace.ab2xy(a + h, b, true);\n        var minus = trace.ab2xy(a - h, b, true);\n\n        return [\n            (plus[0] - minus[0]) * 0.5 / h,\n            (plus[1] - minus[1]) * 0.5 / h\n        ];\n    };\n\n    trace.dxydb_rough = function(a, b, reldiff) {\n        var h = brange * (reldiff || 0.1);\n        var plus = trace.ab2xy(a, b + h, true);\n        var minus = trace.ab2xy(a, b - h, true);\n\n        return [\n            (plus[0] - minus[0]) * 0.5 / h,\n            (plus[1] - minus[1]) * 0.5 / h\n        ];\n    };\n\n    trace.dpdx = function(xa) {\n        return xa._m;\n    };\n\n    trace.dpdy = function(ya) {\n        return ya._m;\n    };\n};\n",null]}