{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/regl-line2d/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/regl-line2d/index.js","mtime":1529418310990},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\n\r\nconst rgba = require('color-normalize')\r\nconst getBounds = require('array-bounds')\r\nconst extend = require('object-assign')\r\nconst glslify = require('glslify')\r\nconst pick = require('pick-by-alias')\r\nconst flatten = require('flatten-vertex-data')\r\nconst triangulate = require('earcut')\r\nconst normalize = require('array-normalize')\r\nconst {float32, fract32} = require('to-float32')\r\nconst WeakMap = require('es6-weak-map')\r\nconst parseRect = require('parse-rect')\r\n\r\n\r\nmodule.exports = Line2D\r\n\r\n\r\n/** @constructor */\r\nfunction Line2D (regl, options) {\r\n\tif (!(this instanceof Line2D)) return new Line2D(regl, options)\r\n\r\n\tif (typeof regl === 'function') {\r\n\t\tif (!options) options = {}\r\n\t\toptions.regl = regl\r\n\t}\r\n\telse {\r\n\t\toptions = regl\r\n\t}\r\n\tif (options.length) options.positions = options\r\n\tregl = options.regl\r\n\r\n\tif (!regl.hasExtension('ANGLE_instanced_arrays')) {\r\n\t\tthrow Error('regl-error2d: `ANGLE_instanced_arrays` extension should be enabled');\r\n\t}\r\n\r\n\t// persistent variables\r\n\tthis.gl = regl._gl\r\n\tthis.regl = regl\r\n\r\n\t// list of options for lines\r\n\tthis.passes = []\r\n\r\n\t// cached shaders instance\r\n\tthis.shaders = Line2D.shaders.has(regl) ? Line2D.shaders.get(regl) : Line2D.shaders.set(regl, Line2D.createShaders(regl)).get(regl)\r\n\r\n\r\n\t// init defaults\r\n\tthis.update(options)\r\n}\r\n\r\n\r\nLine2D.dashMult = 2\r\nLine2D.maxPatternLength = 256\r\nLine2D.precisionThreshold = 3e6\r\nLine2D.maxPoints = 1e4\r\nLine2D.maxLines = 2048\r\n\r\n\r\n// cache of created draw calls per-regl instance\r\nLine2D.shaders = new WeakMap()\r\n\r\n\r\n// create static shaders once\r\nLine2D.createShaders = function (regl) {\r\n\tlet offsetBuffer = regl.buffer({\r\n\t\tusage: 'static',\r\n\t\ttype: 'float',\r\n\t\tdata: [0,1, 0,0, 1,1, 1,0]\r\n\t})\r\n\r\n\tlet shaderOptions = {\r\n\t\tprimitive: 'triangle strip',\r\n\t\tinstances: regl.prop('count'),\r\n\t\tcount: 4,\r\n\t\toffset: 0,\r\n\r\n\t\tuniforms: {\r\n\t\t\tmiterMode: (ctx, prop) => prop.join === 'round' ? 2 : 1,\r\n\t\t\tmiterLimit: regl.prop('miterLimit'),\r\n\t\t\tscale: regl.prop('scale'),\r\n\t\t\tscaleFract: regl.prop('scaleFract'),\r\n\t\t\ttranslateFract: regl.prop('translateFract'),\r\n\t\t\ttranslate: regl.prop('translate'),\r\n\t\t\tthickness: regl.prop('thickness'),\r\n\t\t\tdashPattern: regl.prop('dashTexture'),\r\n\t\t\topacity: regl.prop('opacity'),\r\n\t\t\tpixelRatio: regl.context('pixelRatio'),\r\n\t\t\tid: regl.prop('id'),\r\n\t\t\tdashSize: regl.prop('dashLength'),\r\n\t\t\tviewport: (c, p) => [p.viewport.x, p.viewport.y, c.viewportWidth, c.viewportHeight],\r\n\t\t\tdepth: regl.prop('depth')\r\n\t\t},\r\n\r\n\t\tblend: {\r\n\t\t\tenable: true,\r\n\t\t\tcolor: [0,0,0,0],\r\n\t\t\tequation: {\r\n\t\t\t\trgb: 'add',\r\n\t\t\t\talpha: 'add'\r\n\t\t\t},\r\n\t\t\tfunc: {\r\n\t\t\t\tsrcRGB: 'src alpha',\r\n\t\t\t\tdstRGB: 'one minus src alpha',\r\n\t\t\t\tsrcAlpha: 'one minus dst alpha',\r\n\t\t\t\tdstAlpha: 'one'\r\n\t\t\t}\r\n\t\t},\r\n\t\tdepth: {\r\n\t\t\tenable: (c, p) => {\r\n\t\t\t\treturn !p.overlay\r\n\t\t\t}\r\n\t\t},\r\n\t\tstencil: {enable: false},\r\n\t\tscissor: {\r\n\t\t\tenable: true,\r\n\t\t\tbox: regl.prop('viewport')\r\n\t\t},\r\n\t\tviewport: regl.prop('viewport')\r\n\t}\r\n\r\n\r\n\t// simplified rectangular line shader\r\n\tlet drawRectLine = regl(extend({\r\n\t\tvert: glslify('./rect-vert.glsl'),\r\n\t\tfrag: glslify('./rect-frag.glsl'),\r\n\r\n\t\tattributes: {\r\n\t\t\t// if point is at the end of segment\r\n\t\t\tlineEnd: {\r\n\t\t\t\tbuffer: offsetBuffer,\r\n\t\t\t\tdivisor: 0,\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 0\r\n\t\t\t},\r\n\t\t\t// if point is at the top of segment\r\n\t\t\tlineTop: {\r\n\t\t\t\tbuffer: offsetBuffer,\r\n\t\t\t\tdivisor: 0,\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 4\r\n\t\t\t},\r\n\t\t\t// beginning of line coordinate\r\n\t\t\taCoord: {\r\n\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 8,\r\n\t\t\t\tdivisor: 1\r\n\t\t\t},\r\n\t\t\t// end of line coordinate\r\n\t\t\tbCoord: {\r\n\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 16,\r\n\t\t\t\tdivisor: 1\r\n\t\t\t},\r\n\t\t\taCoordFract: {\r\n\t\t\t\tbuffer: regl.prop('positionFractBuffer'),\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 8,\r\n\t\t\t\tdivisor: 1\r\n\t\t\t},\r\n\t\t\tbCoordFract: {\r\n\t\t\t\tbuffer: regl.prop('positionFractBuffer'),\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 16,\r\n\t\t\t\tdivisor: 1\r\n\t\t\t},\r\n\t\t\tcolor: {\r\n\t\t\t\tbuffer: regl.prop('colorBuffer'),\r\n\t\t\t\tstride: 4,\r\n\t\t\t\toffset: 0,\r\n\t\t\t\tdivisor: 1\r\n\t\t\t}\r\n\t\t}\r\n\t}, shaderOptions))\r\n\r\n\t// create regl draw\r\n\tlet drawMiterLine\r\n\r\n\ttry {\r\n\t\tdrawMiterLine = regl(extend({\r\n\t\t\t// culling removes polygon creasing\r\n\t\t\tcull: {\r\n\t\t\t\tenable: true,\r\n\t\t\t\tface: 'back'\r\n\t\t\t},\r\n\r\n\t\t\tvert: glslify('./miter-vert.glsl'),\r\n\t\t\tfrag: glslify('./miter-frag.glsl'),\r\n\r\n\t\t\tattributes: {\r\n\t\t\t\t// is line end\r\n\t\t\t\tlineEnd: {\r\n\t\t\t\t\tbuffer: offsetBuffer,\r\n\t\t\t\t\tdivisor: 0,\r\n\t\t\t\t\tstride: 8,\r\n\t\t\t\t\toffset: 0\r\n\t\t\t\t},\r\n\t\t\t\t// is line top\r\n\t\t\t\tlineTop: {\r\n\t\t\t\t\tbuffer: offsetBuffer,\r\n\t\t\t\t\tdivisor: 0,\r\n\t\t\t\t\tstride: 8,\r\n\t\t\t\t\toffset: 4\r\n\t\t\t\t},\r\n\t\t\t\t// left color\r\n\t\t\t\taColor: {\r\n\t\t\t\t\tbuffer: regl.prop('colorBuffer'),\r\n\t\t\t\t\tstride: 4,\r\n\t\t\t\t\toffset: 0,\r\n\t\t\t\t\tdivisor: 1\r\n\t\t\t\t},\r\n\t\t\t\t// right color\r\n\t\t\t\tbColor: {\r\n\t\t\t\t\tbuffer: regl.prop('colorBuffer'),\r\n\t\t\t\t\tstride: 4,\r\n\t\t\t\t\toffset: 4,\r\n\t\t\t\t\tdivisor: 1\r\n\t\t\t\t},\r\n\t\t\t\tprevCoord: {\r\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\t\tstride: 8,\r\n\t\t\t\t\toffset: 0,\r\n\t\t\t\t\tdivisor: 1\r\n\t\t\t\t},\r\n\t\t\t\taCoord: {\r\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\t\tstride: 8,\r\n\t\t\t\t\toffset: 8,\r\n\t\t\t\t\tdivisor: 1\r\n\t\t\t\t},\r\n\t\t\t\tbCoord: {\r\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\t\tstride: 8,\r\n\t\t\t\t\toffset: 16,\r\n\t\t\t\t\tdivisor: 1\r\n\t\t\t\t},\r\n\t\t\t\tnextCoord: {\r\n\t\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\t\tstride: 8,\r\n\t\t\t\t\toffset: 24,\r\n\t\t\t\t\tdivisor: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, shaderOptions))\r\n\t} catch (e) {\r\n\t\t// IE/bad Webkit fallback\r\n\t\tdrawMiterLine = drawRectLine\r\n\t}\r\n\r\n\t// fill shader\r\n\tlet drawFill = regl({\r\n\t\tprimitive: 'triangle',\r\n\t\telements: (ctx, prop) => prop.triangles,\r\n\t\toffset: 0,\r\n\r\n\t\tvert: glslify('./fill-vert.glsl'),\r\n\t\tfrag: glslify('./fill-frag.glsl'),\r\n\r\n\t\tuniforms: {\r\n\t\t\tscale: regl.prop('scale'),\r\n\t\t\tcolor: regl.prop('fill'),\r\n\t\t\tscaleFract: regl.prop('scaleFract'),\r\n\t\t\ttranslateFract: regl.prop('translateFract'),\r\n\t\t\ttranslate: regl.prop('translate'),\r\n\t\t\topacity: regl.prop('opacity'),\r\n\t\t\tpixelRatio: regl.context('pixelRatio'),\r\n\t\t\tid: regl.prop('id'),\r\n\t\t\tviewport: (ctx, prop) => [prop.viewport.x, prop.viewport.y, ctx.viewportWidth, ctx.viewportHeight]\r\n\t\t},\r\n\r\n\t\tattributes: {\r\n\t\t\tposition: {\r\n\t\t\t\tbuffer: regl.prop('positionBuffer'),\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 8\r\n\t\t\t},\r\n\t\t\tpositionFract: {\r\n\t\t\t\tbuffer: regl.prop('positionFractBuffer'),\r\n\t\t\t\tstride: 8,\r\n\t\t\t\toffset: 8\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tblend: shaderOptions.blend,\r\n\r\n\t\tdepth: { enable: false },\r\n\t\tscissor: shaderOptions.scissor,\r\n\t\tstencil: shaderOptions.stencil,\r\n\t\tviewport: shaderOptions.viewport\r\n\t})\r\n\r\n\treturn {\r\n\t\tfill: drawFill, rect: drawRectLine, miter: drawMiterLine\r\n\t}\r\n}\r\n\r\n\r\n// used to for new lines instances\r\nLine2D.defaults = {\r\n\tdashes: null,\r\n\tjoin: 'miter',\r\n\tmiterLimit: 1,\r\n\tthickness: 10,\r\n\tcap: 'square',\r\n\tcolor: 'black',\r\n\topacity: 1,\r\n\toverlay: false,\r\n\tviewport: null,\r\n\trange: null,\r\n\tclose: false,\r\n\tfill: null\r\n}\r\n\r\n\r\nLine2D.prototype.render = function (...args) {\r\n\tif (args.length) {\r\n\t\tthis.update(...args)\r\n\t}\r\n\r\n\tthis.draw()\r\n}\r\n\r\n\r\nLine2D.prototype.draw = function (...args) {\r\n\t// render multiple polylines via regl batch\r\n\t(args.length ? args : this.passes).forEach((s, i) => {\r\n\t\t// render array pass as a list of passes\r\n\t\tif (s && Array.isArray(s)) return this.draw(...s)\r\n\r\n\t\tif (typeof s === 'number') s = this.passes[s]\r\n\r\n\t\tif (!(s && s.count > 1 && s.opacity)) return\r\n\r\n\t\tthis.regl._refresh()\r\n\r\n\t\tif (s.fill && s.triangles && s.triangles.length > 2) {\r\n\t\t\tthis.shaders.fill(s)\r\n\t\t}\r\n\r\n\t\tif (!s.thickness) return\r\n\r\n\t\t// high scale is only available for rect mode with precision\r\n\t\tif (s.scale[0] * s.viewport.width > Line2D.precisionThreshold || s.scale[1] * s.viewport.height > Line2D.precisionThreshold) {\r\n\t\t\tthis.shaders.rect(s)\r\n\t\t}\r\n\r\n\t\t// thin this.passes or too many points are rendered as simplified rect shader\r\n\t\telse if (s.join === 'rect' || (!s.join && (s.thickness <= 2 || s.count >= Line2D.maxPoints))) {\r\n\t\t\tthis.shaders.rect(s)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.shaders.miter(s)\r\n\t\t}\r\n\t})\r\n\r\n\treturn this\r\n}\r\n\r\nLine2D.prototype.update = function (options) {\r\n\tif (!options) return\r\n\r\n\tif (options.length != null) {\r\n\t\tif (typeof options[0] === 'number') options = [{positions: options}]\r\n\t}\r\n\r\n\t// make options a batch\r\n\telse if (!Array.isArray(options)) options = [options]\r\n\r\n\tlet { regl, gl } = this\r\n\r\n\t// process per-line settings\r\n\toptions.forEach((o, i) => {\r\n\t\tlet state = this.passes[i]\r\n\r\n\t\tif (o === undefined) return\r\n\r\n\t\t// null-argument removes pass\r\n\t\tif (o === null) {\r\n\t\t\tthis.passes[i] = null\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (typeof o[0] === 'number') o = {positions: o}\r\n\r\n\t\t// handle aliases\r\n\t\to = pick(o, {\r\n\t\t\tpositions: 'positions points data coords',\r\n\t\t\tthickness: 'thickness lineWidth lineWidths line-width linewidth width stroke-width strokewidth strokeWidth',\r\n\t\t\tjoin: 'lineJoin linejoin join type mode',\r\n\t\t\tmiterLimit: 'miterlimit miterLimit',\r\n\t\t\tdashes: 'dash dashes dasharray dash-array dashArray',\r\n\t\t\tcolor: 'color colour stroke colors colours stroke-color strokeColor',\r\n\t\t\tfill: 'fill fill-color fillColor',\r\n\t\t\topacity: 'alpha opacity',\r\n\t\t\toverlay: 'overlay crease overlap intersect',\r\n\t\t\tclose: 'closed close closed-path closePath',\r\n\t\t\trange: 'range dataBox',\r\n\t\t\tviewport: 'viewport viewBox',\r\n\t\t\thole: 'holes hole hollow'\r\n\t\t})\r\n\r\n\t\t// init state\r\n\t\tif (!state) {\r\n\t\t\tthis.passes[i] = state = {\r\n\t\t\t\tid: i,\r\n\t\t\t\tscale: null,\r\n\t\t\t\tscaleFract: null,\r\n\t\t\t\ttranslate: null,\r\n\t\t\t\ttranslateFract: null,\r\n\t\t\t\tcount: 0,\r\n\t\t\t\thole: [],\r\n\t\t\t\tdepth: 0,\r\n\r\n\t\t\t\tdashLength: 1,\r\n\t\t\t\tdashTexture: regl.texture({\r\n\t\t\t\t\tchannels: 1,\r\n\t\t\t\t\tdata: new Uint8Array([255]),\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1,\r\n\t\t\t\t\tmag: 'linear',\r\n\t\t\t\t\tmin: 'linear'\r\n\t\t\t\t}),\r\n\r\n\t\t\t\tcolorBuffer: regl.buffer({\r\n\t\t\t\t\tusage: 'dynamic',\r\n\t\t\t\t\ttype: 'uint8',\r\n\t\t\t\t\tdata: new Uint8Array()\r\n\t\t\t\t}),\r\n\t\t\t\tpositionBuffer: regl.buffer({\r\n\t\t\t\t\tusage: 'dynamic',\r\n\t\t\t\t\ttype: 'float',\r\n\t\t\t\t\tdata: new Uint8Array()\r\n\t\t\t\t}),\r\n\t\t\t\tpositionFractBuffer: regl.buffer({\r\n\t\t\t\t\tusage: 'dynamic',\r\n\t\t\t\t\ttype: 'float',\r\n\t\t\t\t\tdata: new Uint8Array()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\to = extend({}, Line2D.defaults, o)\r\n\t\t}\r\n\t\tif (o.thickness != null) state.thickness = parseFloat(o.thickness)\r\n\t\tif (o.opacity != null) state.opacity = parseFloat(o.opacity)\r\n\t\tif (o.miterLimit != null) state.miterLimit = parseFloat(o.miterLimit)\r\n\t\tif (o.overlay != null) {\r\n\t\t\tstate.overlay = !!o.overlay\r\n\t\t\tif (i < Line2D.maxLines) {\r\n\t\t\t\tstate.depth = 2 * (Line2D.maxLines - 1 - i % Line2D.maxLines) / Line2D.maxLines - 1.;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (o.join != null) state.join = o.join\r\n\t\tif (o.hole != null) state.hole = o.hole\r\n\t\tif (o.fill != null) state.fill = !o.fill ? null : rgba(o.fill, 'uint8')\r\n\t\tif (o.viewport != null) state.viewport = parseRect(o.viewport)\r\n\r\n\t\tif (!state.viewport) {\r\n\t\t\tstate.viewport = parseRect([\r\n\t\t\t\tgl.drawingBufferWidth,\r\n\t\t\t\tgl.drawingBufferHeight\r\n\t\t\t])\r\n\t\t}\r\n\r\n\t\tif (o.close != null) state.close = o.close\r\n\r\n\t\t// reset positions\r\n\t\tif (o.positions === null) o.positions = []\r\n\t\tif (o.positions) {\r\n\t\t\tlet positions, count\r\n\r\n\t\t\t// if positions are an object with x/y\r\n\t\t\tif (o.positions.x && o.positions.y) {\r\n\t\t\t\tlet xPos = o.positions.x\r\n\t\t\t\tlet yPos = o.positions.y\r\n\t\t\t\tcount = state.count = Math.max(\r\n\t\t\t\t\txPos.length,\r\n\t\t\t\t\tyPos.length\r\n\t\t\t\t)\r\n\t\t\t\tpositions = new Float64Array(count * 2)\r\n\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\tpositions[i * 2] = xPos[i]\r\n\t\t\t\t\tpositions[i * 2 + 1] = yPos[i]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpositions = flatten(o.positions, 'float64')\r\n\t\t\t\tcount = state.count = Math.floor(positions.length / 2)\r\n\t\t\t}\r\n\r\n\t\t\tlet bounds = state.bounds = getBounds(positions, 2)\r\n\r\n\t\t\t// create fill positions\r\n\t\t\t// FIXME: fill positions can be set only along with positions\r\n\t\t\tif (state.fill) {\r\n\t\t\t\tlet pos = []\r\n\r\n\t\t\t\t// filter bad vertices and remap triangles to ensure shape\r\n\t\t\t\tlet ids = {}\r\n\t\t\t\tlet lastId = 0\r\n\r\n\t\t\t\tfor (let i = 0, ptr = 0, l = state.count; i < l; i++) {\r\n\t\t\t\t\tlet x = positions[i*2]\r\n\t\t\t\t\tlet y = positions[i*2 + 1]\r\n\t\t\t\t\tif (isNaN(x) || isNaN(y) || x == null || y == null) {\r\n\t\t\t\t\t\tx = positions[lastId*2]\r\n\t\t\t\t\t\ty = positions[lastId*2 + 1]\r\n\t\t\t\t\t\tids[i] = lastId\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlastId = i\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpos[ptr++] = x\r\n\t\t\t\t\tpos[ptr++] = y\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet triangles = triangulate(pos, state.hole || [])\r\n\r\n\t\t\t\tfor (let i = 0, l = triangles.length; i < l; i++) {\r\n\t\t\t\t\tif (ids[triangles[i]] != null) triangles[i] = ids[triangles[i]]\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.triangles = triangles\r\n\t\t\t}\r\n\r\n\t\t\t// update position buffers\r\n\t\t\tlet npos = new Float64Array(positions)\r\n\t\t\tnormalize(npos, 2, bounds)\r\n\r\n\t\t\tlet positionData = new Float64Array(count * 2 + 6)\r\n\r\n\t\t\t// rotate first segment join\r\n\t\t\tif (state.close) {\r\n\t\t\t\tif (positions[0] === positions[count*2 - 2] &&\r\n\t\t\t\t\tpositions[1] === positions[count*2 - 1]) {\r\n\t\t\t\t\tpositionData[0] = npos[count*2 - 4]\r\n\t\t\t\t\tpositionData[1] = npos[count*2 - 3]\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpositionData[0] = npos[count*2 - 2]\r\n\t\t\t\t\tpositionData[1] = npos[count*2 - 1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpositionData[0] = npos[0]\r\n\t\t\t\tpositionData[1] = npos[1]\r\n\t\t\t}\r\n\r\n\t\t\tpositionData.set(npos, 2)\r\n\r\n\t\t\t// add last segment\r\n\t\t\tif (state.close) {\r\n\t\t\t\t// ignore coinciding start/end\r\n\t\t\t\tif (positions[0] === positions[count*2 - 2] &&\r\n\t\t\t\t\tpositions[1] === positions[count*2 - 1]) {\r\n\t\t\t\t\tpositionData[count*2 + 2] = npos[2]\r\n\t\t\t\t\tpositionData[count*2 + 3] = npos[3]\r\n\t\t\t\t\tstate.count -= 1\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpositionData[count*2 + 2] = npos[0]\r\n\t\t\t\t\tpositionData[count*2 + 3] = npos[1]\r\n\t\t\t\t\tpositionData[count*2 + 4] = npos[2]\r\n\t\t\t\t\tpositionData[count*2 + 5] = npos[3]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// add stub\r\n\t\t\telse {\r\n\t\t\t\tpositionData[count*2 + 2] = npos[count*2 - 2]\r\n\t\t\t\tpositionData[count*2 + 3] = npos[count*2 - 1]\r\n\t\t\t\tpositionData[count*2 + 4] = npos[count*2 - 2]\r\n\t\t\t\tpositionData[count*2 + 5] = npos[count*2 - 1]\r\n\t\t\t}\r\n\r\n\t\t\tstate.positionBuffer(float32(positionData))\r\n\t\t\tstate.positionFractBuffer(fract32(positionData))\r\n\t\t}\r\n\r\n\t\tif (o.range) {\r\n\t\t\tstate.range = o.range\r\n\t\t} else if (!state.range) {\r\n\t\t\tstate.range = state.bounds\r\n\t\t}\r\n\r\n\t\tif ((o.range || o.positions) && state.count) {\r\n\t\t\tlet bounds = state.bounds\r\n\r\n\t\t\tlet boundsW = bounds[2] - bounds[0],\r\n\t\t\t\tboundsH = bounds[3] - bounds[1]\r\n\r\n\t\t\tlet rangeW = state.range[2] - state.range[0],\r\n\t\t\t\trangeH = state.range[3] - state.range[1]\r\n\r\n\t\t\tstate.scale = [\r\n\t\t\t\tboundsW / rangeW,\r\n\t\t\t\tboundsH / rangeH\r\n\t\t\t]\r\n\t\t\tstate.translate = [\r\n\t\t\t\t-state.range[0] / rangeW + bounds[0] / rangeW || 0,\r\n\t\t\t\t-state.range[1] / rangeH + bounds[1] / rangeH || 0\r\n\t\t\t]\r\n\r\n\t\t\tstate.scaleFract = fract32(state.scale)\r\n\t\t\tstate.translateFract = fract32(state.translate)\r\n\t\t}\r\n\r\n\t\tif (o.dashes) {\r\n\t\t\tlet dashLength = 0., dashData\r\n\r\n\t\t\tif (!o.dashes || o.dashes.length < 2) {\r\n\t\t\t\tdashLength = 1.\r\n\t\t\t\tdashData = new Uint8Array([255, 255, 255, 255, 255, 255, 255, 255])\r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\t\t\t\tdashLength = 0.;\r\n\t\t\t\tfor(let i = 0; i < o.dashes.length; ++i) {\r\n\t\t\t\t\tdashLength += o.dashes[i]\r\n\t\t\t\t}\r\n\t\t\t\tdashData = new Uint8Array(dashLength * Line2D.dashMult)\r\n\t\t\t\tlet ptr = 0\r\n\t\t\t\tlet fillColor = 255\r\n\r\n\t\t\t\t// repeat texture two times to provide smooth 0-step\r\n\t\t\t\tfor (let k = 0; k < 2; k++) {\r\n\t\t\t\t\tfor(let i = 0; i < o.dashes.length; ++i) {\r\n\t\t\t\t\t\tfor(let j = 0, l = o.dashes[i] * Line2D.dashMult * .5; j < l; ++j) {\r\n\t\t\t\t\t\t\tdashData[ptr++] = fillColor\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfillColor ^= 255\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tstate.dashLength = dashLength\r\n\t\t\tstate.dashTexture({\r\n\t\t\t\tchannels: 1,\r\n\t\t\t\tdata: dashData,\r\n\t\t\t\twidth: dashData.length,\r\n\t\t\t\theight: 1,\r\n\t\t\t\tmag: 'linear',\r\n\t\t\t\tmin: 'linear'\r\n\t\t\t}, 0, 0)\r\n\t\t}\r\n\r\n\t\tif (o.color) {\r\n\t\t\tlet count = state.count\r\n\t\t\tlet colors = o.color\r\n\r\n\t\t\tif (!colors) colors = 'transparent'\r\n\r\n\t\t\tlet colorData = new Uint8Array(count * 4 + 4)\r\n\r\n\t\t\t// convert colors to typed arrays\r\n\t\t\tif (!Array.isArray(colors) || typeof colors[0] === 'number') {\r\n\t\t\t\tlet c = rgba(colors, 'uint8')\r\n\r\n\t\t\t\tfor (let i = 0; i < count + 1; i++) {\r\n\t\t\t\t\tcolorData.set(c, i * 4)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\tlet c = rgba(colors[i], 'uint8')\r\n\t\t\t\t\tcolorData.set(c, i * 4)\r\n\t\t\t\t}\r\n\t\t\t\tcolorData.set(rgba(colors[0], 'uint8'), count * 4)\r\n\t\t\t}\r\n\r\n\t\t\tstate.colorBuffer({\r\n\t\t\t\tusage: 'dynamic',\r\n\t\t\t\ttype: 'uint8',\r\n\t\t\t\tdata: colorData\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t// remove unmentioned passes\r\n\tif (options.length < this.passes.length) {\r\n\t\tfor (let i = options.length; i < this.passes.length; i++) {\r\n\t\t\tlet pass = this.passes[i]\r\n\t\t\tif (!pass) continue\r\n\t\t\tpass.colorBuffer.destroy()\r\n\t\t\tpass.positionBuffer.destroy()\r\n\t\t\tpass.dashTexture.destroy()\r\n\t\t}\r\n\t\tthis.passes.length = options.length\r\n\t}\r\n\r\n\t// remove null items\r\n\tthis.passes = this.passes.filter(Boolean)\r\n\r\n\treturn this\r\n}\r\n\r\nLine2D.prototype.destroy = function () {\r\n\tthis.passes.forEach(pass => {\r\n\t\tpass.colorBuffer.destroy()\r\n\t\tpass.positionBuffer.destroy()\r\n\t\tpass.dashTexture.destroy()\r\n\t})\r\n\r\n\tthis.passes.length = 0\r\n\r\n\treturn this\r\n}\r\n\r\n",null]}