{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot3d/scene.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot3d/scene.js","mtime":1529418308673},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createScene\r\n\r\nvar createCamera = require('3d-view-controls')\r\nvar createAxes   = require('gl-axes3d')\r\nvar axesRanges   = require('gl-axes3d/properties')\r\nvar createSpikes = require('gl-spikes3d')\r\nvar createSelect = require('gl-select-static')\r\nvar createFBO    = require('gl-fbo')\r\nvar drawTriangle = require('a-big-triangle')\r\nvar mouseChange  = require('mouse-change')\r\nvar perspective  = require('gl-mat4/perspective')\r\nvar createShader = require('./lib/shader')\r\nvar isMobile = require('is-mobile')()\r\n\r\nfunction MouseSelect() {\r\n  this.mouse          = [-1,-1]\r\n  this.screen         = null\r\n  this.distance       = Infinity\r\n  this.index          = null\r\n  this.dataCoordinate = null\r\n  this.dataPosition   = null\r\n  this.object         = null\r\n  this.data           = null\r\n}\r\n\r\nfunction getContext(canvas, options) {\r\n  var gl = null\r\n  try {\r\n    gl = canvas.getContext('webgl', options)\r\n    if(!gl) {\r\n      gl = canvas.getContext('experimental-webgl', options)\r\n    }\r\n  } catch(e) {\r\n    return null\r\n  }\r\n  return gl\r\n}\r\n\r\nfunction roundUpPow10(x) {\r\n  var y = Math.round(Math.log(Math.abs(x)) / Math.log(10))\r\n  if(y < 0) {\r\n    var base = Math.round(Math.pow(10, -y))\r\n    return Math.ceil(x*base) / base\r\n  } else if(y > 0) {\r\n    var base = Math.round(Math.pow(10, y))\r\n    return Math.ceil(x/base) * base\r\n  }\r\n  return Math.ceil(x)\r\n}\r\n\r\nfunction defaultBool(x) {\r\n  if(typeof x === 'boolean') {\r\n    return x\r\n  }\r\n  return true\r\n}\r\n\r\nfunction createScene(options) {\r\n  options = options || {}\r\n\r\n  var stopped = false\r\n\r\n  var pixelRatio = options.pixelRatio || parseFloat(window.devicePixelRatio)\r\n\r\n  var canvas = options.canvas\r\n  if(!canvas) {\r\n    canvas = document.createElement('canvas')\r\n    if(options.container) {\r\n      var container = options.container\r\n      container.appendChild(canvas)\r\n    } else {\r\n      document.body.appendChild(canvas)\r\n    }\r\n  }\r\n\r\n  var gl = options.gl\r\n  if(!gl) {\r\n    gl = getContext(canvas,\r\n      options.glOptions || {\r\n        premultipliedAlpha: true,\r\n        antialias: true\r\n      })\r\n  }\r\n  if(!gl) {\r\n    throw new Error('webgl not supported')\r\n  }\r\n\r\n  //Initial bounds\r\n  var bounds = options.bounds || [[-10,-10,-10], [10,10,10]]\r\n\r\n  //Create selection\r\n  var selection = new MouseSelect()\r\n\r\n  //Accumulation buffer\r\n  var accumBuffer = createFBO(gl,\r\n    [gl.drawingBufferWidth, gl.drawingBufferHeight], {\r\n      preferFloat: !isMobile\r\n    })\r\n\r\n  var accumShader = createShader(gl)\r\n\r\n  //Create a camera\r\n  var cameraOptions = options.camera || {\r\n    eye:    [2,0,0],\r\n    center: [0,0,0],\r\n    up:     [0,1,0],\r\n    zoomMin: 0.1,\r\n    zoomMax: 100,\r\n    mode:    'turntable'\r\n  }\r\n\r\n  //Create axes\r\n  var axesOptions = options.axes || {}\r\n  var axes = createAxes(gl, axesOptions)\r\n  axes.enable = !axesOptions.disable\r\n\r\n  //Create spikes\r\n  var spikeOptions = options.spikes || {}\r\n  var spikes = createSpikes(gl, spikeOptions)\r\n\r\n  //Object list is empty initially\r\n  var objects         = []\r\n  var pickBufferIds   = []\r\n  var pickBufferCount = []\r\n  var pickBuffers     = []\r\n\r\n  //Dirty flag, skip redraw if scene static\r\n  var dirty       = true\r\n  var pickDirty   = true\r\n\r\n  var projection     = new Array(16)\r\n  var model          = new Array(16)\r\n\r\n  var cameraParams = {\r\n    view:         null,\r\n    projection:   projection,\r\n    model:        model\r\n  }\r\n\r\n  var pickDirty = true\r\n\r\n  var viewShape = [ gl.drawingBufferWidth, gl.drawingBufferHeight ]\r\n\r\n  //Create scene object\r\n  var scene = {\r\n    gl:           gl,\r\n    contextLost:  false,\r\n    pixelRatio:   options.pixelRatio || parseFloat(window.devicePixelRatio),\r\n    canvas:       canvas,\r\n    selection:    selection,\r\n    camera:       createCamera(canvas, cameraOptions),\r\n    axes:         axes,\r\n    axesPixels:   null,\r\n    spikes:       spikes,\r\n    bounds:       bounds,\r\n    objects:      objects,\r\n    shape:        viewShape,\r\n    aspect:       options.aspectRatio || [1,1,1],\r\n    pickRadius:   options.pickRadius || 10,\r\n    zNear:        options.zNear || 0.01,\r\n    zFar:         options.zFar  || 1000,\r\n    fovy:         options.fovy  || Math.PI/4,\r\n    clearColor:   options.clearColor || [0,0,0,0],\r\n    autoResize:   defaultBool(options.autoResize),\r\n    autoBounds:   defaultBool(options.autoBounds),\r\n    autoScale:    !!options.autoScale,\r\n    autoCenter:   defaultBool(options.autoCenter),\r\n    clipToBounds: defaultBool(options.clipToBounds),\r\n    snapToData:   !!options.snapToData,\r\n    onselect:     options.onselect || null,\r\n    onrender:     options.onrender || null,\r\n    onclick:      options.onclick  || null,\r\n    cameraParams: cameraParams,\r\n    oncontextloss: null,\r\n    mouseListener: null\r\n  }\r\n\r\n  var pickShape = [ (gl.drawingBufferWidth/scene.pixelRatio)|0, (gl.drawingBufferHeight/scene.pixelRatio)|0 ]\r\n\r\n  function resizeListener() {\r\n    if(stopped) {\r\n      return\r\n    }\r\n    if(!scene.autoResize) {\r\n      return\r\n    }\r\n    var parent = canvas.parentNode\r\n    var width  = 1\r\n    var height = 1\r\n    if(parent && parent !== document.body) {\r\n      width  = parent.clientWidth\r\n      height = parent.clientHeight\r\n    } else {\r\n      width  = window.innerWidth\r\n      height = window.innerHeight\r\n    }\r\n    var nextWidth  = Math.ceil(width  * scene.pixelRatio)|0\r\n    var nextHeight = Math.ceil(height * scene.pixelRatio)|0\r\n    if(nextWidth !== canvas.width || nextHeight !== canvas.height) {\r\n      canvas.width   = nextWidth\r\n      canvas.height  = nextHeight\r\n      var style = canvas.style\r\n      style.position = style.position || 'absolute'\r\n      style.left     = '0px'\r\n      style.top      = '0px'\r\n      style.width    = width  + 'px'\r\n      style.height   = height + 'px'\r\n      dirty = true\r\n    }\r\n  }\r\n  if(scene.autoResize) {\r\n    resizeListener()\r\n  }\r\n  window.addEventListener('resize', resizeListener)\r\n\r\n  function reallocPickIds() {\r\n    var numObjs = objects.length\r\n    var numPick = pickBuffers.length\r\n    for(var i=0; i<numPick; ++i) {\r\n      pickBufferCount[i] = 0\r\n    }\r\n    obj_loop:\r\n    for(var i=0; i<numObjs; ++i) {\r\n      var obj = objects[i]\r\n      var pickCount = obj.pickSlots\r\n      if(!pickCount) {\r\n        pickBufferIds[i] = -1\r\n        continue\r\n      }\r\n      for(var j=0; j<numPick; ++j) {\r\n        if(pickBufferCount[j] + pickCount < 255) {\r\n          pickBufferIds[i] = j\r\n          obj.setPickBase(pickBufferCount[j]+1)\r\n          pickBufferCount[j] += pickCount\r\n          continue obj_loop\r\n        }\r\n      }\r\n      //Create new pick buffer\r\n      var nbuffer = createSelect(gl, viewShape)\r\n      pickBufferIds[i] = numPick\r\n      pickBuffers.push(nbuffer)\r\n      pickBufferCount.push(pickCount)\r\n      obj.setPickBase(1)\r\n      numPick += 1\r\n    }\r\n    while(numPick > 0 && pickBufferCount[numPick-1] === 0) {\r\n      pickBufferCount.pop()\r\n      pickBuffers.pop().dispose()\r\n    }\r\n  }\r\n\r\n  scene.update = function(options) {\r\n    if(stopped) {\r\n      return\r\n    }\r\n    options = options || {}\r\n    dirty = true\r\n    pickDirty = true\r\n  }\r\n\r\n  scene.add = function(obj) {\r\n    if(stopped) {\r\n      return\r\n    }\r\n    obj.axes = axes\r\n    objects.push(obj)\r\n    pickBufferIds.push(-1)\r\n    dirty = true\r\n    pickDirty = true\r\n    reallocPickIds()\r\n  }\r\n\r\n  scene.remove = function(obj) {\r\n    if(stopped) {\r\n      return\r\n    }\r\n    var idx = objects.indexOf(obj)\r\n    if(idx < 0) {\r\n      return\r\n    }\r\n    objects.splice(idx, 1)\r\n    pickBufferIds.pop()\r\n    dirty = true\r\n    pickDirty = true\r\n    reallocPickIds()\r\n  }\r\n\r\n  scene.dispose = function() {\r\n    if(stopped) {\r\n      return\r\n    }\r\n\r\n    stopped = true\r\n\r\n    window.removeEventListener('resize', resizeListener)\r\n    canvas.removeEventListener('webglcontextlost', checkContextLoss)\r\n    scene.mouseListener.enabled = false\r\n\r\n    if(scene.contextLost) {\r\n      return\r\n    }\r\n\r\n    //Destroy objects\r\n    axes.dispose()\r\n    spikes.dispose()\r\n    for(var i=0; i<objects.length; ++i) {\r\n      objects[i].dispose()\r\n    }\r\n\r\n    //Clean up buffers\r\n    accumBuffer.dispose()\r\n    for(var i=0; i<pickBuffers.length; ++i) {\r\n      pickBuffers[i].dispose()\r\n    }\r\n\r\n    //Clean up shaders\r\n    accumShader.dispose()\r\n\r\n    //Release all references\r\n    gl = null\r\n    axes = null\r\n    spikes = null\r\n    objects = []\r\n  }\r\n\r\n  //Update mouse position\r\n  var mouseRotating = false\r\n\r\n  var prevButtons = 0\r\n\r\n  scene.mouseListener = mouseChange(canvas, function(buttons, x, y) {\r\n    if(stopped) {\r\n      return\r\n    }\r\n\r\n    var numPick = pickBuffers.length\r\n    var numObjs = objects.length\r\n    var prevObj = selection.object\r\n\r\n    selection.distance = Infinity\r\n    selection.mouse[0] = x\r\n    selection.mouse[1] = y\r\n    selection.object = null\r\n    selection.screen = null\r\n    selection.dataCoordinate = selection.dataPosition = null\r\n\r\n    var change = false\r\n\r\n    if(buttons && prevButtons) {\r\n      mouseRotating = true\r\n    } else {\r\n      if(mouseRotating) {\r\n        pickDirty = true\r\n      }\r\n      mouseRotating = false\r\n\r\n      for(var i=0; i<numPick; ++i) {\r\n        var result = pickBuffers[i].query(x, pickShape[1] - y - 1, scene.pickRadius)\r\n        if(result) {\r\n          if(result.distance > selection.distance) {\r\n            continue\r\n          }\r\n          for(var j=0; j<numObjs; ++j) {\r\n            var obj = objects[j]\r\n            if(pickBufferIds[j] !== i) {\r\n              continue\r\n            }\r\n            var objPick = obj.pick(result)\r\n            if(objPick) {\r\n              selection.buttons        = buttons\r\n              selection.screen         = result.coord\r\n              selection.distance       = result.distance\r\n              selection.object         = obj\r\n              selection.index          = objPick.distance\r\n              selection.dataPosition   = objPick.position\r\n              selection.dataCoordinate = objPick.dataCoordinate\r\n              selection.data           = objPick\r\n              change = true\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if(prevObj && prevObj !== selection.object) {\r\n      if(prevObj.highlight) {\r\n        prevObj.highlight(null)\r\n      }\r\n      dirty = true\r\n    }\r\n    if(selection.object) {\r\n      if(selection.object.highlight) {\r\n        selection.object.highlight(selection.data)\r\n      }\r\n      dirty = true\r\n    }\r\n\r\n    change = change || (selection.object !== prevObj)\r\n    if(change && scene.onselect) {\r\n      scene.onselect(selection)\r\n    }\r\n\r\n    if((buttons & 1) && !(prevButtons & 1) && scene.onclick) {\r\n      scene.onclick(selection)\r\n    }\r\n    prevButtons = buttons\r\n  })\r\n\r\n  function checkContextLoss() {\r\n    if(scene.contextLost) {\r\n      return true\r\n    }\r\n    if(gl.isContextLost()) {\r\n      scene.contextLost = true\r\n      scene.mouseListener.enabled = false\r\n      scene.selection.object = null\r\n      if(scene.oncontextloss) {\r\n        scene.oncontextloss()\r\n      }\r\n    }\r\n  }\r\n\r\n  canvas.addEventListener('webglcontextlost', checkContextLoss)\r\n\r\n  //Render the scene for mouse picking\r\n  function renderPick() {\r\n    if(checkContextLoss()) {\r\n      return\r\n    }\r\n\r\n    gl.colorMask(true, true, true, true)\r\n    gl.depthMask(true)\r\n    gl.disable(gl.BLEND)\r\n    gl.enable(gl.DEPTH_TEST)\r\n\r\n    var numObjs = objects.length\r\n    var numPick = pickBuffers.length\r\n    for(var j=0; j<numPick; ++j) {\r\n      var buf = pickBuffers[j]\r\n      buf.shape = pickShape\r\n      buf.begin()\r\n      for(var i=0; i<numObjs; ++i) {\r\n        if(pickBufferIds[i] !== j) {\r\n          continue\r\n        }\r\n        var obj = objects[i]\r\n        if(obj.drawPick) {\r\n          obj.pixelRatio = 1\r\n          obj.drawPick(cameraParams)\r\n        }\r\n      }\r\n      buf.end()\r\n    }\r\n  }\r\n\r\n  var nBounds = [\r\n    [ Infinity, Infinity, Infinity],\r\n    [-Infinity,-Infinity,-Infinity]]\r\n\r\n  var prevBounds = [nBounds[0].slice(), nBounds[1].slice()]\r\n\r\n  function redraw() {\r\n    if(checkContextLoss()) {\r\n      return\r\n    }\r\n\r\n    resizeListener()\r\n\r\n    //Tick camera\r\n    var cameraMoved = scene.camera.tick()\r\n    cameraParams.view = scene.camera.matrix\r\n    dirty     = dirty || cameraMoved\r\n    pickDirty = pickDirty || cameraMoved\r\n\r\n      //Set pixel ratio\r\n    axes.pixelRatio   = scene.pixelRatio\r\n    spikes.pixelRatio = scene.pixelRatio\r\n\r\n    //Check if any objects changed, recalculate bounds\r\n    var numObjs = objects.length\r\n    var lo = nBounds[0]\r\n    var hi = nBounds[1]\r\n    lo[0] = lo[1] = lo[2] =  Infinity\r\n    hi[0] = hi[1] = hi[2] = -Infinity\r\n    for(var i=0; i<numObjs; ++i) {\r\n      var obj = objects[i]\r\n\r\n      //Set the axes properties for each object\r\n      obj.pixelRatio = scene.pixelRatio\r\n      obj.axes = scene.axes\r\n\r\n      dirty = dirty || !!obj.dirty\r\n      pickDirty = pickDirty || !!obj.dirty\r\n      var obb = obj.bounds\r\n      if(obb) {\r\n        var olo = obb[0]\r\n        var ohi = obb[1]\r\n        for(var j=0; j<3; ++j) {\r\n          lo[j] = Math.min(lo[j], olo[j])\r\n          hi[j] = Math.max(hi[j], ohi[j])\r\n        }\r\n      }\r\n    }\r\n\r\n    //Recalculate bounds\r\n    var bounds = scene.bounds\r\n    if(scene.autoBounds) {\r\n      for(var j=0; j<3; ++j) {\r\n        if(hi[j] < lo[j]) {\r\n          lo[j] = -1\r\n          hi[j] = 1\r\n        } else {\r\n          if(lo[j] === hi[j]) {\r\n            lo[j] -= 1\r\n            hi[j] += 1\r\n          }\r\n          var padding = 0.05 * (hi[j] - lo[j])\r\n          lo[j] = lo[j] - padding\r\n          hi[j] = hi[j] + padding\r\n        }\r\n        bounds[0][j] = lo[j]\r\n        bounds[1][j] = hi[j]\r\n      }\r\n    }\r\n\r\n    var boundsChanged = false\r\n    for(var j=0; j<3; ++j) {\r\n        boundsChanged = boundsChanged ||\r\n            (prevBounds[0][j] !== bounds[0][j])  ||\r\n            (prevBounds[1][j] !== bounds[1][j])\r\n        prevBounds[0][j] = bounds[0][j]\r\n        prevBounds[1][j] = bounds[1][j]\r\n    }\r\n\r\n    //Recalculate bounds\r\n    pickDirty = pickDirty || boundsChanged\r\n    dirty = dirty || boundsChanged\r\n\r\n    if(!dirty) {\r\n      return\r\n    }\r\n\r\n    if(boundsChanged) {\r\n      var tickSpacing = [0,0,0]\r\n      for(var i=0; i<3; ++i) {\r\n        tickSpacing[i] = roundUpPow10((bounds[1][i]-bounds[0][i]) / 10.0)\r\n      }\r\n      if(axes.autoTicks) {\r\n        axes.update({\r\n          bounds: bounds,\r\n          tickSpacing: tickSpacing\r\n        })\r\n      } else {\r\n        axes.update({\r\n          bounds: bounds\r\n        })\r\n      }\r\n    }\r\n\r\n    //Get scene\r\n    var width  = gl.drawingBufferWidth\r\n    var height = gl.drawingBufferHeight\r\n    viewShape[0] = width\r\n    viewShape[1] = height\r\n    pickShape[0] = Math.max(width/scene.pixelRatio, 1)|0\r\n    pickShape[1] = Math.max(height/scene.pixelRatio, 1)|0\r\n\r\n    //Compute camera parameters\r\n    perspective(projection,\r\n      scene.fovy,\r\n      width/height,\r\n      scene.zNear,\r\n      scene.zFar)\r\n\r\n    //Compute model matrix\r\n    for(var i=0; i<16; ++i) {\r\n      model[i] = 0\r\n    }\r\n    model[15] = 1\r\n\r\n    var maxS = 0\r\n    for(var i=0; i<3; ++i) {\r\n      maxS = Math.max(maxS, bounds[1][i] - bounds[0][i])\r\n    }\r\n\r\n    for(var i=0; i<3; ++i) {\r\n      if(scene.autoScale) {\r\n        model[5*i] = scene.aspect[i] / (bounds[1][i] - bounds[0][i])\r\n      } else {\r\n        model[5*i] = 1  / maxS\r\n      }\r\n      if(scene.autoCenter) {\r\n        model[12+i] = -model[5*i] * 0.5 * (bounds[0][i] + bounds[1][i])\r\n      }\r\n    }\r\n\r\n    //Apply axes/clip bounds\r\n    for(var i=0; i<numObjs; ++i) {\r\n      var obj = objects[i]\r\n\r\n      //Set axes bounds\r\n      obj.axesBounds = bounds\r\n\r\n      //Set clip bounds\r\n      if(scene.clipToBounds) {\r\n        obj.clipBounds = bounds\r\n      }\r\n    }\r\n    //Set spike parameters\r\n    if(selection.object) {\r\n      if(scene.snapToData) {\r\n        spikes.position = selection.dataCoordinate\r\n      } else {\r\n        spikes.position = selection.dataPosition\r\n      }\r\n      spikes.bounds = bounds\r\n    }\r\n\r\n    //If state changed, then redraw pick buffers\r\n    if(pickDirty) {\r\n      pickDirty = false\r\n      renderPick()\r\n    }\r\n\r\n    //Recalculate pixel data\r\n    scene.axesPixels = axesRanges(scene.axes, cameraParams, width, height)\r\n\r\n    //Call render callback\r\n    if(scene.onrender) {\r\n      scene.onrender()\r\n    }\r\n\r\n    //Read value\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\r\n    gl.viewport(0, 0, width, height)\r\n\r\n    //General strategy: 3 steps\r\n    //  1. render non-transparent objects\r\n    //  2. accumulate transparent objects into separate fbo\r\n    //  3. composite final scene\r\n\r\n    //Clear FBO\r\n    var clearColor = scene.clearColor\r\n    gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3])\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n    gl.depthMask(true)\r\n    gl.colorMask(true, true, true, true)\r\n    gl.enable(gl.DEPTH_TEST)\r\n    gl.depthFunc(gl.LEQUAL)\r\n    gl.disable(gl.BLEND)\r\n    gl.disable(gl.CULL_FACE)  //most visualization surfaces are 2 sided\r\n\r\n    //Render opaque pass\r\n    var hasTransparent = false\r\n    if(axes.enable) {\r\n      hasTransparent = hasTransparent || axes.isTransparent()\r\n      axes.draw(cameraParams)\r\n    }\r\n    spikes.axes = axes\r\n    if(selection.object) {\r\n      spikes.draw(cameraParams)\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE)  //most visualization surfaces are 2 sided\r\n\r\n    for(var i=0; i<numObjs; ++i) {\r\n      var obj = objects[i]\r\n      obj.axes = axes\r\n      obj.pixelRatio = scene.pixelRatio\r\n      if(obj.isOpaque && obj.isOpaque()) {\r\n        obj.draw(cameraParams)\r\n      }\r\n      if(obj.isTransparent && obj.isTransparent()) {\r\n        hasTransparent = true\r\n      }\r\n    }\r\n\r\n    if(hasTransparent) {\r\n      //Render transparent pass\r\n      accumBuffer.shape = viewShape\r\n      accumBuffer.bind()\r\n      gl.clear(gl.DEPTH_BUFFER_BIT)\r\n      gl.colorMask(false, false, false, false)\r\n      gl.depthMask(true)\r\n      gl.depthFunc(gl.LESS)\r\n\r\n      //Render forward facing objects\r\n      if(axes.enable && axes.isTransparent()) {\r\n        axes.drawTransparent(cameraParams)\r\n      }\r\n      for(var i=0; i<numObjs; ++i) {\r\n        var obj = objects[i]\r\n        if(obj.isOpaque && obj.isOpaque()) {\r\n          obj.draw(cameraParams)\r\n        }\r\n      }\r\n\r\n      //Render transparent pass\r\n      gl.enable(gl.BLEND)\r\n      gl.blendEquation(gl.FUNC_ADD)\r\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\r\n      gl.colorMask(true, true, true, true)\r\n      gl.depthMask(false)\r\n      gl.clearColor(0,0,0,0)\r\n      gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n      if(axes.isTransparent()) {\r\n        axes.drawTransparent(cameraParams)\r\n      }\r\n\r\n      for(var i=0; i<numObjs; ++i) {\r\n        var obj = objects[i]\r\n        if(obj.isTransparent && obj.isTransparent()) {\r\n          obj.drawTransparent(cameraParams)\r\n        }\r\n      }\r\n\r\n      //Unbind framebuffer\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null)\r\n\r\n      //Draw composite pass\r\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\r\n      gl.disable(gl.DEPTH_TEST)\r\n      accumShader.bind()\r\n      accumBuffer.color[0].bind(0)\r\n      accumShader.uniforms.accumBuffer = 0\r\n      drawTriangle(gl)\r\n\r\n      //Turn off blending\r\n      gl.disable(gl.BLEND)\r\n    }\r\n\r\n    //Clear dirty flags\r\n    dirty = false\r\n    for(var i=0; i<numObjs; ++i) {\r\n      objects[i].dirty = false\r\n    }\r\n  }\r\n\r\n\r\n  //Draw the whole scene\r\n  function render() {\r\n    if(stopped || scene.contextLost) {\r\n      return\r\n    }\r\n    requestAnimationFrame(render)\r\n    redraw()\r\n  }\r\n  render()\r\n\r\n  //Force redraw of whole scene\r\n  scene.redraw = function() {\r\n    if(stopped) {\r\n      return\r\n    }\r\n    dirty = true\r\n    redraw()\r\n  }\r\n\r\n  return scene\r\n}\r\n",null]}