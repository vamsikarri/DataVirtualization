{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatterpolar/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatterpolar/calc.js","mtime":1529418310743},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nmodule.exports = function calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var subplotId = trace.subplot;\n    var radialAxis = fullLayout[subplotId].radialaxis;\n    var angularAxis = fullLayout[subplotId].angularaxis;\n    var rArray = radialAxis.makeCalcdata(trace, 'r');\n    var thetaArray = angularAxis.makeCalcdata(trace, 'theta');\n    var len = trace._length;\n    var cd = new Array(len);\n\n    function c2rad(v) {\n        return angularAxis.c2rad(v, trace.thetaunit);\n    }\n\n    for(var i = 0; i < len; i++) {\n        var r = rArray[i];\n        var theta = thetaArray[i];\n        var cdi = cd[i] = {};\n\n        if(isNumeric(r) && isNumeric(theta)) {\n            cdi.r = r;\n            cdi.theta = theta;\n            cdi.rad = c2rad(theta);\n        } else {\n            cdi.r = BADNUM;\n        }\n    }\n\n    var ppad = calcMarkerSize(trace, len);\n    Axes.expand(radialAxis, rArray, {ppad: ppad});\n\n    calcColorscale(trace);\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n",null]}