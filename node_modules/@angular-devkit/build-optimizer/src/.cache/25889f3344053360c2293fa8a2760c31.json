{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-axes3d/lib/text.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-axes3d/lib/text.js","mtime":1529418308594},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["\"use strict\"\r\n\r\nmodule.exports = createTextSprites\r\n\r\nvar createBuffer  = require('gl-buffer')\r\nvar createVAO     = require('gl-vao')\r\nvar vectorizeText = require('vectorize-text')\r\nvar createShader  = require('./shaders').text\r\n\r\nvar globals = window || process.global || {}\r\nvar __TEXT_CACHE  = globals.__TEXT_CACHE || {}\r\nglobals.__TEXT_CACHE = {}\r\n\r\n//Vertex buffer format for text is:\r\n//\r\n/// [x,y,z] = Spatial coordinate\r\n//\r\n\r\nvar VERTEX_SIZE = 3\r\nvar VERTEX_STRIDE = VERTEX_SIZE * 4\r\n\r\nfunction TextSprites(\r\n  gl,\r\n  shader,\r\n  buffer,\r\n  vao) {\r\n  this.gl           = gl\r\n  this.shader       = shader\r\n  this.buffer       = buffer\r\n  this.vao          = vao\r\n  this.tickOffset   =\r\n  this.tickCount    =\r\n  this.labelOffset  =\r\n  this.labelCount   = null\r\n}\r\n\r\nvar proto = TextSprites.prototype\r\n\r\n//Bind textures for rendering\r\nvar SHAPE = [0,0]\r\nproto.bind = function(model, view, projection, pixelScale) {\r\n  this.vao.bind()\r\n  this.shader.bind()\r\n  var uniforms = this.shader.uniforms\r\n  uniforms.model = model\r\n  uniforms.view = view\r\n  uniforms.projection = projection\r\n  uniforms.pixelScale = pixelScale\r\n  SHAPE[0] = this.gl.drawingBufferWidth\r\n  SHAPE[1] = this.gl.drawingBufferHeight\r\n  this.shader.uniforms.resolution = SHAPE\r\n}\r\n\r\nproto.unbind = function() {\r\n  this.vao.unbind()\r\n}\r\n\r\nproto.update = function(bounds, labels, labelFont, ticks, tickFont) {\r\n  var gl = this.gl\r\n  var data = []\r\n\r\n  function addItem(t, text, font, size) {\r\n    var fontcache = __TEXT_CACHE[font]\r\n    if(!fontcache) {\r\n      fontcache = __TEXT_CACHE[font] = {}\r\n    }\r\n    var mesh = fontcache[text]\r\n    if(!mesh) {\r\n      mesh = fontcache[text] = tryVectorizeText(text, {\r\n        triangles: true,\r\n        font: font,\r\n        textAlign: 'center',\r\n        textBaseline: 'middle'\r\n      })\r\n    }\r\n    var scale = (size || 12) / 12\r\n    var positions = mesh.positions\r\n    var cells = mesh.cells\r\n    var lo = [ Infinity, Infinity]\r\n    var hi = [-Infinity,-Infinity]\r\n    for(var i=0, nc=cells.length; i<nc; ++i) {\r\n      var c = cells[i]\r\n      for(var j=2; j>=0; --j) {\r\n        var p = positions[c[j]]\r\n        data.push(scale*p[0], -scale*p[1], t)\r\n      }\r\n    }\r\n  }\r\n\r\n  //Generate sprites for all 3 axes, store data in texture atlases\r\n  var tickOffset  = [0,0,0]\r\n  var tickCount   = [0,0,0]\r\n  var labelOffset = [0,0,0]\r\n  var labelCount  = [0,0,0]\r\n  for(var d=0; d<3; ++d) {\r\n\r\n    //Generate label\r\n    labelOffset[d] = (data.length/VERTEX_SIZE)|0\r\n    addItem(0.5*(bounds[0][d]+bounds[1][d]), labels[d], labelFont)\r\n    labelCount[d] = ((data.length/VERTEX_SIZE)|0) - labelOffset[d]\r\n\r\n    //Generate sprites for tick marks\r\n    tickOffset[d] = (data.length/VERTEX_SIZE)|0\r\n    for(var i=0; i<ticks[d].length; ++i) {\r\n      if(!ticks[d][i].text) {\r\n        continue\r\n      }\r\n      addItem(\r\n        ticks[d][i].x,\r\n        ticks[d][i].text,\r\n        ticks[d][i].font || tickFont,\r\n        ticks[d][i].fontSize || 12)\r\n    }\r\n    tickCount[d] = ((data.length/VERTEX_SIZE)|0) - tickOffset[d]\r\n  }\r\n\r\n  this.buffer.update(data)\r\n  this.tickOffset = tickOffset\r\n  this.tickCount = tickCount\r\n  this.labelOffset = labelOffset\r\n  this.labelCount = labelCount\r\n}\r\n\r\n//Draws the tick marks for an axis\r\nvar AXIS = [0,0,0]\r\nproto.drawTicks = function(d, scale, angle, offset, color) {\r\n  if(!this.tickCount[d]) {\r\n    return\r\n  }\r\n\r\n  var v = AXIS\r\n  v[0] = v[1] = v[2] = 0\r\n  v[d] = 1\r\n  this.shader.uniforms.axis = v\r\n  this.shader.uniforms.color = color\r\n  this.shader.uniforms.angle = angle\r\n  this.shader.uniforms.scale = scale\r\n  this.shader.uniforms.offset = offset\r\n  this.vao.draw(this.gl.TRIANGLES, this.tickCount[d], this.tickOffset[d])\r\n}\r\n\r\n//Draws the text label for an axis\r\nvar ZERO = [0,0,0]\r\nproto.drawLabel = function(d, scale, angle, offset, color) {\r\n  if(!this.labelCount[d]) {\r\n    return\r\n  }\r\n  this.shader.uniforms.axis = ZERO\r\n  this.shader.uniforms.color = color\r\n  this.shader.uniforms.angle = angle\r\n  this.shader.uniforms.scale = scale\r\n  this.shader.uniforms.offset = offset\r\n  this.vao.draw(this.gl.TRIANGLES, this.labelCount[d], this.labelOffset[d])\r\n}\r\n\r\n//Releases all resources attached to this object\r\nproto.dispose = function() {\r\n  this.shader.dispose()\r\n  this.vao.dispose()\r\n  this.buffer.dispose()\r\n}\r\n\r\nfunction tryVectorizeText(text, options) {\r\n  try {\r\n    return vectorizeText(text, options)\r\n  } catch(e) {\r\n    console.warn('error vectorizing text:', e)\r\n    return {\r\n      cells: [],\r\n      positions: []\r\n    }\r\n  }\r\n}\r\n\r\nfunction createTextSprites(\r\n    gl,\r\n    bounds,\r\n    labels,\r\n    labelFont,\r\n    ticks,\r\n    tickFont) {\r\n\r\n  var buffer = createBuffer(gl)\r\n  var vao = createVAO(gl, [\r\n    { \"buffer\": buffer,\r\n      \"size\": 3\r\n    }\r\n  ])\r\n\r\n  var shader = createShader(gl)\r\n  shader.attributes.position.location = 0\r\n\r\n  var result = new TextSprites(\r\n    gl,\r\n    shader,\r\n    buffer,\r\n    vao)\r\n\r\n  result.update(bounds, labels, labelFont, ticks, tickFont)\r\n\r\n  return result\r\n}\r\n",null]}