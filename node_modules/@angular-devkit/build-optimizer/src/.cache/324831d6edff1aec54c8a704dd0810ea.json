{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattermapbox/hover.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattermapbox/hover.js","mtime":1529418310743},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar getTraceColor = require('../scatter/get_trace_color');\nvar fillHoverText = require('../scatter/fill_hover_text');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var subplot = pointData.subplot;\n\n    // compute winding number about [-180, 180] globe\n    var winding = (xval >= 0) ?\n        Math.floor((xval + 180) / 360) :\n        Math.ceil((xval - 180) / 360);\n\n    // shift longitude to [-180, 180] to determine closest point\n    var lonShift = winding * 360;\n    var xval2 = xval - lonShift;\n\n    function distFn(d) {\n        var lonlat = d.lonlat;\n        if(lonlat[0] === BADNUM) return Infinity;\n\n        var lon = Lib.wrap180(lonlat[0]);\n        var lat = lonlat[1];\n        var pt = subplot.project([lon, lat]);\n        var dx = pt.x - xa.c2p([xval2, lat]);\n        var dy = pt.y - ya.c2p([lon, yval]);\n        var rad = Math.max(3, d.mrc || 0);\n\n        return Math.max(Math.sqrt(dx * dx + dy * dy) - rad, 1 - 3 / rad);\n    }\n\n    Fx.getClosest(cd, distFn, pointData);\n\n    // skip the rest (for this trace) if we didn't find a close point\n    if(pointData.index === false) return;\n\n    var di = cd[pointData.index];\n    var lonlat = di.lonlat;\n    var lonlatShifted = [Lib.wrap180(lonlat[0]) + lonShift, lonlat[1]];\n\n    // shift labels back to original winded globe\n    var xc = xa.c2p(lonlatShifted);\n    var yc = ya.c2p(lonlatShifted);\n    var rad = di.mrc || 1;\n\n    pointData.x0 = xc - rad;\n    pointData.x1 = xc + rad;\n    pointData.y0 = yc - rad;\n    pointData.y1 = yc + rad;\n\n    pointData.color = getTraceColor(trace, di);\n    pointData.extraText = getExtraText(trace, di, cd[0].t.labels);\n\n    return [pointData];\n};\n\nfunction getExtraText(trace, di, labels) {\n    var hoverinfo = di.hi || trace.hoverinfo;\n    var parts = hoverinfo.split('+');\n    var isAll = parts.indexOf('all') !== -1;\n    var hasLon = parts.indexOf('lon') !== -1;\n    var hasLat = parts.indexOf('lat') !== -1;\n    var lonlat = di.lonlat;\n    var text = [];\n\n    // TODO should we use a mock axis to format hover?\n    // If so, we'll need to make precision be zoom-level dependent\n    function format(v) {\n        return v + '\\u00B0';\n    }\n\n    if(isAll || (hasLon && hasLat)) {\n        text.push('(' + format(lonlat[0]) + ', ' + format(lonlat[1]) + ')');\n    } else if(hasLon) {\n        text.push(labels.lon + format(lonlat[0]));\n    } else if(hasLat) {\n        text.push(labels.lat + format(lonlat[1]));\n    }\n\n    if(isAll || parts.indexOf('text') !== -1) {\n        fillHoverText(di, trace, text);\n    }\n\n    return text.join('<br>');\n}\n",null]}