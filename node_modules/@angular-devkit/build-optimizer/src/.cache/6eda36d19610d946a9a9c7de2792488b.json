{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/mapbox.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/mapbox.js","mtime":1529418310693},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar mapboxgl = require('mapbox-gl');\n\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar dragElement = require('../../components/dragelement');\nvar prepSelect = require('../cartesian/select').prepSelect;\nvar constants = require('./constants');\nvar layoutAttributes = require('./layout_attributes');\nvar createMapboxLayer = require('./layers');\n\nfunction Mapbox(opts) {\n    this.id = opts.id;\n    this.gd = opts.gd;\n    this.container = opts.container;\n    this.isStatic = opts.staticPlot;\n\n    var fullLayout = opts.fullLayout;\n\n    // unique id for this Mapbox instance\n    this.uid = fullLayout._uid + '-' + this.id;\n\n    // full mapbox options (N.B. needs to be updated on every updates)\n    this.opts = fullLayout[this.id];\n\n    // create framework on instantiation for a smoother first plot call\n    this.div = null;\n    this.xaxis = null;\n    this.yaxis = null;\n    this.createFramework(fullLayout);\n\n    // state variables used to infer how and what to update\n    this.map = null;\n    this.accessToken = null;\n    this.styleObj = null;\n    this.traceHash = {};\n    this.layerList = [];\n}\n\nvar proto = Mapbox.prototype;\n\nmodule.exports = function createMapbox(opts) {\n    return new Mapbox(opts);\n};\n\nproto.plot = function(calcData, fullLayout, promises) {\n    var self = this;\n\n    // feed in new mapbox options\n    var opts = self.opts = fullLayout[this.id];\n\n    // remove map and create a new map if access token has change\n    if(self.map && (opts.accesstoken !== self.accessToken)) {\n        self.map.remove();\n        self.map = null;\n        self.styleObj = null;\n        self.traceHash = [];\n        self.layerList = {};\n    }\n\n    var promise;\n\n    if(!self.map) {\n        promise = new Promise(function(resolve, reject) {\n            self.createMap(calcData, fullLayout, resolve, reject);\n        });\n    } else {\n        promise = new Promise(function(resolve, reject) {\n            self.updateMap(calcData, fullLayout, resolve, reject);\n        });\n    }\n\n    promises.push(promise);\n};\n\nproto.createMap = function(calcData, fullLayout, resolve, reject) {\n    var self = this;\n    var gd = self.gd;\n    var opts = self.opts;\n\n    // store style id and URL or object\n    var styleObj = self.styleObj = getStyleObj(opts.style);\n\n    // store access token associated with this map\n    self.accessToken = opts.accesstoken;\n\n    // create the map!\n    var map = self.map = new mapboxgl.Map({\n        container: self.div,\n\n        style: styleObj.style,\n        center: convertCenter(opts.center),\n        zoom: opts.zoom,\n        bearing: opts.bearing,\n        pitch: opts.pitch,\n\n        interactive: !self.isStatic,\n        preserveDrawingBuffer: self.isStatic,\n\n        doubleClickZoom: false,\n        boxZoom: false\n    });\n\n    // clear navigation container\n    var className = constants.controlContainerClassName;\n    var controlContainer = self.div.getElementsByClassName(className)[0];\n    self.div.removeChild(controlContainer);\n\n    // make sure canvas does not inherit left and top css\n    map._canvas.style.left = '0px';\n    map._canvas.style.top = '0px';\n\n    self.rejectOnError(reject);\n\n    map.once('load', function() {\n        self.updateData(calcData);\n        self.updateLayout(fullLayout);\n        self.resolveOnRender(resolve);\n    });\n\n    if(self.isStatic) return;\n\n    // keep track of pan / zoom in user layout and emit relayout event\n    map.on('moveend', function(eventData) {\n        if(!self.map) return;\n\n        var view = self.getView();\n\n        opts._input.center = opts.center = view.center;\n        opts._input.zoom = opts.zoom = view.zoom;\n        opts._input.bearing = opts.bearing = view.bearing;\n        opts._input.pitch = opts.pitch = view.pitch;\n\n        // 'moveend' gets triggered by map.setCenter, map.setZoom,\n        // map.setBearing and map.setPitch.\n        //\n        // Here, we make sure that 'plotly_relayout' is\n        // triggered here only when the 'moveend' originates from a\n        // mouse target (filtering out API calls) to not\n        // duplicate 'plotly_relayout' events.\n\n        if(eventData.originalEvent) {\n            var update = {};\n            update[self.id] = Lib.extendFlat({}, view);\n            gd.emit('plotly_relayout', update);\n        }\n    });\n\n    map.on('mousemove', function(evt) {\n        var bb = self.div.getBoundingClientRect();\n\n        // some hackery to get Fx.hover to work\n        evt.clientX = evt.point.x + bb.left;\n        evt.clientY = evt.point.y + bb.top;\n\n        evt.target.getBoundingClientRect = function() { return bb; };\n\n        self.xaxis.p2c = function() { return evt.lngLat.lng; };\n        self.yaxis.p2c = function() { return evt.lngLat.lat; };\n\n        Fx.hover(gd, evt, self.id);\n    });\n\n    map.on('click', function(evt) {\n        // TODO: this does not support right-click. If we want to support it, we\n        // would likely need to change mapbox to use dragElement instead of straight\n        // mapbox event binding. Or perhaps better, make a simple wrapper with the\n        // right mousedown, mousemove, and mouseup handlers just for a left/right click\n        // pie would use this too.\n        Fx.click(gd, evt.originalEvent);\n    });\n\n    function unhover() {\n        Fx.loneUnhover(fullLayout._toppaper);\n    }\n\n    map.on('dragstart', unhover);\n    map.on('zoomstart', unhover);\n\n    map.on('dblclick', function() {\n        var viewInitial = self.viewInitial;\n\n        map.setCenter(convertCenter(viewInitial.center));\n        map.setZoom(viewInitial.zoom);\n        map.setBearing(viewInitial.bearing);\n        map.setPitch(viewInitial.pitch);\n\n        var viewNow = self.getView();\n\n        opts._input.center = opts.center = viewNow.center;\n        opts._input.zoom = opts.zoom = viewNow.zoom;\n        opts._input.bearing = opts.bearing = viewNow.bearing;\n        opts._input.pitch = opts.pitch = viewNow.pitch;\n\n        gd.emit('plotly_doubleclick', null);\n    });\n\n    // define clear select on map creation, to keep one ref per map,\n    // so that map.on / map.off in updateFx works as expected\n    self.clearSelect = function() {\n        gd._fullLayout._zoomlayer.selectAll('.select-outline').remove();\n    };\n};\n\nproto.updateMap = function(calcData, fullLayout, resolve, reject) {\n    var self = this;\n    var map = self.map;\n\n    self.rejectOnError(reject);\n\n    var styleObj = getStyleObj(self.opts.style);\n\n    if(self.styleObj.id !== styleObj.id) {\n        self.styleObj = styleObj;\n        map.setStyle(styleObj.style);\n\n        map.once('styledata', function() {\n            // need to rebuild trace layers on reload\n            // to avoid 'lost event' errors\n            self.traceHash = {};\n            self.updateData(calcData);\n            self.updateLayout(fullLayout);\n            self.resolveOnRender(resolve);\n        });\n    } else {\n        self.updateData(calcData);\n        self.updateLayout(fullLayout);\n        self.resolveOnRender(resolve);\n    }\n};\n\nproto.updateData = function(calcData) {\n    var traceHash = this.traceHash;\n    var traceObj, trace, i, j;\n\n    // update or create trace objects\n    for(i = 0; i < calcData.length; i++) {\n        var calcTrace = calcData[i];\n\n        trace = calcTrace[0].trace;\n        traceObj = traceHash[trace.uid];\n\n        if(traceObj) {\n            traceObj.update(calcTrace);\n        } else if(trace._module) {\n            traceHash[trace.uid] = trace._module.plot(this, calcTrace);\n        }\n    }\n\n    // remove empty trace objects\n    var ids = Object.keys(traceHash);\n    id_loop:\n    for(i = 0; i < ids.length; i++) {\n        var id = ids[i];\n\n        for(j = 0; j < calcData.length; j++) {\n            trace = calcData[j][0].trace;\n            if(id === trace.uid) continue id_loop;\n        }\n\n        traceObj = traceHash[id];\n        traceObj.dispose();\n        delete traceHash[id];\n    }\n};\n\nproto.updateLayout = function(fullLayout) {\n    var map = this.map,\n        opts = this.opts;\n\n    map.setCenter(convertCenter(opts.center));\n    map.setZoom(opts.zoom);\n    map.setBearing(opts.bearing);\n    map.setPitch(opts.pitch);\n\n    this.updateLayers();\n    this.updateFramework(fullLayout);\n    this.updateFx(fullLayout);\n    this.map.resize();\n};\n\nproto.resolveOnRender = function(resolve) {\n    var map = this.map;\n\n    map.on('render', function onRender() {\n        if(map.loaded()) {\n            map.off('render', onRender);\n            // resolve at end of render loop\n            setTimeout(resolve, 0);\n        }\n    });\n};\n\nproto.rejectOnError = function(reject) {\n    var map = this.map;\n\n    function handler() {\n        reject(new Error(constants.mapOnErrorMsg));\n    }\n\n    map.once('error', handler);\n    map.once('style.error', handler);\n    map.once('source.error', handler);\n    map.once('tile.error', handler);\n    map.once('layer.error', handler);\n};\n\nproto.createFramework = function(fullLayout) {\n    var self = this;\n\n    var div = self.div = document.createElement('div');\n    div.id = self.uid;\n    div.style.position = 'absolute';\n    self.container.appendChild(div);\n\n    // create mock x/y axes for hover routine\n    self.xaxis = {\n        _id: 'x',\n        c2p: function(v) { return self.project(v).x; }\n    };\n    self.yaxis = {\n        _id: 'y',\n        c2p: function(v) { return self.project(v).y; }\n    };\n\n    self.updateFramework(fullLayout);\n};\n\nproto.updateFx = function(fullLayout) {\n    var self = this;\n    var map = self.map;\n    var gd = self.gd;\n\n    if(self.isStatic) return;\n\n    function invert(pxpy) {\n        var obj = self.map.unproject(pxpy);\n        return [obj.lng, obj.lat];\n    }\n\n    var dragMode = fullLayout.dragmode;\n    var fillRangeItems;\n\n    if(dragMode === 'select') {\n        fillRangeItems = function(eventData, poly) {\n            var ranges = eventData.range = {};\n            ranges[self.id] = [\n                invert([poly.xmin, poly.ymin]),\n                invert([poly.xmax, poly.ymax])\n            ];\n        };\n    } else {\n        fillRangeItems = function(eventData, poly, pts) {\n            var dataPts = eventData.lassoPoints = {};\n            dataPts[self.id] = pts.filtered.map(invert);\n        };\n    }\n\n    if(dragMode === 'select' || dragMode === 'lasso') {\n        map.dragPan.disable();\n        map.on('zoomstart', self.clearSelect);\n\n        var dragOptions = {\n            element: self.div,\n            gd: gd,\n            plotinfo: {\n                xaxis: self.xaxis,\n                yaxis: self.yaxis,\n                fillRangeItems: fillRangeItems\n            },\n            xaxes: [self.xaxis],\n            yaxes: [self.yaxis],\n            subplot: self.id\n        };\n\n        dragOptions.prepFn = function(e, startX, startY) {\n            prepSelect(e, startX, startY, dragOptions, dragMode);\n        };\n\n        dragElement.init(dragOptions);\n    } else {\n        map.dragPan.enable();\n        map.off('zoomstart', self.clearSelect);\n        self.div.onmousedown = null;\n    }\n};\n\nproto.updateFramework = function(fullLayout) {\n    var domain = fullLayout[this.id].domain;\n    var size = fullLayout._size;\n\n    var style = this.div.style;\n    style.width = size.w * (domain.x[1] - domain.x[0]) + 'px';\n    style.height = size.h * (domain.y[1] - domain.y[0]) + 'px';\n    style.left = size.l + domain.x[0] * size.w + 'px';\n    style.top = size.t + (1 - domain.y[1]) * size.h + 'px';\n\n    this.xaxis._offset = size.l + domain.x[0] * size.w;\n    this.xaxis._length = size.w * (domain.x[1] - domain.x[0]);\n\n    this.yaxis._offset = size.t + (1 - domain.y[1]) * size.h;\n    this.yaxis._length = size.h * (domain.y[1] - domain.y[0]);\n};\n\nproto.updateLayers = function() {\n    var opts = this.opts;\n    var layers = opts.layers;\n    var layerList = this.layerList;\n    var i;\n\n    // if the layer arrays don't match,\n    // don't try to be smart,\n    // delete them all, and start all over.\n\n    if(layers.length !== layerList.length) {\n        for(i = 0; i < layerList.length; i++) {\n            layerList[i].dispose();\n        }\n\n        layerList = this.layerList = [];\n\n        for(i = 0; i < layers.length; i++) {\n            layerList.push(createMapboxLayer(this, i, layers[i]));\n        }\n    } else {\n        for(i = 0; i < layers.length; i++) {\n            layerList[i].update(layers[i]);\n        }\n    }\n};\n\nproto.destroy = function() {\n    if(this.map) {\n        this.map.remove();\n        this.map = null;\n        this.container.removeChild(this.div);\n    }\n};\n\nproto.toImage = function() {\n    this.map.stop();\n    return this.map.getCanvas().toDataURL();\n};\n\n// convenience wrapper to create set multiple layer\n// 'layout' or 'paint options at once.\nproto.setOptions = function(id, methodName, opts) {\n    for(var k in opts) {\n        this.map[methodName](id, k, opts[k]);\n    }\n};\n\n// convenience method to project a [lon, lat] array to pixel coords\nproto.project = function(v) {\n    return this.map.project(new mapboxgl.LngLat(v[0], v[1]));\n};\n\n// get map's current view values in plotly.js notation\nproto.getView = function() {\n    var map = this.map;\n\n    var mapCenter = map.getCenter();\n    var center = { lon: mapCenter.lng, lat: mapCenter.lat };\n\n    return {\n        center: center,\n        zoom: map.getZoom(),\n        bearing: map.getBearing(),\n        pitch: map.getPitch()\n    };\n};\n\nfunction getStyleObj(val) {\n    var styleValues = layoutAttributes.style.values;\n    var styleDflt = layoutAttributes.style.dflt;\n    var styleObj = {};\n\n    if(Lib.isPlainObject(val)) {\n        styleObj.id = val.id;\n        styleObj.style = val;\n    } else if(typeof val === 'string') {\n        styleObj.id = val;\n        styleObj.style = (styleValues.indexOf(val) !== -1) ?\n             convertStyleVal(val) :\n             val;\n    } else {\n        styleObj.id = styleDflt;\n        styleObj.style = convertStyleVal(styleDflt);\n    }\n\n    styleObj.transition = {duration: 0, delay: 0};\n\n    return styleObj;\n}\n\n// if style is part of the 'official' mapbox values, add URL prefix and suffix\nfunction convertStyleVal(val) {\n    return constants.styleUrlPrefix + val + '-' + constants.styleUrlSuffix;\n}\n\nfunction convertCenter(center) {\n    return [center.lon, center.lat];\n}\n",null]}