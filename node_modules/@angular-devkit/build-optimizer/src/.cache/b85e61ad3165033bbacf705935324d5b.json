{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/ndarray-homography/xform.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/ndarray-homography/xform.js","mtime":1529418310046},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\n\nvar warp = require('ndarray-warp')\nvar invert = require('gl-matrix-invert')\n\nmodule.exports = applyHomography\n\nfunction applyHomography(dest, src, Xi) {\n  var n = src.dimension\n  var X = invert([], Xi)\n  warp(dest, src, function(out_c, inp_c) {\n    for(var i=0; i<n; ++i) {\n      out_c[i] = X[(n+1)*n + i]\n      for(var j=0; j<n; ++j) {\n        out_c[i] += X[(n+1)*j+i] * inp_c[j]\n      }\n    }\n    var w = X[(n+1)*(n+1)-1]\n    for(var j=0; j<n; ++j) {\n      w += X[(n+1)*j+n] * inp_c[j]\n    }\n    var wr = 1.0 / w\n    for(var i=0; i<n; ++i) {\n      out_c[i] *= wr\n    }\n    return out_c\n  })\n  return dest\n}",null]}