{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/svg-path-sdf/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/svg-path-sdf/index.js","mtime":1529418312169},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar pathBounds = require('svg-path-bounds')\r\nvar parsePath = require('parse-svg-path')\r\nvar drawPath = require('draw-svg-path')\r\nvar isSvgPath = require('is-svg-path')\r\nvar bitmapSdf = require('bitmap-sdf')\r\n\r\nvar canvas = document.createElement('canvas')\r\nvar ctx = canvas.getContext('2d')\r\n\r\n\r\nmodule.exports = pathSdf\r\n\r\nfunction pathSdf (path, options) {\r\n\tif (!isSvgPath(path)) throw Error('Argument should be valid svg path string')\r\n\r\n\tif (!options) options = {}\r\n\r\n\tvar w, h\r\n\tif (options.shape) {\r\n\t\tw = options.shape[0]\r\n\t\th = options.shape[1]\r\n\t}\r\n\telse {\r\n\t\tw = canvas.width = options.w || options.width || 200\r\n\t\th = canvas.height = options.h || options.height || 200\r\n\t}\r\n\tvar size = Math.min(w, h)\r\n\r\n\tvar stroke = options.stroke || 0\r\n\r\n\tvar viewbox = options.viewbox || options.viewBox || pathBounds(path)\r\n\tvar scale = [w / (viewbox[2] - viewbox[0]), h / (viewbox[3] - viewbox[1])]\r\n\tvar maxScale = Math.min(scale[0] || 0, scale[1] || 0) / 2\r\n\r\n\t//clear ctx\r\n\tctx.fillStyle = 'black'\r\n\tctx.fillRect(0, 0, w, h)\r\n\r\n\tctx.fillStyle = 'white'\r\n\r\n\tif (stroke)\t{\r\n\t\tif (typeof stroke != 'number') stroke = 1\r\n\t\tif (stroke > 0) {\r\n\t\t\tctx.strokeStyle = 'white'\r\n\t\t}\r\n\t\telse {\r\n\t\t\tctx.strokeStyle = 'black'\r\n\t\t}\r\n\r\n\t\tctx.lineWidth = Math.abs(stroke)\r\n\t}\r\n\r\n\tctx.translate(w * .5, h * .5)\r\n\tctx.scale(maxScale, maxScale)\r\n\r\n\t//if canvas svg paths api is available\r\n\tif (global.Path2D) {\r\n\t\tvar path2d = new Path2D(path)\r\n\t\tctx.fill(path2d)\r\n\t\tstroke && ctx.stroke(path2d)\r\n\t}\r\n\t//fallback to bezier-curves\r\n\telse {\r\n\t\tvar segments = parsePath(path)\r\n\t\tdrawPath(ctx, segments)\r\n\t\tctx.fill()\r\n\t\tstroke && ctx.stroke()\r\n\t}\r\n\r\n\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n\tvar data = bitmapSdf(ctx, {\r\n\t\tcutoff: options.cutoff != null ? options.cutoff : .5,\r\n\t\tradius: options.radius != null ? options.radius : size * .5\r\n\t})\r\n\r\n\treturn data\r\n}\r\n",null]}