{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-select-box/selectbox.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-select-box/selectbox.js","mtime":1529418308686},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar createShader = require('gl-shader')\r\nvar createBuffer = require('gl-buffer')\r\n\r\nvar SHADERS = require('./lib/shaders')\r\n\r\nmodule.exports = createSelectBox\r\n\r\nfunction SelectBox(plot, boxBuffer, boxShader) {\r\n  this.plot = plot\r\n  this.boxBuffer = boxBuffer\r\n  this.boxShader = boxShader\r\n\r\n  this.enabled = true\r\n\r\n  this.selectBox = [Infinity,Infinity,-Infinity,-Infinity]\r\n\r\n  this.borderColor = [0,0,0,1]\r\n  this.innerFill   = false\r\n  this.innerColor  = [0,0,0,0.25]\r\n  this.outerFill   = true\r\n  this.outerColor  = [0,0,0,0.5]\r\n  this.borderWidth = 10\r\n}\r\n\r\nvar proto = SelectBox.prototype\r\n\r\nproto.draw = function() {\r\n  if(!this.enabled) {\r\n    return\r\n  }\r\n\r\n  var plot         = this.plot\r\n  var selectBox    = this.selectBox\r\n  var lineWidth    = this.borderWidth\r\n\r\n  var innerFill    = this.innerFill\r\n  var innerColor   = this.innerColor\r\n  var outerFill    = this.outerFill\r\n  var outerColor   = this.outerColor\r\n  var borderColor  = this.borderColor\r\n\r\n  var boxes        = plot.box\r\n  var screenBox    = plot.screenBox\r\n  var dataBox      = plot.dataBox\r\n  var viewBox      = plot.viewBox\r\n  var pixelRatio   = plot.pixelRatio\r\n\r\n  //Map select box into pixel coordinates\r\n  var loX = (selectBox[0]-dataBox[0])*(viewBox[2]-viewBox[0])/(dataBox[2]-dataBox[0])+viewBox[0]\r\n  var loY = (selectBox[1]-dataBox[1])*(viewBox[3]-viewBox[1])/(dataBox[3]-dataBox[1])+viewBox[1]\r\n  var hiX = (selectBox[2]-dataBox[0])*(viewBox[2]-viewBox[0])/(dataBox[2]-dataBox[0])+viewBox[0]\r\n  var hiY = (selectBox[3]-dataBox[1])*(viewBox[3]-viewBox[1])/(dataBox[3]-dataBox[1])+viewBox[1]\r\n\r\n  loX = Math.max(loX, viewBox[0])\r\n  loY = Math.max(loY, viewBox[1])\r\n  hiX = Math.min(hiX, viewBox[2])\r\n  hiY = Math.min(hiY, viewBox[3])\r\n\r\n  if(hiX < loX || hiY < loY) {\r\n    return\r\n  }\r\n\r\n  boxes.bind()\r\n\r\n  //Draw box\r\n  var screenWidth  = screenBox[2] - screenBox[0]\r\n  var screenHeight = screenBox[3] - screenBox[1]\r\n\r\n  if(this.outerFill) {\r\n    boxes.drawBox(0, 0, screenWidth, loY, outerColor)\r\n    boxes.drawBox(0, loY, loX, hiY, outerColor)\r\n    boxes.drawBox(0, hiY, screenWidth, screenHeight, outerColor)\r\n    boxes.drawBox(hiX, loY, screenWidth, hiY, outerColor)\r\n  }\r\n\r\n  if(this.innerFill) {\r\n    boxes.drawBox(loX, loY, hiX, hiY, innerColor)\r\n  }\r\n\r\n  //Draw border\r\n  if(lineWidth > 0) {\r\n\r\n    //Draw border\r\n    var w = lineWidth * pixelRatio\r\n    boxes.drawBox(loX-w, loY-w, hiX+w, loY+w, borderColor)\r\n    boxes.drawBox(loX-w, hiY-w, hiX+w, hiY+w, borderColor)\r\n    boxes.drawBox(loX-w, loY-w, loX+w, hiY+w, borderColor)\r\n    boxes.drawBox(hiX-w, loY-w, hiX+w, hiY+w, borderColor)\r\n  }\r\n}\r\n\r\nproto.update = function(options) {\r\n  options = options || {}\r\n\r\n  this.innerFill    = !!options.innerFill\r\n  this.outerFill    = !!options.outerFill\r\n  this.innerColor   = (options.innerColor   || [0,0,0,0.5]).slice()\r\n  this.outerColor   = (options.outerColor   || [0,0,0,0.5]).slice()\r\n  this.borderColor  = (options.borderColor || [0,0,0,1]).slice()\r\n  this.borderWidth  = options.borderWidth || 0\r\n  this.selectBox    = (options.selectBox || this.selectBox).slice()\r\n}\r\n\r\nproto.dispose = function() {\r\n  this.boxBuffer.dispose()\r\n  this.boxShader.dispose()\r\n  this.plot.removeOverlay(this)\r\n}\r\n\r\nfunction createSelectBox(plot, options) {\r\n  var gl = plot.gl\r\n  var buffer = createBuffer(gl, [\r\n    0, 0,\r\n    0, 1,\r\n    1, 0,\r\n    1, 1 ])\r\n  var shader = createShader(gl, SHADERS.boxVertex, SHADERS.boxFragment)\r\n  var selectBox = new SelectBox(plot, buffer, shader)\r\n  selectBox.update(options)\r\n  plot.addOverlay(selectBox)\r\n  return selectBox\r\n}\r\n",null]}