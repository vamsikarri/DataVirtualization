{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatter/style.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatter/style.js","mtime":1529418310737},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar Drawing = require('../../components/drawing');\nvar Registry = require('../../registry');\n\nfunction style(gd, cd) {\n    var s = cd ? cd[0].node3 : d3.select(gd).selectAll('g.trace.scatter');\n\n    s.style('opacity', function(d) {\n        return d[0].trace.opacity;\n    });\n\n    s.selectAll('g.points').each(function(d) {\n        var sel = d3.select(this);\n        var trace = d.trace || d[0].trace;\n        stylePoints(sel, trace, gd);\n    });\n\n    s.selectAll('g.trace path.js-line')\n        .call(Drawing.lineGroupStyle);\n\n    s.selectAll('g.trace path.js-fill')\n        .call(Drawing.fillGroupStyle);\n\n    Registry.getComponentMethod('errorbars', 'style')(s);\n}\n\nfunction stylePoints(sel, trace, gd) {\n    Drawing.pointStyle(sel.selectAll('path.point'), trace, gd);\n    Drawing.textPointStyle(sel.selectAll('text'), trace, gd);\n}\n\nfunction styleOnSelect(gd, cd) {\n    var s = cd[0].node3;\n    var trace = cd[0].trace;\n\n    if(trace.selectedpoints) {\n        Drawing.selectedPointStyle(s.selectAll('path.point'), trace);\n        Drawing.selectedTextStyle(s.selectAll('text'), trace);\n    } else {\n        stylePoints(s, trace, gd);\n    }\n}\n\nmodule.exports = {\n    style: style,\n    stylePoints: stylePoints,\n    styleOnSelect: styleOnSelect\n};\n",null]}