{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contourcarpet/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contourcarpet/calc.js","mtime":1529418310714},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar isArray1D = require('../../lib').isArray1D;\n\nvar convertColumnData = require('../heatmap/convert_column_xyz');\nvar clean2dArray = require('../heatmap/clean_2d_array');\nvar maxRowLength = require('../heatmap/max_row_length');\nvar interp2d = require('../heatmap/interp2d');\nvar findEmpties = require('../heatmap/find_empties');\nvar makeBoundArray = require('../heatmap/make_bound_array');\nvar supplyDefaults = require('./defaults');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar setContours = require('../contour/set_contours');\n\n// most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\nmodule.exports = function calc(gd, trace) {\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    if(!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n\n    if(!trace.a || !trace.b) {\n        // Look up the original incoming carpet data:\n        var carpetdata = gd.data[carpet.index];\n\n        // Look up the incoming trace data, *except* perform a shallow\n        // copy so that we're not actually modifying it when we use it\n        // to supply defaults:\n        var tracedata = gd.data[trace.index];\n        // var tracedata = extendFlat({}, gd.data[trace.index]);\n\n        // If the data is not specified\n        if(!tracedata.a) tracedata.a = carpetdata.a;\n        if(!tracedata.b) tracedata.b = carpetdata.b;\n\n        supplyDefaults(tracedata, trace, trace._defaultColor, gd._fullLayout);\n    }\n\n    var cd = heatmappishCalc(gd, trace);\n\n    setContours(trace);\n\n    return cd;\n};\n\nfunction heatmappishCalc(gd, trace) {\n    // prepare the raw data\n    // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n    var carpet = trace._carpetTrace;\n    var aax = carpet.aaxis;\n    var bax = carpet.baxis;\n    var a,\n        a0,\n        da,\n        b,\n        b0,\n        db,\n        z;\n\n    // cancel minimum tick spacings (only applies to bars and boxes)\n    aax._minDtick = 0;\n    bax._minDtick = 0;\n\n    if(isArray1D(trace.z)) convertColumnData(trace, aax, bax, 'a', 'b', ['z']);\n    a = trace._a = trace._a || trace.a;\n    b = trace._b = trace._b || trace.b;\n\n    a = a ? aax.makeCalcdata(trace, '_a') : [];\n    b = b ? bax.makeCalcdata(trace, '_b') : [];\n    a0 = trace.a0 || 0;\n    da = trace.da || 1;\n    b0 = trace.b0 || 0;\n    db = trace.db || 1;\n\n    z = trace._z = clean2dArray(trace._z || trace.z, trace.transpose);\n\n    trace._emptypoints = findEmpties(z);\n    trace._interpz = interp2d(z, trace._emptypoints, trace._interpz);\n\n    // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n    var xlen = maxRowLength(z),\n        xIn = trace.xtype === 'scaled' ? '' : a,\n        xArray = makeBoundArray(trace, xIn, a0, da, xlen, aax),\n        yIn = trace.ytype === 'scaled' ? '' : b,\n        yArray = makeBoundArray(trace, yIn, b0, db, z.length, bax);\n\n    var cd0 = {\n        a: xArray,\n        b: yArray,\n        z: z,\n    };\n\n    if(trace.contours.type === 'levels' && trace.contours.coloring !== 'none') {\n        // auto-z and autocolorscale if applicable\n        colorscaleCalc(trace, z, '', 'z');\n    }\n\n    return [cd0];\n}\n",null]}