{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/ndarray-warp/warp.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/ndarray-warp/warp.js","mtime":1529418310051},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\n\nvar interp  = require('ndarray-linear-interpolate')\nvar cwise   = require('cwise')\n\nvar do_warp = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function(idx, dest, func, interp, n) {\n    this.warped = new Array(n)\n  },\n  body: function warpND(idx, dest, func, interp, n) {\n    func(this.warped, idx)\n    dest = interp.apply(undefined, this.warped)\n  }\n})\n\nvar do_warp_1 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function() {\n    this.warped = [0]\n  },\n  body: function warp1D(idx, dest, func, interp, src) {\n    func(this.warped, idx)\n    dest = interp(src, this.warped[0])\n  }\n})\n\nvar do_warp_2 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function() {\n    this.warped = [0, 0]\n  },\n  body: function warp2D(idx, dest, func, interp, src) {\n    func(this.warped, idx)\n    dest = interp(src, this.warped[0], this.warped[1])\n  }\n})\n\nvar do_warp_3 = cwise({\n  args: ['index', 'array', 'scalar', 'scalar', 'scalar'],\n  pre: function() {\n    this.warped = [0, 0, 0]\n  },\n  body: function warp3D(idx, dest, func, interp, src) {\n    func(this.warped, idx)\n    dest = interp(src, this.warped[0], this.warped[1], this.warped[2])\n  }\n})\n\nmodule.exports = function warp(dest, src, func) {\n  switch(src.shape.length) {\n    case 1:\n      do_warp_1(dest, func, interp.d1, src)\n      break\n    case 2:\n      do_warp_2(dest, func, interp.d2, src)\n      break\n    case 3:\n      do_warp_3(dest, func, interp.d3, src)\n      break\n    default:\n      do_warp(dest, func, interp.bind(undefined, src), src.shape.length)\n      break\n  }\n  return dest\n}\n",null]}