{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/sankey/calc.js","mtime":1529418310732},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar tarjan = require('strongly-connected-components');\nvar Lib = require('../../lib');\nvar wrap = require('../../lib/gup').wrap;\n\nfunction circularityPresent(nodeList, sources, targets) {\n\n    var nodeLen = nodeList.length;\n    var nodes = Lib.init2dArray(nodeLen, 0);\n\n    for(var i = 0; i < Math.min(sources.length, targets.length); i++) {\n        if(Lib.isIndex(sources[i], nodeLen) && Lib.isIndex(targets[i], nodeLen)) {\n            if(sources[i] === targets[i]) {\n                return true; // self-link which is also a scc of one\n            }\n            nodes[sources[i]].push(targets[i]);\n        }\n    }\n\n    var scc = tarjan(nodes);\n\n    // TarjÃ¡n's strongly connected components algorithm coded by Mikola Lysenko\n    // returns at least one non-singular component if there's circularity in the graph\n    return scc.components.some(function(c) {\n        return c.length > 1;\n    });\n}\n\nmodule.exports = function calc(gd, trace) {\n\n    if(circularityPresent(trace.node.label, trace.link.source, trace.link.target)) {\n        Lib.error('Circularity is present in the Sankey data. Removing all nodes and links.');\n        trace.link.label = [];\n        trace.link.source = [];\n        trace.link.target = [];\n        trace.link.value = [];\n        trace.link.color = [];\n        trace.node.label = [];\n        trace.node.color = [];\n    }\n\n    return wrap({\n        link: trace.link,\n        node: trace.node\n    });\n};\n",null]}