{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/svg-path-bounds/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/svg-path-bounds/index.js","mtime":1529418312167},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nvar parse = require('parse-svg-path')\r\nvar abs = require('abs-svg-path')\r\nvar normalize = require('normalize-svg-path')\r\nvar isSvgPath = require('is-svg-path')\r\nvar assert = require('assert')\r\n\r\nmodule.exports = pathBounds\r\n\r\n\r\nfunction pathBounds(path) {\r\n  // ES6 string tpl call\r\n  if (Array.isArray(path) && path.length === 1 && typeof path[0] === 'string') path = path[0]\r\n\r\n  // svg path string\r\n  if (typeof path === 'string') {\r\n    assert(isSvgPath(path), 'String is not an SVG path.')\r\n    path = parse(path)\r\n  }\r\n\r\n  assert(Array.isArray(path), 'Argument should be a string or an array of path segments.')\r\n\r\n  path = abs(path)\r\n  path = normalize(path)\r\n\r\n  if (!path.length) return [0, 0, 0, 0]\r\n\r\n  var bounds = [Infinity, Infinity, -Infinity, -Infinity]\r\n\r\n  for (var i = 0, l = path.length; i < l; i++) {\r\n    var points = path[i].slice(1)\r\n\r\n    for (var j = 0; j < points.length; j += 2) {\r\n      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0]\r\n      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1]\r\n      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0]\r\n      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1]\r\n    }\r\n  }\r\n\r\n  return bounds\r\n}\r\n",null]}