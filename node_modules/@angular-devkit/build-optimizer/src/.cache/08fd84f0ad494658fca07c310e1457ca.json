{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/histogram/clean_bins.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/histogram/clean_bins.js","mtime":1529418310721},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\nvar isNumeric = require('fast-isnumeric');\nvar cleanDate = require('../../lib').cleanDate;\nvar constants = require('../../constants/numerical');\nvar ONEDAY = constants.ONEDAY;\nvar BADNUM = constants.BADNUM;\n\n/*\n * cleanBins: validate attributes autobin[xy] and [xy]bins.(start, end, size)\n * Mutates trace so all these attributes are valid.\n *\n * Normally this kind of thing would happen during supplyDefaults, but\n * in this case we need to know the axis type, and axis type isn't set until\n * after trace supplyDefaults are completed. So this gets called during the\n * calc step, when data are inserted into bins.\n */\nmodule.exports = function cleanBins(trace, ax, binDirection) {\n    var axType = ax.type,\n        binAttr = binDirection + 'bins',\n        bins = trace[binAttr];\n\n    if(!bins) bins = trace[binAttr] = {};\n\n    var cleanBound = (axType === 'date') ?\n        function(v) { return (v || v === 0) ? cleanDate(v, BADNUM, bins.calendar) : null; } :\n        function(v) { return isNumeric(v) ? Number(v) : null; };\n\n    bins.start = cleanBound(bins.start);\n    bins.end = cleanBound(bins.end);\n\n    // logic for bin size is very similar to dtick (cartesian/tick_value_defaults)\n    // but without the extra string options for log axes\n    // ie the only strings we accept are M<n> for months\n    var sizeDflt = (axType === 'date') ? ONEDAY : 1,\n        binSize = bins.size;\n\n    if(isNumeric(binSize)) {\n        bins.size = (binSize > 0) ? Number(binSize) : sizeDflt;\n    }\n    else if(typeof binSize !== 'string') {\n        bins.size = sizeDflt;\n    }\n    else {\n        // date special case: \"M<n>\" gives bins every (integer) n months\n        var prefix = binSize.charAt(0),\n            sizeNum = binSize.substr(1);\n\n        sizeNum = isNumeric(sizeNum) ? Number(sizeNum) : 0;\n        if((sizeNum <= 0) || !(\n                axType === 'date' && prefix === 'M' && sizeNum === Math.round(sizeNum)\n            )) {\n            bins.size = sizeDflt;\n        }\n    }\n\n    var autoBinAttr = 'autobin' + binDirection;\n\n    if(typeof trace[autoBinAttr] !== 'boolean') {\n        trace[autoBinAttr] = trace._fullInput[autoBinAttr] = trace._input[autoBinAttr] = !(\n            (bins.start || bins.start === 0) &&\n            (bins.end || bins.end === 0)\n        );\n    }\n\n    if(!trace[autoBinAttr]) {\n        delete trace['nbins' + binDirection];\n        delete trace._fullInput['nbins' + binDirection];\n    }\n};\n",null]}