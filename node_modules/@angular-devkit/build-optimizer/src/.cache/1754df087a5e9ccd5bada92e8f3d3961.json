{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/ternary.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/ternary.js","mtime":1529418310697},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar tinycolor = require('tinycolor2');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar _ = Lib._;\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar setConvert = require('../cartesian/set_convert');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar Plots = require('../plots');\nvar Axes = require('../cartesian/axes');\nvar dragElement = require('../../components/dragelement');\nvar Fx = require('../../components/fx');\nvar Titles = require('../../components/titles');\nvar prepSelect = require('../cartesian/select').prepSelect;\nvar clearSelect = require('../cartesian/select').clearSelect;\nvar constants = require('../cartesian/constants');\n\nfunction Ternary(options, fullLayout) {\n    this.id = options.id;\n    this.graphDiv = options.graphDiv;\n    this.init(fullLayout);\n    this.makeFramework(fullLayout);\n}\n\nmodule.exports = Ternary;\n\nvar proto = Ternary.prototype;\n\nproto.init = function(fullLayout) {\n    this.container = fullLayout._ternarylayer;\n    this.defs = fullLayout._defs;\n    this.layoutId = fullLayout._uid;\n    this.traceHash = {};\n    this.layers = {};\n};\n\nproto.plot = function(ternaryCalcData, fullLayout) {\n    var _this = this;\n    var ternaryLayout = fullLayout[_this.id];\n    var graphSize = fullLayout._size;\n\n    _this._hasClipOnAxisFalse = false;\n    for(var i = 0; i < ternaryCalcData.length; i++) {\n        var trace = ternaryCalcData[i][0].trace;\n\n        if(trace.cliponaxis === false) {\n            _this._hasClipOnAxisFalse = true;\n            break;\n        }\n    }\n\n    _this.updateLayers(ternaryLayout);\n    _this.adjustLayout(ternaryLayout, graphSize);\n    Plots.generalUpdatePerTraceModule(_this.graphDiv, _this, ternaryCalcData, ternaryLayout);\n    _this.layers.plotbg.select('path').call(Color.fill, ternaryLayout.bgcolor);\n};\n\nproto.makeFramework = function(fullLayout) {\n    var _this = this;\n    var ternaryLayout = fullLayout[_this.id];\n\n    var clipId = _this.clipId = 'clip' + _this.layoutId + _this.id;\n    var clipIdRelative = _this.clipIdRelative = 'clip-relative' + _this.layoutId + _this.id;\n\n    // clippath for this ternary subplot\n    _this.clipDef = Lib.ensureSingleById(fullLayout._clips, 'clipPath', clipId, function(s) {\n        s.append('path').attr('d', 'M0,0Z');\n    });\n\n    // 'relative' clippath (i.e. no translation) for this ternary subplot\n    _this.clipDefRelative = Lib.ensureSingleById(fullLayout._clips, 'clipPath', clipIdRelative, function(s) {\n        s.append('path').attr('d', 'M0,0Z');\n    });\n\n    // container for everything in this ternary subplot\n    _this.plotContainer = Lib.ensureSingle(_this.container, 'g', _this.id);\n    _this.updateLayers(ternaryLayout);\n\n    Drawing.setClipUrl(_this.layers.backplot, clipId);\n    Drawing.setClipUrl(_this.layers.grids, clipId);\n};\n\nproto.updateLayers = function(ternaryLayout) {\n    var _this = this;\n    var layers = _this.layers;\n\n    // inside that container, we have one container for the data, and\n    // one each for the three axes around it.\n\n    var plotLayers = ['draglayer', 'plotbg', 'backplot', 'grids'];\n\n    if(ternaryLayout.aaxis.layer === 'below traces') {\n        plotLayers.push('aaxis', 'aline');\n    }\n    if(ternaryLayout.baxis.layer === 'below traces') {\n        plotLayers.push('baxis', 'bline');\n    }\n    if(ternaryLayout.caxis.layer === 'below traces') {\n        plotLayers.push('caxis', 'cline');\n    }\n\n    plotLayers.push('frontplot');\n\n    if(ternaryLayout.aaxis.layer === 'above traces') {\n        plotLayers.push('aaxis', 'aline');\n    }\n    if(ternaryLayout.baxis.layer === 'above traces') {\n        plotLayers.push('baxis', 'bline');\n    }\n    if(ternaryLayout.caxis.layer === 'above traces') {\n        plotLayers.push('caxis', 'cline');\n    }\n\n    var toplevel = _this.plotContainer.selectAll('g.toplevel')\n        .data(plotLayers, String);\n\n    var grids = ['agrid', 'bgrid', 'cgrid'];\n\n    toplevel.enter().append('g')\n        .attr('class', function(d) { return 'toplevel ' + d; })\n        .each(function(d) {\n            var s = d3.select(this);\n            layers[d] = s;\n\n            // containers for different trace types.\n            // NOTE - this is different from cartesian, where all traces\n            // are in front of grids. Here I'm putting maps behind the grids\n            // so the grids will always be visible if they're requested.\n            // Perhaps we want that for cartesian too?\n            if(d === 'frontplot') {\n                s.append('g').classed('scatterlayer', true);\n            } else if(d === 'backplot') {\n                s.append('g').classed('maplayer', true);\n            } else if(d === 'plotbg') {\n                s.append('path').attr('d', 'M0,0Z');\n            } else if(d === 'aline' || d === 'bline' || d === 'cline') {\n                s.append('path');\n            } else if(d === 'grids') {\n                grids.forEach(function(d) {\n                    layers[d] = s.append('g').classed('grid ' + d, true);\n\n                    var fictID = (d === 'bgrid') ? 'x' : 'y';\n                    layers[d].append('g').classed(fictID, true);\n                });\n            }\n        });\n\n    toplevel.order();\n};\n\nvar w_over_h = Math.sqrt(4 / 3);\n\nproto.adjustLayout = function(ternaryLayout, graphSize) {\n    var _this = this,\n        domain = ternaryLayout.domain,\n        xDomainCenter = (domain.x[0] + domain.x[1]) / 2,\n        yDomainCenter = (domain.y[0] + domain.y[1]) / 2,\n        xDomain = domain.x[1] - domain.x[0],\n        yDomain = domain.y[1] - domain.y[0],\n        wmax = xDomain * graphSize.w,\n        hmax = yDomain * graphSize.h,\n        sum = ternaryLayout.sum,\n        amin = ternaryLayout.aaxis.min,\n        bmin = ternaryLayout.baxis.min,\n        cmin = ternaryLayout.caxis.min;\n\n    var x0, y0, w, h, xDomainFinal, yDomainFinal;\n\n    if(wmax > w_over_h * hmax) {\n        h = hmax;\n        w = h * w_over_h;\n    }\n    else {\n        w = wmax;\n        h = w / w_over_h;\n    }\n\n    xDomainFinal = xDomain * w / wmax;\n    yDomainFinal = yDomain * h / hmax;\n\n    x0 = graphSize.l + graphSize.w * xDomainCenter - w / 2;\n    y0 = graphSize.t + graphSize.h * (1 - yDomainCenter) - h / 2;\n\n    _this.x0 = x0;\n    _this.y0 = y0;\n    _this.w = w;\n    _this.h = h;\n    _this.sum = sum;\n\n    // set up the x and y axis objects we'll use to lay out the points\n    _this.xaxis = {\n        type: 'linear',\n        range: [amin + 2 * cmin - sum, sum - amin - 2 * bmin],\n        domain: [\n            xDomainCenter - xDomainFinal / 2,\n            xDomainCenter + xDomainFinal / 2\n        ],\n        _id: 'x'\n    };\n    setConvert(_this.xaxis, _this.graphDiv._fullLayout);\n    _this.xaxis.setScale();\n    _this.xaxis.isPtWithinRange = function(d) {\n        return (\n            d.a >= _this.aaxis.range[0] &&\n            d.a <= _this.aaxis.range[1] &&\n            d.b >= _this.baxis.range[1] &&\n            d.b <= _this.baxis.range[0] &&\n            d.c >= _this.caxis.range[1] &&\n            d.c <= _this.caxis.range[0]\n        );\n    };\n\n    _this.yaxis = {\n        type: 'linear',\n        range: [amin, sum - bmin - cmin],\n        domain: [\n            yDomainCenter - yDomainFinal / 2,\n            yDomainCenter + yDomainFinal / 2\n        ],\n        _id: 'y'\n    };\n    setConvert(_this.yaxis, _this.graphDiv._fullLayout);\n    _this.yaxis.setScale();\n    _this.yaxis.isPtWithinRange = function() { return true; };\n\n    // set up the modified axes for tick drawing\n    var yDomain0 = _this.yaxis.domain[0];\n\n    // aaxis goes up the left side. Set it up as a y axis, but with\n    // fictitious angles and domain, but then rotate and translate\n    // it into place at the end\n    var aaxis = _this.aaxis = extendFlat({}, ternaryLayout.aaxis, {\n        visible: true,\n        range: [amin, sum - bmin - cmin],\n        side: 'left',\n        _counterangle: 30,\n        // tickangle = 'auto' means 0 anyway for a y axis, need to coerce to 0 here\n        // so we can shift by 30.\n        tickangle: (+ternaryLayout.aaxis.tickangle || 0) - 30,\n        domain: [yDomain0, yDomain0 + yDomainFinal * w_over_h],\n        _axislayer: _this.layers.aaxis,\n        _gridlayer: _this.layers.agrid,\n        _pos: 0, // _this.xaxis.domain[0] * graphSize.w,\n        _id: 'y',\n        _length: w,\n        _gridpath: 'M0,0l' + h + ',-' + (w / 2),\n        automargin: false // don't use automargins routine for labels\n    });\n    setConvert(aaxis, _this.graphDiv._fullLayout);\n    aaxis.setScale();\n\n    // baxis goes across the bottom (backward). We can set it up as an x axis\n    // without any enclosing transformation.\n    var baxis = _this.baxis = extendFlat({}, ternaryLayout.baxis, {\n        visible: true,\n        range: [sum - amin - cmin, bmin],\n        side: 'bottom',\n        _counterangle: 30,\n        domain: _this.xaxis.domain,\n        _axislayer: _this.layers.baxis,\n        _gridlayer: _this.layers.bgrid,\n        _counteraxis: _this.aaxis,\n        _pos: 0, // (1 - yDomain0) * graphSize.h,\n        _id: 'x',\n        _length: w,\n        _gridpath: 'M0,0l-' + (w / 2) + ',-' + h,\n        automargin: false // don't use automargins routine for labels\n    });\n    setConvert(baxis, _this.graphDiv._fullLayout);\n    baxis.setScale();\n    aaxis._counteraxis = baxis;\n\n    // caxis goes down the right side. Set it up as a y axis, with\n    // post-transformation similar to aaxis\n    var caxis = _this.caxis = extendFlat({}, ternaryLayout.caxis, {\n        visible: true,\n        range: [sum - amin - bmin, cmin],\n        side: 'right',\n        _counterangle: 30,\n        tickangle: (+ternaryLayout.caxis.tickangle || 0) + 30,\n        domain: [yDomain0, yDomain0 + yDomainFinal * w_over_h],\n        _axislayer: _this.layers.caxis,\n        _gridlayer: _this.layers.cgrid,\n        _counteraxis: _this.baxis,\n        _pos: 0, // _this.xaxis.domain[1] * graphSize.w,\n        _id: 'y',\n        _length: w,\n        _gridpath: 'M0,0l-' + h + ',' + (w / 2),\n        automargin: false // don't use automargins routine for labels\n    });\n    setConvert(caxis, _this.graphDiv._fullLayout);\n    caxis.setScale();\n\n    var triangleClip = 'M' + x0 + ',' + (y0 + h) + 'h' + w + 'l-' + (w / 2) + ',-' + h + 'Z';\n    _this.clipDef.select('path').attr('d', triangleClip);\n    _this.layers.plotbg.select('path').attr('d', triangleClip);\n\n    var triangleClipRelative = 'M0,' + h + 'h' + w + 'l-' + (w / 2) + ',-' + h + 'Z';\n    _this.clipDefRelative.select('path').attr('d', triangleClipRelative);\n\n    var plotTransform = 'translate(' + x0 + ',' + y0 + ')';\n    _this.plotContainer.selectAll('.scatterlayer,.maplayer')\n        .attr('transform', plotTransform);\n\n    _this.clipDefRelative.select('path').attr('transform', null);\n\n    // TODO: shift axes to accommodate linewidth*sin(30) tick mark angle\n\n    // TODO: there's probably an easier way to handle these translations/offsets now...\n    var bTransform = 'translate(' + (x0 - baxis._offset) + ',' + (y0 + h) + ')';\n\n    _this.layers.baxis.attr('transform', bTransform);\n    _this.layers.bgrid.attr('transform', bTransform);\n\n    var aTransform = 'translate(' + (x0 + w / 2) + ',' + y0 +\n        ')rotate(30)translate(0,' + -aaxis._offset + ')';\n    _this.layers.aaxis.attr('transform', aTransform);\n    _this.layers.agrid.attr('transform', aTransform);\n\n    var cTransform = 'translate(' + (x0 + w / 2) + ',' + y0 +\n        ')rotate(-30)translate(0,' + -caxis._offset + ')';\n    _this.layers.caxis.attr('transform', cTransform);\n    _this.layers.cgrid.attr('transform', cTransform);\n\n    _this.drawAxes(true);\n\n    // remove crispEdges - all the off-square angles in ternary plots\n    // make these counterproductive.\n    _this.plotContainer.selectAll('.crisp').classed('crisp', false);\n\n    _this.layers.aline.select('path')\n        .attr('d', aaxis.showline ?\n            'M' + x0 + ',' + (y0 + h) + 'l' + (w / 2) + ',-' + h : 'M0,0')\n        .call(Color.stroke, aaxis.linecolor || '#000')\n        .style('stroke-width', (aaxis.linewidth || 0) + 'px');\n    _this.layers.bline.select('path')\n        .attr('d', baxis.showline ?\n            'M' + x0 + ',' + (y0 + h) + 'h' + w : 'M0,0')\n        .call(Color.stroke, baxis.linecolor || '#000')\n        .style('stroke-width', (baxis.linewidth || 0) + 'px');\n    _this.layers.cline.select('path')\n        .attr('d', caxis.showline ?\n            'M' + (x0 + w / 2) + ',' + y0 + 'l' + (w / 2) + ',' + h : 'M0,0')\n        .call(Color.stroke, caxis.linecolor || '#000')\n        .style('stroke-width', (caxis.linewidth || 0) + 'px');\n\n    if(!_this.graphDiv._context.staticPlot) {\n        _this.initInteractions();\n    }\n\n    Drawing.setClipUrl(\n        _this.layers.frontplot,\n        _this._hasClipOnAxisFalse ? null : _this.clipId\n    );\n};\n\nproto.drawAxes = function(doTitles) {\n    var _this = this,\n        gd = _this.graphDiv,\n        titlesuffix = _this.id.substr(7) + 'title',\n        aaxis = _this.aaxis,\n        baxis = _this.baxis,\n        caxis = _this.caxis;\n    // 3rd arg true below skips titles, so we can configure them\n    // correctly later on.\n    Axes.doTicksSingle(gd, aaxis, true);\n    Axes.doTicksSingle(gd, baxis, true);\n    Axes.doTicksSingle(gd, caxis, true);\n\n    if(doTitles) {\n        var apad = Math.max(aaxis.showticklabels ? aaxis.tickfont.size / 2 : 0,\n            (caxis.showticklabels ? caxis.tickfont.size * 0.75 : 0) +\n            (caxis.ticks === 'outside' ? caxis.ticklen * 0.87 : 0));\n        _this.layers['a-title'] = Titles.draw(gd, 'a' + titlesuffix, {\n            propContainer: aaxis,\n            propName: _this.id + '.aaxis.title',\n            placeholder: _(gd, 'Click to enter Component A title'),\n            attributes: {\n                x: _this.x0 + _this.w / 2,\n                y: _this.y0 - aaxis.titlefont.size / 3 - apad,\n                'text-anchor': 'middle'\n            }\n        });\n\n\n        var bpad = (baxis.showticklabels ? baxis.tickfont.size : 0) +\n            (baxis.ticks === 'outside' ? baxis.ticklen : 0) + 3;\n\n        _this.layers['b-title'] = Titles.draw(gd, 'b' + titlesuffix, {\n            propContainer: baxis,\n            propName: _this.id + '.baxis.title',\n            placeholder: _(gd, 'Click to enter Component B title'),\n            attributes: {\n                x: _this.x0 - bpad,\n                y: _this.y0 + _this.h + baxis.titlefont.size * 0.83 + bpad,\n                'text-anchor': 'middle'\n            }\n        });\n\n        _this.layers['c-title'] = Titles.draw(gd, 'c' + titlesuffix, {\n            propContainer: caxis,\n            propName: _this.id + '.caxis.title',\n            placeholder: _(gd, 'Click to enter Component C title'),\n            attributes: {\n                x: _this.x0 + _this.w + bpad,\n                y: _this.y0 + _this.h + caxis.titlefont.size * 0.83 + bpad,\n                'text-anchor': 'middle'\n            }\n        });\n    }\n};\n\n// hard coded paths for zoom corners\n// uses the same sizing as cartesian, length is MINZOOM/2, width is 3px\nvar CLEN = constants.MINZOOM / 2 + 0.87;\nvar BLPATH = 'm-0.87,.5h' + CLEN + 'v3h-' + (CLEN + 5.2) +\n    'l' + (CLEN / 2 + 2.6) + ',-' + (CLEN * 0.87 + 4.5) +\n    'l2.6,1.5l-' + (CLEN / 2) + ',' + (CLEN * 0.87) + 'Z';\nvar BRPATH = 'm0.87,.5h-' + CLEN + 'v3h' + (CLEN + 5.2) +\n    'l-' + (CLEN / 2 + 2.6) + ',-' + (CLEN * 0.87 + 4.5) +\n    'l-2.6,1.5l' + (CLEN / 2) + ',' + (CLEN * 0.87) + 'Z';\nvar TOPPATH = 'm0,1l' + (CLEN / 2) + ',' + (CLEN * 0.87) +\n    'l2.6,-1.5l-' + (CLEN / 2 + 2.6) + ',-' + (CLEN * 0.87 + 4.5) +\n    'l-' + (CLEN / 2 + 2.6) + ',' + (CLEN * 0.87 + 4.5) +\n    'l2.6,1.5l' + (CLEN / 2) + ',-' + (CLEN * 0.87) + 'Z';\nvar STARTMARKER = 'm0.5,0.5h5v-2h-5v-5h-2v5h-5v2h5v5h2Z';\n\n// I guess this could be shared with cartesian... but for now it's separate.\nvar SHOWZOOMOUTTIP = true;\n\nproto.initInteractions = function() {\n    var _this = this,\n        dragger = _this.layers.plotbg.select('path').node(),\n        gd = _this.graphDiv,\n        zoomContainer = gd._fullLayout._zoomlayer;\n\n    // use plotbg for the main interactions\n    var dragOptions = {\n        element: dragger,\n        gd: gd,\n        plotinfo: {\n            xaxis: _this.xaxis,\n            yaxis: _this.yaxis\n        },\n        subplot: _this.id,\n        prepFn: function(e, startX, startY) {\n            // these aren't available yet when initInteractions\n            // is called\n            dragOptions.xaxes = [_this.xaxis];\n            dragOptions.yaxes = [_this.yaxis];\n            var dragModeNow = gd._fullLayout.dragmode;\n            if(e.shiftKey) {\n                if(dragModeNow === 'pan') dragModeNow = 'zoom';\n                else dragModeNow = 'pan';\n            }\n\n            if(dragModeNow === 'lasso') dragOptions.minDrag = 1;\n            else dragOptions.minDrag = undefined;\n\n            if(dragModeNow === 'zoom') {\n                dragOptions.moveFn = zoomMove;\n                dragOptions.doneFn = zoomDone;\n                zoomPrep(e, startX, startY);\n            }\n            else if(dragModeNow === 'pan') {\n                dragOptions.moveFn = plotDrag;\n                dragOptions.doneFn = dragDone;\n                panPrep();\n                clearSelect(zoomContainer);\n            }\n            else if(dragModeNow === 'select' || dragModeNow === 'lasso') {\n                prepSelect(e, startX, startY, dragOptions, dragModeNow);\n            }\n        },\n        clickFn: function(numClicks, evt) {\n            removeZoombox(gd);\n\n            if(numClicks === 2) {\n                var attrs = {};\n                attrs[_this.id + '.aaxis.min'] = 0;\n                attrs[_this.id + '.baxis.min'] = 0;\n                attrs[_this.id + '.caxis.min'] = 0;\n                gd.emit('plotly_doubleclick', null);\n                Registry.call('relayout', gd, attrs);\n            }\n            Fx.click(gd, evt, _this.id);\n        }\n    };\n\n    var x0, y0, mins0, span0, mins, lum, path0, dimmed, zb, corners;\n\n    function zoomPrep(e, startX, startY) {\n        var dragBBox = dragger.getBoundingClientRect();\n        x0 = startX - dragBBox.left;\n        y0 = startY - dragBBox.top;\n        mins0 = {\n            a: _this.aaxis.range[0],\n            b: _this.baxis.range[1],\n            c: _this.caxis.range[1]\n        };\n        mins = mins0;\n        span0 = _this.aaxis.range[1] - mins0.a;\n        lum = tinycolor(_this.graphDiv._fullLayout[_this.id].bgcolor).getLuminance();\n        path0 = 'M0,' + _this.h + 'L' + (_this.w / 2) + ', 0L' + _this.w + ',' + _this.h + 'Z';\n        dimmed = false;\n\n        zb = zoomContainer.append('path')\n            .attr('class', 'zoombox')\n            .attr('transform', 'translate(' + _this.x0 + ', ' + _this.y0 + ')')\n            .style({\n                'fill': lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n                'stroke-width': 0\n            })\n            .attr('d', path0);\n\n        corners = zoomContainer.append('path')\n            .attr('class', 'zoombox-corners')\n            .attr('transform', 'translate(' + _this.x0 + ', ' + _this.y0 + ')')\n            .style({\n                fill: Color.background,\n                stroke: Color.defaultLine,\n                'stroke-width': 1,\n                opacity: 0\n            })\n            .attr('d', 'M0,0Z');\n\n        clearSelect(zoomContainer);\n    }\n\n    function getAFrac(x, y) { return 1 - (y / _this.h); }\n    function getBFrac(x, y) { return 1 - ((x + (_this.h - y) / Math.sqrt(3)) / _this.w); }\n    function getCFrac(x, y) { return ((x - (_this.h - y) / Math.sqrt(3)) / _this.w); }\n\n    function zoomMove(dx0, dy0) {\n        var x1 = x0 + dx0,\n            y1 = y0 + dy0,\n            afrac = Math.max(0, Math.min(1, getAFrac(x0, y0), getAFrac(x1, y1))),\n            bfrac = Math.max(0, Math.min(1, getBFrac(x0, y0), getBFrac(x1, y1))),\n            cfrac = Math.max(0, Math.min(1, getCFrac(x0, y0), getCFrac(x1, y1))),\n            xLeft = ((afrac / 2) + cfrac) * _this.w,\n            xRight = (1 - (afrac / 2) - bfrac) * _this.w,\n            xCenter = (xLeft + xRight) / 2,\n            xSpan = xRight - xLeft,\n            yBottom = (1 - afrac) * _this.h,\n            yTop = yBottom - xSpan / w_over_h;\n\n        if(xSpan < constants.MINZOOM) {\n            mins = mins0;\n            zb.attr('d', path0);\n            corners.attr('d', 'M0,0Z');\n        }\n        else {\n            mins = {\n                a: mins0.a + afrac * span0,\n                b: mins0.b + bfrac * span0,\n                c: mins0.c + cfrac * span0\n            };\n            zb.attr('d', path0 + 'M' + xLeft + ',' + yBottom +\n                'H' + xRight + 'L' + xCenter + ',' + yTop +\n                'L' + xLeft + ',' + yBottom + 'Z');\n            corners.attr('d', 'M' + x0 + ',' + y0 + STARTMARKER +\n                'M' + xLeft + ',' + yBottom + BLPATH +\n                'M' + xRight + ',' + yBottom + BRPATH +\n                'M' + xCenter + ',' + yTop + TOPPATH);\n        }\n\n        if(!dimmed) {\n            zb.transition()\n                .style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' :\n                    'rgba(255,255,255,0.3)')\n                .duration(200);\n            corners.transition()\n                .style('opacity', 1)\n                .duration(200);\n            dimmed = true;\n        }\n    }\n\n    function zoomDone() {\n        removeZoombox(gd);\n\n        if(mins === mins0) return;\n\n        var attrs = {};\n        attrs[_this.id + '.aaxis.min'] = mins.a;\n        attrs[_this.id + '.baxis.min'] = mins.b;\n        attrs[_this.id + '.caxis.min'] = mins.c;\n\n        Registry.call('relayout', gd, attrs);\n\n        if(SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n            Lib.notifier(_(gd, 'Double-click to zoom back out'), 'long');\n            SHOWZOOMOUTTIP = false;\n        }\n    }\n\n    function panPrep() {\n        mins0 = {\n            a: _this.aaxis.range[0],\n            b: _this.baxis.range[1],\n            c: _this.caxis.range[1]\n        };\n        mins = mins0;\n    }\n\n    function plotDrag(dx, dy) {\n        var dxScaled = dx / _this.xaxis._m,\n            dyScaled = dy / _this.yaxis._m;\n        mins = {\n            a: mins0.a - dyScaled,\n            b: mins0.b + (dxScaled + dyScaled) / 2,\n            c: mins0.c - (dxScaled - dyScaled) / 2\n        };\n        var minsorted = [mins.a, mins.b, mins.c].sort(),\n            minindices = {\n                a: minsorted.indexOf(mins.a),\n                b: minsorted.indexOf(mins.b),\n                c: minsorted.indexOf(mins.c)\n            };\n        if(minsorted[0] < 0) {\n            if(minsorted[1] + minsorted[0] / 2 < 0) {\n                minsorted[2] += minsorted[0] + minsorted[1];\n                minsorted[0] = minsorted[1] = 0;\n            }\n            else {\n                minsorted[2] += minsorted[0] / 2;\n                minsorted[1] += minsorted[0] / 2;\n                minsorted[0] = 0;\n            }\n            mins = {\n                a: minsorted[minindices.a],\n                b: minsorted[minindices.b],\n                c: minsorted[minindices.c]\n            };\n            dy = (mins0.a - mins.a) * _this.yaxis._m;\n            dx = (mins0.c - mins.c - mins0.b + mins.b) * _this.xaxis._m;\n        }\n\n        // move the data (translate, don't redraw)\n        var plotTransform = 'translate(' + (_this.x0 + dx) + ',' + (_this.y0 + dy) + ')';\n        _this.plotContainer.selectAll('.scatterlayer,.maplayer')\n            .attr('transform', plotTransform);\n\n        var plotTransform2 = 'translate(' + -dx + ',' + -dy + ')';\n        _this.clipDefRelative.select('path').attr('transform', plotTransform2);\n\n        // move the ticks\n        _this.aaxis.range = [mins.a, _this.sum - mins.b - mins.c];\n        _this.baxis.range = [_this.sum - mins.a - mins.c, mins.b];\n        _this.caxis.range = [_this.sum - mins.a - mins.b, mins.c];\n\n        _this.drawAxes(false);\n        _this.plotContainer.selectAll('.crisp').classed('crisp', false);\n\n        if(_this._hasClipOnAxisFalse) {\n            _this.plotContainer\n                .select('.scatterlayer').selectAll('.trace')\n                .call(Drawing.hideOutsideRangePoints, _this);\n        }\n    }\n\n    function dragDone() {\n        var attrs = {};\n        attrs[_this.id + '.aaxis.min'] = mins.a;\n        attrs[_this.id + '.baxis.min'] = mins.b;\n        attrs[_this.id + '.caxis.min'] = mins.c;\n\n        Registry.call('relayout', gd, attrs);\n    }\n\n    // finally, set up hover and click\n    // these event handlers must already be set before dragElement.init\n    // so it can stash them and override them.\n    dragger.onmousemove = function(evt) {\n        Fx.hover(gd, evt, _this.id);\n        gd._fullLayout._lasthover = dragger;\n        gd._fullLayout._hoversubplot = _this.id;\n    };\n\n    dragger.onmouseout = function(evt) {\n        if(gd._dragging) return;\n\n        dragElement.unhover(gd, evt);\n    };\n\n    dragElement.init(dragOptions);\n};\n\nfunction removeZoombox(gd) {\n    d3.select(gd)\n        .selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners')\n        .remove();\n}\n",null]}