{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/parcoords/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/parcoords/attributes.js","mtime":1529418310726},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttributes = require('../../components/colorscale/color_attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar colorscales = require('../../components/colorscale/scales');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extend = require('../../lib/extend');\nvar extendDeepAll = extend.extendDeepAll;\nvar extendFlat = extend.extendFlat;\n\nmodule.exports = {\n    domain: domainAttrs({name: 'parcoords', trace: true, editType: 'calc'}),\n\n    labelfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `dimension` labels.'\n    }),\n    tickfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `dimension` tick values.'\n    }),\n    rangefont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `dimension` range values.'\n    }),\n\n    dimensions: {\n        _isLinkedToArray: 'dimension',\n        label: {\n            valType: 'string',\n            role: 'info',\n            editType: 'calc',\n            description: 'The shown name of the dimension.'\n        },\n        // TODO: better way to determine ordinal vs continuous axes,\n        // so users can use tickvals/ticktext with a continuous axis.\n        tickvals: extendFlat({}, axesAttrs.tickvals, {editType: 'calc'}),\n        ticktext: extendFlat({}, axesAttrs.ticktext, {editType: 'calc'}),\n        tickformat: {\n            valType: 'string',\n            dflt: '3s',\n            role: 'style',\n            editType: 'calc',\n            description: [\n                'Sets the tick label formatting rule using d3 formatting mini-language',\n                'which is similar to those of Python. See',\n                'https://github.com/d3/d3-format/blob/master/README.md#locale_format'\n            ].join(' ')\n        },\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'calc',\n            description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n        },\n        range: {\n            valType: 'info_array',\n            role: 'info',\n            items: [\n                {valType: 'number', editType: 'calc'},\n                {valType: 'number', editType: 'calc'}\n            ],\n            editType: 'calc',\n            description: [\n                'The domain range that represents the full, shown axis extent. Defaults to the `values` extent.',\n                'Must be an array of `[fromValue, toValue]` with finite numbers as elements.'\n            ].join(' ')\n        },\n        constraintrange: {\n            valType: 'info_array',\n            role: 'info',\n            freeLength: true,\n            dimensions: '1-2',\n            items: [\n                {valType: 'number', editType: 'calc'},\n                {valType: 'number', editType: 'calc'}\n            ],\n            editType: 'calc',\n            description: [\n                'The domain range to which the filter on the dimension is constrained. Must be an array',\n                'of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not',\n                'disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.'\n            ].join(' ')\n        },\n        multiselect: {\n            valType: 'boolean',\n            dflt: true,\n            role: 'info',\n            editType: 'calc',\n            description: 'Do we allow multiple selection ranges or just a single range?'\n        },\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            editType: 'calc',\n            description: [\n                'Dimension values. `values[n]` represents the value of the `n`th point in the dataset,',\n                'therefore the `values` vector for all dimensions must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number.'\n            ].join(' ')\n        },\n        editType: 'calc',\n        description: 'The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.'\n    },\n\n    line: extendFlat(\n        // the default autocolorscale isn't quite usable for parcoords due to context ambiguity around 0 (grey, off-white)\n\n        // autocolorscale therefore defaults to false too, to avoid being overridden by the  blue-white-red autocolor palette\n        extendDeepAll(\n            colorAttributes('line', 'calc'),\n            {\n                colorscale: {dflt: colorscales.Viridis},\n                autocolorscale: {\n                    dflt: false,\n                    description: [\n                        'Has an effect only if line.color` is set to a numerical array.',\n                        'Determines whether the colorscale is a default palette (`autocolorscale: true`)',\n                        'or the palette determined by `line.colorscale`.',\n                        'In case `colorscale` is unspecified or `autocolorscale` is true, the default ',\n                        'palette will be chosen according to whether numbers in the `color` array are',\n                        'all positive, all negative or mixed.',\n                        'The default value is false, so that `parcoords` colorscale can default to `Viridis`.'\n                    ].join(' ')\n                }\n            }\n        ),\n\n        {\n            showscale: {\n                valType: 'boolean',\n                role: 'info',\n                dflt: false,\n                editType: 'calc',\n                description: [\n                    'Has an effect only if `line.color` is set to a numerical array.',\n                    'Determines whether or not a colorbar is displayed.'\n                ].join(' ')\n            },\n            colorbar: colorbarAttrs,\n            editType: 'calc'\n        }\n    )\n};\n",null]}