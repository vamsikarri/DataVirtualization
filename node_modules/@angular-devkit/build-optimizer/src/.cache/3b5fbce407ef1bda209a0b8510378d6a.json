{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/violin/style.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/violin/style.js","mtime":1529418310750},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Color = require('../../components/color');\nvar stylePoints = require('../scatter/style').stylePoints;\n\nmodule.exports = function style(gd, cd) {\n    var s = cd ? cd[0].node3 : d3.select(gd).selectAll('g.trace.violins');\n\n    s.style('opacity', function(d) { return d[0].trace.opacity; });\n\n    s.each(function(d) {\n        var trace = d[0].trace;\n        var sel = d3.select(this);\n        var box = trace.box || {};\n        var boxLine = box.line || {};\n        var meanline = trace.meanline || {};\n        var meanLineWidth = meanline.width;\n\n        sel.selectAll('path.violin')\n            .style('stroke-width', trace.line.width + 'px')\n            .call(Color.stroke, trace.line.color)\n            .call(Color.fill, trace.fillcolor);\n\n        sel.selectAll('path.box')\n            .style('stroke-width', boxLine.width + 'px')\n            .call(Color.stroke, boxLine.color)\n            .call(Color.fill, box.fillcolor);\n\n        sel.selectAll('path.mean')\n            .style({\n                'stroke-width': meanLineWidth + 'px',\n                'stroke-dasharray': (2 * meanLineWidth) + 'px,' + meanLineWidth + 'px'\n            })\n            .call(Color.stroke, meanline.color);\n\n        stylePoints(sel, trace, gd);\n    });\n};\n",null]}