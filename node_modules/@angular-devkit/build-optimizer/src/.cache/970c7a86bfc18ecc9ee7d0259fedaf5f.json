{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/polar/layout_attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/polar/layout_attributes.js","mtime":1529418310694},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../cartesian/layout_attributes');\nvar domainAttrs = require('../domain').attributes;\nvar extendFlat = require('../../lib').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar axisLineGridAttr = overrideAll({\n    color: axesAttrs.color,\n    showline: extendFlat({}, axesAttrs.showline, {dflt: true}),\n    linecolor: axesAttrs.linecolor,\n    linewidth: axesAttrs.linewidth,\n    showgrid: extendFlat({}, axesAttrs.showgrid, {dflt: true}),\n    gridcolor: axesAttrs.gridcolor,\n    gridwidth: axesAttrs.gridwidth\n\n    // TODO add spike* attributes down the road\n\n    // should we add zeroline* attributes?\n\n}, 'plot', 'from-root');\n\nvar axisTickAttrs = overrideAll({\n    tickmode: axesAttrs.tickmode,\n    nticks: axesAttrs.nticks,\n    tick0: axesAttrs.tick0,\n    dtick: axesAttrs.dtick,\n    tickvals: axesAttrs.tickvals,\n    ticktext: axesAttrs.ticktext,\n    ticks: axesAttrs.ticks,\n    ticklen: axesAttrs.ticklen,\n    tickwidth: axesAttrs.tickwidth,\n    tickcolor: axesAttrs.tickcolor,\n    showticklabels: axesAttrs.showticklabels,\n    showtickprefix: axesAttrs.showtickprefix,\n    tickprefix: axesAttrs.tickprefix,\n    showticksuffix: axesAttrs.showticksuffix,\n    ticksuffix: axesAttrs.ticksuffix,\n    showexponent: axesAttrs.showexponent,\n    exponentformat: axesAttrs.exponentformat,\n    separatethousands: axesAttrs.separatethousands,\n    tickfont: axesAttrs.tickfont,\n    tickangle: axesAttrs.tickangle,\n    tickformat: axesAttrs.tickformat,\n    tickformatstops: axesAttrs.tickformatstops,\n    layer: axesAttrs.layer\n}, 'plot', 'from-root');\n\nvar radialAxisAttrs = {\n    visible: extendFlat({}, axesAttrs.visible, {dflt: true}),\n    type: axesAttrs.type,\n\n    autorange: axesAttrs.autorange,\n    rangemode: {\n        valType: 'enumerated',\n        values: ['tozero', 'nonnegative', 'normal'],\n        dflt: 'tozero',\n        role: 'style',\n        editType: 'calc',\n        description: [\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.',\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data (same behavior as for cartesian axes).'\n        ].join(' ')\n    },\n    range: axesAttrs.range,\n\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n\n    angle: {\n        valType: 'angle',\n        editType: 'plot',\n        role: 'info',\n        description: [\n            'Sets the angle (in degrees) from which the radial axis is drawn.',\n            'Note that by default, radial axis line on the theta=0 line',\n            'corresponds to a line pointing right (like what mathematicians prefer).',\n            'Defaults to the first `polar.sector` angle.'\n        ].join(' ')\n    },\n\n    side: {\n        valType: 'enumerated',\n        // TODO add 'center' for `showline: false` radial axes\n        values: ['clockwise', 'counterclockwise'],\n        dflt: 'clockwise',\n        editType: 'plot',\n        role: 'info',\n        description: [\n            'Determines on which side of radial axis line',\n            'the tick and tick labels appear.'\n        ].join(' ')\n    },\n\n\n    title: extendFlat({}, axesAttrs.title, {editType: 'plot', dflt: ''}),\n    titlefont: overrideAll(axesAttrs.titlefont, 'plot', 'from-root'),\n    // might need a 'titleside' and even 'titledirection' down the road\n\n    hoverformat: axesAttrs.hoverformat,\n\n    // More attributes:\n\n    // We'll need some attribute that determines the span\n    // to draw donut-like charts\n    // e.g. https://github.com/matplotlib/matplotlib/issues/4217\n    //\n    // maybe something like 'span' or 'hole' (like pie, but pie set it in data coords?)\n    // span: {},\n    // hole: 1\n\n    // maybe should add a boolean to enable square grid lines\n    // and square axis lines\n    // (most common in radar-like charts)\n    // e.g. squareline/squaregrid or showline/showgrid: 'square' (on-top of true)\n\n    editType: 'calc'\n};\n\nextendFlat(\n    radialAxisAttrs,\n\n    // N.B. radialaxis grid lines are circular,\n    // but radialaxis lines are straight from circle center to outer bound\n    axisLineGridAttr,\n    axisTickAttrs\n);\n\nvar angularAxisAttrs = {\n    visible: extendFlat({}, axesAttrs.visible, {dflt: true}),\n    type: {\n        valType: 'enumerated',\n        // 'linear' should maybe be called 'angle' or 'angular' here\n        // to make clear that axis here is periodic and more tightly match\n        // `thetaunit`?\n        //\n        // skip 'date' for first push\n        // no 'log' for now\n        values: ['-', 'linear', 'category'],\n        dflt: '-',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the angular axis type.',\n            'If *linear*, set `thetaunit` to determine the unit in which axis value are shown.',\n            'If *category, use `period` to set the number of integer coordinates around polar axis.'\n        ].join(' ')\n    },\n\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n\n    thetaunit: {\n        valType: 'enumerated',\n        values: ['radians', 'degrees'],\n        dflt: 'degrees',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the format unit of the formatted *theta* values.',\n            'Has an effect only when `angularaxis.type` is *linear*.'\n        ].join(' ')\n    },\n\n    period: {\n        valType: 'number',\n        editType: 'calc',\n        min: 0,\n        role: 'info',\n        description: [\n            'Set the angular period.',\n            'Has an effect only when `angularaxis.type` is *category*.',\n        ].join(' ')\n        // Examples for date axes:\n        //\n        // - period that equals the timeseries length\n        //  http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/18-polar-coordinates/\n        // - and 1-year periods (focusing on seasonal change0\n        //  http://otexts.org/fpp2/seasonal-plots.html\n        //  https://blogs.scientificamerican.com/sa-visual/why-are-so-many-babies-born-around-8-00-a-m/\n        //  http://www.seasonaladjustment.com/2012/09/05/clock-plot-visualising-seasonality-using-r-and-ggplot2-part-3/\n        //  https://i.pinimg.com/736x/49/b9/72/49b972ccb3206a1a6d6f870dac543280.jpg\n        //  https://www.climate-lab-book.ac.uk/spirals/\n    },\n\n    direction: {\n        valType: 'enumerated',\n        values: ['counterclockwise', 'clockwise'],\n        dflt: 'counterclockwise',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the direction corresponding to positive angles.'\n        ].join(' ')\n    },\n\n    rotation: {\n        valType: 'angle',\n        editType: 'calc',\n        role: 'info',\n        description: [\n            'Sets that start position (in degrees) of the angular axis',\n            'By default, polar subplots with `direction` set to *counterclockwise*',\n            'get a `rotation` of *0*',\n            'which corresponds to due East (like what mathematicians prefer).',\n            'In turn, polar with `direction` set to *clockwise* get a rotation of *90*',\n            'which corresponds to due North (like on a compass),'\n        ].join(' ')\n    },\n\n    hoverformat: axesAttrs.hoverformat,\n\n    editType: 'calc'\n};\n\nextendFlat(\n    angularAxisAttrs,\n\n    // N.B. angular grid lines are straight lines from circle center to outer bound\n    // the angular line is circular bounding the polar plot area.\n    axisLineGridAttr,\n\n    // N.B. ticksuffix defaults to 'Â°' for angular axes with `thetaunit: 'degrees'`\n    axisTickAttrs\n);\n\nmodule.exports = {\n    // TODO for x/y/zoom system for paper-based zooming:\n    // x: {},\n    // y: {},\n    // zoom: {},\n\n    domain: domainAttrs({name: 'polar', editType: 'plot'}),\n\n    sector: {\n        valType: 'info_array',\n        items: [\n            {valType: 'number', editType: 'plot'},\n            {valType: 'number', editType: 'plot'}\n        ],\n        dflt: [0, 360],\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Sets angular span of this polar subplot with two angles (in degrees).',\n            'Sector are assumed to be spanned in the counterclockwise direction',\n            'with *0* corresponding to rightmost limit of the polar subplot.'\n        ].join(' ')\n    },\n\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        editType: 'plot',\n        dflt: colorAttrs.background,\n        description: 'Set the background color of the subplot'\n    },\n\n    radialaxis: radialAxisAttrs,\n    angularaxis: angularAxisAttrs,\n\n    // TODO maybe?\n    // annotations:\n\n    editType: 'calc'\n};\n",null]}