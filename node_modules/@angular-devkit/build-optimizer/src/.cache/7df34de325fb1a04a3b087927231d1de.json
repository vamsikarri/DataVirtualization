{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/lib/geo_location_utils.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/lib/geo_location_utils.js","mtime":1529418310672},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar countryRegex = require('country-regex');\nvar Lib = require('../lib');\n\n\n// make list of all country iso3 ids from at runtime\nvar countryIds = Object.keys(countryRegex);\n\nvar locationmodeToIdFinder = {\n    'ISO-3': Lib.identity,\n    'USA-states': Lib.identity,\n    'country names': countryNameToISO3\n};\n\nexports.locationToFeature = function(locationmode, location, features) {\n    if(!location || typeof location !== 'string') return false;\n\n    var locationId = getLocationId(locationmode, location);\n\n    if(locationId) {\n        for(var i = 0; i < features.length; i++) {\n            var feature = features[i];\n\n            if(feature.id === locationId) return feature;\n        }\n\n        Lib.log([\n            'Location with id', locationId,\n            'does not have a matching topojson feature at this resolution.'\n        ].join(' '));\n    }\n\n    return false;\n};\n\nfunction getLocationId(locationmode, location) {\n    var idFinder = locationmodeToIdFinder[locationmode];\n    return idFinder(location);\n}\n\nfunction countryNameToISO3(countryName) {\n    for(var i = 0; i < countryIds.length; i++) {\n        var iso3 = countryIds[i],\n            regex = new RegExp(countryRegex[iso3]);\n\n        if(regex.test(countryName.trim().toLowerCase())) return iso3;\n    }\n\n    Lib.log('Unrecognized country name: ' + countryName + '.');\n\n    return false;\n}\n",null]}