{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/carpet/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/carpet/plot.js","mtime":1529418310707},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar Drawing = require('../../components/drawing');\nvar map1dArray = require('./map_1d_array');\nvar makepath = require('./makepath');\nvar orientText = require('./orient_text');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Lib = require('../../lib');\nvar alignmentConstants = require('../../constants/alignment');\nvar getUidsFromCalcData = require('../../plots/get_data').getUidsFromCalcData;\n\nmodule.exports = function plot(gd, plotinfo, cdcarpet, carpetLayer) {\n    var uidLookup = getUidsFromCalcData(cdcarpet);\n\n    carpetLayer.selectAll('g.trace').each(function() {\n        var classString = d3.select(this).attr('class');\n        var oldUid = classString.split('carpet')[1].split(/\\s/)[0];\n\n        if(!uidLookup[oldUid]) {\n            d3.select(this).remove();\n        }\n    });\n\n    for(var i = 0; i < cdcarpet.length; i++) {\n        plotOne(gd, plotinfo, cdcarpet[i], carpetLayer);\n    }\n};\n\nfunction plotOne(gd, plotinfo, cd, carpetLayer) {\n    var t = cd[0];\n    var trace = cd[0].trace,\n        xa = plotinfo.xaxis,\n        ya = plotinfo.yaxis,\n        aax = trace.aaxis,\n        bax = trace.baxis,\n        fullLayout = gd._fullLayout;\n\n    var clipLayer = fullLayout._clips;\n\n    var axisLayer = Lib.ensureSingle(carpetLayer, 'g', 'carpet' + trace.uid).classed('trace', true);\n    var minorLayer = Lib.ensureSingle(axisLayer, 'g', 'minorlayer');\n    var majorLayer = Lib.ensureSingle(axisLayer, 'g', 'majorlayer');\n    var boundaryLayer = Lib.ensureSingle(axisLayer, 'g', 'boundarylayer');\n    var labelLayer = Lib.ensureSingle(axisLayer, 'g', 'labellayer');\n\n    axisLayer.style('opacity', trace.opacity);\n\n    drawGridLines(xa, ya, majorLayer, aax, 'a', aax._gridlines, true);\n    drawGridLines(xa, ya, majorLayer, bax, 'b', bax._gridlines, true);\n    drawGridLines(xa, ya, minorLayer, aax, 'a', aax._minorgridlines, true);\n    drawGridLines(xa, ya, minorLayer, bax, 'b', bax._minorgridlines, true);\n\n    // NB: These are not ommitted if the lines are not active. The joins must be executed\n    // in order for them to get cleaned up without a full redraw\n    drawGridLines(xa, ya, boundaryLayer, aax, 'a-boundary', aax._boundarylines);\n    drawGridLines(xa, ya, boundaryLayer, bax, 'b-boundary', bax._boundarylines);\n\n    var labelOrientationA = drawAxisLabels(gd, xa, ya, trace, t, labelLayer, aax._labels, 'a-label');\n    var labelOrientationB = drawAxisLabels(gd, xa, ya, trace, t, labelLayer, bax._labels, 'b-label');\n\n    drawAxisTitles(gd, labelLayer, trace, t, xa, ya, labelOrientationA, labelOrientationB);\n\n    drawClipPath(trace, t, clipLayer, xa, ya);\n}\n\nfunction drawClipPath(trace, t, layer, xaxis, yaxis) {\n    var seg, xp, yp, i;\n\n    var clip = layer.select('#' + trace._clipPathId);\n\n    if(!clip.size()) {\n        clip = layer.append('clipPath')\n            .classed('carpetclip', true);\n    }\n\n    var path = Lib.ensureSingle(clip, 'path', 'carpetboundary');\n    var segments = t.clipsegments;\n    var segs = [];\n\n    for(i = 0; i < segments.length; i++) {\n        seg = segments[i];\n        xp = map1dArray([], seg.x, xaxis.c2p);\n        yp = map1dArray([], seg.y, yaxis.c2p);\n        segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    // This could be optimized ever so slightly to avoid no-op L segments\n    // at the corners, but it's so negligible that I don't think it's worth\n    // the extra complexity\n    var clipPathData = 'M' + segs.join('L') + 'Z';\n    clip.attr('id', trace._clipPathId);\n    path.attr('d', clipPathData);\n}\n\nfunction drawGridLines(xaxis, yaxis, layer, axis, axisLetter, gridlines) {\n    var lineClass = 'const-' + axisLetter + '-lines';\n    var gridJoin = layer.selectAll('.' + lineClass).data(gridlines);\n\n    gridJoin.enter().append('path')\n        .classed(lineClass, true)\n        .style('vector-effect', 'non-scaling-stroke');\n\n    gridJoin.each(function(d) {\n        var gridline = d;\n        var x = gridline.x;\n        var y = gridline.y;\n\n        var xp = map1dArray([], x, xaxis.c2p);\n        var yp = map1dArray([], y, yaxis.c2p);\n\n        var path = 'M' + makepath(xp, yp, gridline.smoothing);\n\n        var el = d3.select(this);\n\n        el.attr('d', path)\n            .style('stroke-width', gridline.width)\n            .style('stroke', gridline.color)\n            .style('fill', 'none');\n    });\n\n    gridJoin.exit().remove();\n}\n\nfunction drawAxisLabels(gd, xaxis, yaxis, trace, t, layer, labels, labelClass) {\n    var labelJoin = layer.selectAll('text.' + labelClass).data(labels);\n\n    labelJoin.enter().append('text')\n        .classed(labelClass, true);\n\n    var maxExtent = 0;\n    var labelOrientation = {};\n\n    labelJoin.each(function(label, i) {\n        // Most of the positioning is done in calc_labels. Only the parts that depend upon\n        // the screen space representation of the x and y axes are here:\n        var orientation;\n        if(label.axis.tickangle === 'auto') {\n            orientation = orientText(trace, xaxis, yaxis, label.xy, label.dxy);\n        } else {\n            var angle = (label.axis.tickangle + 180.0) * Math.PI / 180.0;\n            orientation = orientText(trace, xaxis, yaxis, label.xy, [Math.cos(angle), Math.sin(angle)]);\n        }\n\n        if(!i) {\n            // TODO: offsetMultiplier? Not currently used anywhere...\n            labelOrientation = {angle: orientation.angle, flip: orientation.flip};\n        }\n        var direction = (label.endAnchor ? -1 : 1) * orientation.flip;\n\n        var labelEl = d3.select(this)\n            .attr({\n                'text-anchor': direction > 0 ? 'start' : 'end',\n                'data-notex': 1\n            })\n            .call(Drawing.font, label.font)\n            .text(label.text)\n            .call(svgTextUtils.convertToTspans, gd);\n\n        var bbox = Drawing.bBox(this);\n\n        labelEl.attr('transform',\n                // Translate to the correct point:\n                'translate(' + orientation.p[0] + ',' + orientation.p[1] + ') ' +\n                // Rotate to line up with grid line tangent:\n                'rotate(' + orientation.angle + ')' +\n                // Adjust the baseline and indentation:\n                'translate(' + label.axis.labelpadding * direction + ',' + bbox.height * 0.3 + ')'\n            );\n\n        maxExtent = Math.max(maxExtent, bbox.width + label.axis.labelpadding);\n    });\n\n    labelJoin.exit().remove();\n\n    labelOrientation.maxExtent = maxExtent;\n    return labelOrientation;\n}\n\nfunction drawAxisTitles(gd, layer, trace, t, xa, ya, labelOrientationA, labelOrientationB) {\n    var a, b, xy, dxy;\n\n    a = 0.5 * (trace.a[0] + trace.a[trace.a.length - 1]);\n    b = trace.b[0];\n    xy = trace.ab2xy(a, b, true);\n    dxy = trace.dxyda_rough(a, b);\n    if(labelOrientationA.angle === undefined) {\n        Lib.extendFlat(labelOrientationA, orientText(trace, xa, ya, xy, trace.dxydb_rough(a, b)));\n    }\n    drawAxisTitle(gd, layer, trace, t, xy, dxy, trace.aaxis, xa, ya, labelOrientationA, 'a-title');\n\n    a = trace.a[0];\n    b = 0.5 * (trace.b[0] + trace.b[trace.b.length - 1]);\n    xy = trace.ab2xy(a, b, true);\n    dxy = trace.dxydb_rough(a, b);\n    if(labelOrientationB.angle === undefined) {\n        Lib.extendFlat(labelOrientationB, orientText(trace, xa, ya, xy, trace.dxyda_rough(a, b)));\n    }\n    drawAxisTitle(gd, layer, trace, t, xy, dxy, trace.baxis, xa, ya, labelOrientationB, 'b-title');\n}\n\nvar lineSpacing = alignmentConstants.LINE_SPACING;\nvar midShift = ((1 - alignmentConstants.MID_SHIFT) / lineSpacing) + 1;\n\nfunction drawAxisTitle(gd, layer, trace, t, xy, dxy, axis, xa, ya, labelOrientation, labelClass) {\n    var data = [];\n    if(axis.title) data.push(axis.title);\n    var titleJoin = layer.selectAll('text.' + labelClass).data(data);\n    var offset = labelOrientation.maxExtent;\n\n    titleJoin.enter().append('text')\n        .classed(labelClass, true);\n\n    // There's only one, but we'll do it as a join so it's updated nicely:\n    titleJoin.each(function() {\n        var orientation = orientText(trace, xa, ya, xy, dxy);\n\n        if(['start', 'both'].indexOf(axis.showticklabels) === -1) {\n            offset = 0;\n        }\n\n        // In addition to the size of the labels, add on some extra padding:\n        var titleSize = axis.titlefont.size;\n        offset += titleSize + axis.titleoffset;\n\n        var labelNorm = labelOrientation.angle + (labelOrientation.flip < 0 ? 180 : 0);\n        var angleDiff = (labelNorm - orientation.angle + 450) % 360;\n        var reverseTitle = angleDiff > 90 && angleDiff < 270;\n\n        var el = d3.select(this);\n\n        el.text(axis.title || '')\n            .call(svgTextUtils.convertToTspans, gd);\n\n        if(reverseTitle) {\n            offset = (-svgTextUtils.lineCount(el) + midShift) * lineSpacing * titleSize - offset;\n        }\n\n        el.attr('transform',\n                'translate(' + orientation.p[0] + ',' + orientation.p[1] + ') ' +\n                'rotate(' + orientation.angle + ') ' +\n                'translate(0,' + offset + ')'\n            )\n            .classed('user-select-none', true)\n            .attr('text-anchor', 'middle')\n            .call(Drawing.font, axis.titlefont);\n    });\n\n    titleJoin.exit().remove();\n}\n",null]}