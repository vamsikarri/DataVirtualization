{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/cartesian/tick_value_defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/cartesian/tick_value_defaults.js","mtime":1529418310686},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar ONEDAY = require('../../constants/numerical').ONEDAY;\n\n\nmodule.exports = function handleTickValueDefaults(containerIn, containerOut, coerce, axType) {\n    var tickmodeDefault = 'auto';\n\n    if(containerIn.tickmode === 'array' &&\n            (axType === 'log' || axType === 'date')) {\n        containerIn.tickmode = 'auto';\n    }\n\n    if(Array.isArray(containerIn.tickvals)) tickmodeDefault = 'array';\n    else if(containerIn.dtick) {\n        tickmodeDefault = 'linear';\n    }\n    var tickmode = coerce('tickmode', tickmodeDefault);\n\n    if(tickmode === 'auto') coerce('nticks');\n    else if(tickmode === 'linear') {\n        // dtick is usually a positive number, but there are some\n        // special strings available for log or date axes\n        // default is 1 day for dates, otherwise 1\n        var dtickDflt = (axType === 'date') ? ONEDAY : 1;\n        var dtick = coerce('dtick', dtickDflt);\n        if(isNumeric(dtick)) {\n            containerOut.dtick = (dtick > 0) ? Number(dtick) : dtickDflt;\n        }\n        else if(typeof dtick !== 'string') {\n            containerOut.dtick = dtickDflt;\n        }\n        else {\n            // date and log special cases are all one character plus a number\n            var prefix = dtick.charAt(0),\n                dtickNum = dtick.substr(1);\n\n            dtickNum = isNumeric(dtickNum) ? Number(dtickNum) : 0;\n            if((dtickNum <= 0) || !(\n                    // \"M<n>\" gives ticks every (integer) n months\n                    (axType === 'date' && prefix === 'M' && dtickNum === Math.round(dtickNum)) ||\n                    // \"L<f>\" gives ticks linearly spaced in data (not in position) every (float) f\n                    (axType === 'log' && prefix === 'L') ||\n                    // \"D1\" gives powers of 10 with all small digits between, \"D2\" gives only 2 and 5\n                    (axType === 'log' && prefix === 'D' && (dtickNum === 1 || dtickNum === 2))\n                )) {\n                containerOut.dtick = dtickDflt;\n            }\n        }\n\n        // tick0 can have different valType for different axis types, so\n        // validate that now. Also for dates, change milliseconds to date strings\n        var tick0Dflt = (axType === 'date') ? Lib.dateTick0(containerOut.calendar) : 0;\n        var tick0 = coerce('tick0', tick0Dflt);\n        if(axType === 'date') {\n            containerOut.tick0 = Lib.cleanDate(tick0, tick0Dflt);\n        }\n        // Aside from date axes, dtick must be numeric; D1 and D2 modes ignore tick0 entirely\n        else if(isNumeric(tick0) && dtick !== 'D1' && dtick !== 'D2') {\n            containerOut.tick0 = Number(tick0);\n        }\n        else {\n            containerOut.tick0 = tick0Dflt;\n        }\n    }\n    else {\n        var tickvals = coerce('tickvals');\n        if(tickvals === undefined) containerOut.tickmode = 'auto';\n        else coerce('ticktext');\n    }\n};\n",null]}