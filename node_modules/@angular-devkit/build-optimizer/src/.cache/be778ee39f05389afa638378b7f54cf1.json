{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/layout_attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/layout_attributes.js","mtime":1529418310692},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar defaultLine = require('../../components/color').defaultLine;\nvar domainAttrs = require('../domain').attributes;\nvar fontAttrs = require('../font_attributes');\nvar textposition = require('../../traces/scatter/attributes').textposition;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fontAttr = fontAttrs({\n    description: [\n        'Sets the icon text font.',\n        'Has an effect only when `type` is set to *symbol*.'\n    ].join(' ')\n});\nfontAttr.family.dflt = 'Open Sans Regular, Arial Unicode MS Regular';\n\nmodule.exports = overrideAll({\n    _arrayAttrRegexps: [Lib.counterRegex('mapbox', '.layers', true)],\n\n    domain: domainAttrs({name: 'mapbox'}),\n\n    accesstoken: {\n        valType: 'string',\n        noBlank: true,\n        strict: true,\n        role: 'info',\n        description: [\n            'Sets the mapbox access token to be used for this mapbox map.',\n            'Alternatively, the mapbox access token can be set in the',\n            'configuration options under `mapboxAccessToken`.'\n        ].join(' ')\n    },\n    style: {\n        valType: 'any',\n        values: ['basic', 'streets', 'outdoors', 'light', 'dark', 'satellite', 'satellite-streets'],\n        dflt: 'basic',\n        role: 'style',\n        description: [\n            'Sets the Mapbox map style.',\n            'Either input one of the default Mapbox style names or the URL to a custom style',\n            'or a valid Mapbox style JSON.'\n        ].join(' ')\n    },\n\n    center: {\n        lon: {\n            valType: 'number',\n            dflt: 0,\n            role: 'info',\n            description: 'Sets the longitude of the center of the map (in degrees East).'\n        },\n        lat: {\n            valType: 'number',\n            dflt: 0,\n            role: 'info',\n            description: 'Sets the latitude of the center of the map (in degrees North).'\n        }\n    },\n    zoom: {\n        valType: 'number',\n        dflt: 1,\n        role: 'info',\n        description: 'Sets the zoom level of the map.'\n    },\n    bearing: {\n        valType: 'number',\n        dflt: 0,\n        role: 'info',\n        description: 'Sets the bearing angle of the map (in degrees counter-clockwise from North).'\n    },\n    pitch: {\n        valType: 'number',\n        dflt: 0,\n        role: 'info',\n        description: [\n            'Sets the pitch angle of the map',\n            '(in degrees, where *0* means perpendicular to the surface of the map).'\n        ].join(' ')\n    },\n\n    layers: {\n        _isLinkedToArray: 'layer',\n\n        sourcetype: {\n            valType: 'enumerated',\n            values: ['geojson', 'vector'],\n            dflt: 'geojson',\n            role: 'info',\n            description: [\n                'Sets the source type for this layer.',\n                'Support for *raster*, *image* and *video* source types is coming soon.'\n            ].join(' ')\n        },\n\n        source: {\n            valType: 'any',\n            role: 'info',\n            description: [\n                'Sets the source data for this layer.',\n                'Source can be either a URL,',\n                'a geojson object (with `sourcetype` set to *geojson*)',\n                'or an array of tile URLS (with `sourcetype` set to *vector*).'\n            ].join(' ')\n        },\n\n        sourcelayer: {\n            valType: 'string',\n            dflt: '',\n            role: 'info',\n            description: [\n                'Specifies the layer to use from a vector tile source.',\n                'Required for *vector* source type that supports multiple layers.'\n            ].join(' ')\n        },\n\n        type: {\n            valType: 'enumerated',\n            values: ['circle', 'line', 'fill', 'symbol'],\n            dflt: 'circle',\n            role: 'info',\n            description: [\n                'Sets the layer type.',\n                'Support for *raster*, *background* types is coming soon.',\n                'Note that *line* and *fill* are not compatible with Point',\n                'GeoJSON geometries.'\n            ].join(' ')\n        },\n\n        // attributes shared between all types\n        below: {\n            valType: 'string',\n            dflt: '',\n            role: 'info',\n            description: [\n                'Determines if the layer will be inserted',\n                'before the layer with the specified ID.',\n                'If omitted or set to \\'\\',',\n                'the layer will be inserted above every existing layer.'\n            ].join(' ')\n        },\n        color: {\n            valType: 'color',\n            dflt: defaultLine,\n            role: 'style',\n            description: [\n                'Sets the primary layer color.',\n                'If `type` is *circle*, color corresponds to the circle color',\n                'If `type` is *line*, color corresponds to the line color',\n                'If `type` is *fill*, color corresponds to the fill color',\n                'If `type` is *symbol*, color corresponds to the icon color'\n            ].join(' ')\n        },\n        opacity: {\n            valType: 'number',\n            min: 0,\n            max: 1,\n            dflt: 1,\n            role: 'info',\n            description: 'Sets the opacity of the layer.'\n        },\n\n        // type-specific style attributes\n        circle: {\n            radius: {\n                valType: 'number',\n                dflt: 15,\n                role: 'style',\n                description: [\n                    'Sets the circle radius.',\n                    'Has an effect only when `type` is set to *circle*.'\n                ].join(' ')\n            }\n        },\n\n        line: {\n            width: {\n                valType: 'number',\n                dflt: 2,\n                role: 'style',\n                description: [\n                    'Sets the line width.',\n                    'Has an effect only when `type` is set to *line*.'\n                ].join(' ')\n            }\n        },\n\n        fill: {\n            outlinecolor: {\n                valType: 'color',\n                dflt: defaultLine,\n                role: 'style',\n                description: [\n                    'Sets the fill outline color.',\n                    'Has an effect only when `type` is set to *fill*.'\n                ].join(' ')\n            }\n        },\n\n        symbol: {\n            icon: {\n                valType: 'string',\n                dflt: 'marker',\n                role: 'style',\n                description: [\n                    'Sets the symbol icon image.',\n                    'Full list: https://www.mapbox.com/maki-icons/'\n                ].join(' ')\n            },\n            iconsize: {\n                valType: 'number',\n                dflt: 10,\n                role: 'style',\n                description: [\n                    'Sets the symbol icon size.',\n                    'Has an effect only when `type` is set to *symbol*.'\n                ].join(' ')\n            },\n            text: {\n                valType: 'string',\n                dflt: '',\n                role: 'info',\n                description: [\n                    'Sets the symbol text.'\n                ].join(' ')\n            },\n            textfont: fontAttr,\n            textposition: Lib.extendFlat({}, textposition, { arrayOk: false })\n        }\n    }\n}, 'plot', 'from-root');\n",null]}