{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/bar/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/bar/calc.js","mtime":1529418310699},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\nvar Axes = require('../../plots/cartesian/axes');\nvar hasColorscale = require('../../components/colorscale/has_colorscale');\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar arraysToCalcdata = require('./arrays_to_calcdata');\nvar calcSelection = require('../scatter/calc_selection');\n\nmodule.exports = function calc(gd, trace) {\n    // depending on bar direction, set position and size axes\n    // and data ranges\n    // note: this logic for choosing orientation is\n    // duplicated in graph_obj->setstyles\n\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x'),\n        ya = Axes.getFromId(gd, trace.yaxis || 'y'),\n        orientation = trace.orientation || ((trace.x && !trace.y) ? 'h' : 'v'),\n        sa, pos, size, i, scalendar;\n\n    if(orientation === 'h') {\n        sa = xa;\n        size = xa.makeCalcdata(trace, 'x');\n        pos = ya.makeCalcdata(trace, 'y');\n\n        // not sure if it really makes sense to have dates for bar size data...\n        // ideally if we want to make gantt charts or something we'd treat\n        // the actual size (trace.x or y) as time delta but base as absolute\n        // time. But included here for completeness.\n        scalendar = trace.xcalendar;\n    }\n    else {\n        sa = ya;\n        size = ya.makeCalcdata(trace, 'y');\n        pos = xa.makeCalcdata(trace, 'x');\n        scalendar = trace.ycalendar;\n    }\n\n    // create the \"calculated data\" to plot\n    var serieslen = Math.min(pos.length, size.length);\n    var cd = new Array(serieslen);\n\n    // set position and size\n    for(i = 0; i < serieslen; i++) {\n        cd[i] = { p: pos[i], s: size[i] };\n\n        if(trace.ids) {\n            cd[i].id = String(trace.ids[i]);\n        }\n    }\n\n    // set base\n    var base = trace.base,\n        b;\n\n    if(isArrayOrTypedArray(base)) {\n        for(i = 0; i < Math.min(base.length, cd.length); i++) {\n            b = sa.d2c(base[i], 0, scalendar);\n            if(isNumeric(b)) {\n                cd[i].b = +b;\n                cd[i].hasB = 1;\n            }\n            else cd[i].b = 0;\n        }\n        for(; i < cd.length; i++) {\n            cd[i].b = 0;\n        }\n    }\n    else {\n        b = sa.d2c(base, 0, scalendar);\n        var hasBase = isNumeric(b);\n        b = hasBase ? b : 0;\n        for(i = 0; i < cd.length; i++) {\n            cd[i].b = b;\n            if(hasBase) cd[i].hasB = 1;\n        }\n    }\n\n    // auto-z and autocolorscale if applicable\n    if(hasColorscale(trace, 'marker')) {\n        colorscaleCalc(trace, trace.marker.color, 'marker', 'c');\n    }\n    if(hasColorscale(trace, 'marker.line')) {\n        colorscaleCalc(trace, trace.marker.line.color, 'marker.line', 'c');\n    }\n\n    arraysToCalcdata(cd, trace);\n    calcSelection(cd, trace);\n\n    return cd;\n};\n",null]}