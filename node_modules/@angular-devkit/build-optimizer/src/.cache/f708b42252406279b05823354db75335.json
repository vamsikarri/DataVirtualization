{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/ohlc/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/ohlc/attributes.js","mtime":1529418310725},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar extendFlat = require('../../lib').extendFlat;\nvar scatterAttrs = require('../scatter/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar INCREASING_COLOR = '#3D9970';\nvar DECREASING_COLOR = '#FF4136';\n\nvar lineAttrs = scatterAttrs.line;\n\nfunction directionAttrs(lineColorDefault) {\n    return {\n        line: {\n            color: extendFlat({}, lineAttrs.color, {dflt: lineColorDefault}),\n            width: lineAttrs.width,\n            dash: dash,\n            editType: 'style'\n        },\n        editType: 'style'\n    };\n}\n\nmodule.exports = {\n\n    x: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the x coordinates.',\n            'If absent, linear coordinate will be generated.'\n        ].join(' ')\n    },\n\n    open: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the open values.'\n    },\n\n    high: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the high values.'\n    },\n\n    low: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the low values.'\n    },\n\n    close: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: 'Sets the close values.'\n    },\n\n    line: {\n        width: extendFlat({}, lineAttrs.width, {\n            description: [\n                lineAttrs.width,\n                'Note that this style setting can also be set per',\n                'direction via `increasing.line.width` and',\n                '`decreasing.line.width`.'\n            ].join(' ')\n        }),\n        dash: extendFlat({}, dash, {\n            description: [\n                dash.description,\n                'Note that this style setting can also be set per',\n                'direction via `increasing.line.dash` and',\n                '`decreasing.line.dash`.'\n            ].join(' ')\n        }),\n        editType: 'style'\n    },\n\n    increasing: directionAttrs(INCREASING_COLOR),\n\n    decreasing: directionAttrs(DECREASING_COLOR),\n\n    text: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets hover text elements associated with each sample point.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to',\n            'this trace\\'s sample points.'\n        ].join(' ')\n    },\n\n    tickwidth: {\n        valType: 'number',\n        min: 0,\n        max: 0.5,\n        dflt: 0.3,\n        role: 'style',\n        editType: 'calcIfAutorange',\n        description: [\n            'Sets the width of the open/close tick marks',\n            'relative to the *x* minimal interval.'\n        ].join(' ')\n    }\n};\n",null]}