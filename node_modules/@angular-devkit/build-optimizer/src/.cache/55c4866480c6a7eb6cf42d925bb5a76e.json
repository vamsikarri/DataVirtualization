{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-error3d/errorbars.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-error3d/errorbars.js","mtime":1529418308629},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createErrorBars\r\n\r\nvar createBuffer  = require('gl-buffer')\r\nvar createVAO     = require('gl-vao')\r\nvar createShader  = require('./shaders/index')\r\n\r\nvar IDENTITY = [1,0,0,0,\r\n                0,1,0,0,\r\n                0,0,1,0,\r\n                0,0,0,1]\r\n\r\nfunction ErrorBars(gl, buffer, vao, shader) {\r\n  this.gl           = gl\r\n  this.shader       = shader\r\n  this.buffer       = buffer\r\n  this.vao          = vao\r\n  this.pixelRatio   = 1\r\n  this.bounds       = [[ Infinity, Infinity, Infinity], [-Infinity,-Infinity,-Infinity]]\r\n  this.clipBounds   = [[-Infinity,-Infinity,-Infinity], [ Infinity, Infinity, Infinity]]\r\n  this.lineWidth    = [1,1,1]\r\n  this.capSize      = [10,10,10]\r\n  this.lineCount    = [0,0,0]\r\n  this.lineOffset   = [0,0,0]\r\n  this.opacity      = 1\r\n}\r\n\r\nvar proto = ErrorBars.prototype\r\n\r\nproto.isOpaque = function() {\r\n  return this.opacity >= 1\r\n}\r\n\r\nproto.isTransparent = function() {\r\n  return this.opacity < 1\r\n}\r\n\r\nproto.drawTransparent = proto.draw = function(cameraParams) {\r\n  var gl = this.gl\r\n  var uniforms        = this.shader.uniforms\r\n\r\n  this.shader.bind()\r\n  var view       = uniforms.view       = cameraParams.view       || IDENTITY\r\n  var projection = uniforms.projection = cameraParams.projection || IDENTITY\r\n  uniforms.model      = cameraParams.model      || IDENTITY\r\n  uniforms.clipBounds = this.clipBounds\r\n  uniforms.opacity    = this.opacity\r\n\r\n\r\n  var cx = view[12]\r\n  var cy = view[13]\r\n  var cz = view[14]\r\n  var cw = view[15]\r\n  var pixelScaleF = this.pixelRatio * (projection[3]*cx + projection[7]*cy + projection[11]*cz + projection[15]*cw) / gl.drawingBufferHeight\r\n\r\n  this.vao.bind()\r\n  for(var i=0; i<3; ++i) {\r\n    gl.lineWidth(this.lineWidth[i])\r\n    uniforms.capSize = this.capSize[i] * pixelScaleF\r\n    if (this.lineCount[i]) {\r\n      gl.drawArrays(gl.LINES, this.lineOffset[i], this.lineCount[i])\r\n    }\r\n  }\r\n  this.vao.unbind()\r\n}\r\n\r\nfunction updateBounds(bounds, point) {\r\n  for(var i=0; i<3; ++i) {\r\n    bounds[0][i] = Math.min(bounds[0][i], point[i])\r\n    bounds[1][i] = Math.max(bounds[1][i], point[i])\r\n  }\r\n}\r\n\r\nvar FACE_TABLE = (function(){\r\n  var table = new Array(3)\r\n  for(var d=0; d<3; ++d) {\r\n    var row = []\r\n    for(var j=1; j<=2; ++j) {\r\n      for(var s=-1; s<=1; s+=2) {\r\n        var u = (j+d) % 3\r\n        var y = [0,0,0]\r\n        y[u] = s\r\n        row.push(y)\r\n      }\r\n    }\r\n    table[d] = row\r\n  }\r\n  return table\r\n})()\r\n\r\n\r\nfunction emitFace(verts, x, c, d) {\r\n  var offsets = FACE_TABLE[d]\r\n  for(var i=0; i<offsets.length; ++i) {\r\n    var o = offsets[i]\r\n    verts.push(x[0], x[1], x[2],\r\n               c[0], c[1], c[2], c[3],\r\n               o[0], o[1], o[2])\r\n  }\r\n  return offsets.length\r\n}\r\n\r\nproto.update = function(options) {\r\n  options = options || {}\r\n\r\n  if('lineWidth' in options) {\r\n    this.lineWidth = options.lineWidth\r\n    if(!Array.isArray(this.lineWidth)) {\r\n      this.lineWidth = [this.lineWidth, this.lineWidth, this.lineWidth]\r\n    }\r\n  }\r\n  if('capSize' in options) {\r\n    this.capSize = options.capSize\r\n    if(!Array.isArray(this.capSize)) {\r\n      this.capSize = [this.capSize, this.capSize, this.capSize]\r\n    }\r\n  }\r\n  if('opacity' in options) {\r\n    this.opacity = options.opacity\r\n  }\r\n\r\n  var color    = options.color || [[0,0,0],[0,0,0],[0,0,0]]\r\n  var position = options.position\r\n  var error    = options.error\r\n  if(!Array.isArray(color[0])) {\r\n    color = [color,color,color]\r\n  }\r\n\r\n  if(position && error) {\r\n\r\n    var verts       = []\r\n    var n           = position.length\r\n    var vertexCount = 0\r\n    this.bounds     = [[ Infinity, Infinity, Infinity],\r\n                       [-Infinity,-Infinity,-Infinity]]\r\n    this.lineCount  = [0,0,0]\r\n\r\n    //Build geometry for lines\r\n    for(var j=0; j<3; ++j) {\r\n      this.lineOffset[j] = vertexCount\r\n\r\ni_loop:\r\n      for(var i=0; i<n; ++i) {\r\n        var p = position[i]\r\n\r\n        for(var k=0; k<3; ++k) {\r\n          if(isNaN(p[k]) || !isFinite(p[k])) {\r\n            continue i_loop\r\n          }\r\n        }\r\n\r\n        var e = error[i]\r\n        var c = color[j]\r\n        if(Array.isArray(c[0])) {\r\n          c = color[i]\r\n        }\r\n        if(c.length === 3) {\r\n          c = [c[0], c[1], c[2], 1]\r\n        }\r\n        if(isNaN(e[0][j]) || isNaN(e[1][j])) {\r\n          continue\r\n        }\r\n        if(e[0][j] < 0) {\r\n          var x = p.slice()\r\n          x[j] += e[0][j]\r\n          verts.push(p[0], p[1], p[2],\r\n                     c[0], c[1], c[2], c[3],\r\n                        0,    0,    0,\r\n                     x[0], x[1], x[2],\r\n                     c[0], c[1], c[2], c[3],\r\n                        0,    0,    0)\r\n          updateBounds(this.bounds, x)\r\n          vertexCount += 2 + emitFace(verts, x, c, j)\r\n        }\r\n        if(e[1][j] > 0) {\r\n          var x = p.slice()\r\n          x[j] += e[1][j]\r\n          verts.push(p[0], p[1], p[2],\r\n                     c[0], c[1], c[2], c[3],\r\n                        0,    0,    0,\r\n                     x[0], x[1], x[2],\r\n                     c[0], c[1], c[2], c[3],\r\n                        0,    0,    0)\r\n          updateBounds(this.bounds, x)\r\n          vertexCount += 2 + emitFace(verts, x, c, j)\r\n        }\r\n      }\r\n      this.lineCount[j] = vertexCount - this.lineOffset[j]\r\n    }\r\n    this.buffer.update(verts)\r\n  }\r\n}\r\n\r\nproto.dispose = function() {\r\n  this.shader.dispose()\r\n  this.buffer.dispose()\r\n  this.vao.dispose()\r\n}\r\n\r\nfunction createErrorBars(options) {\r\n  var gl = options.gl\r\n  var buffer = createBuffer(gl)\r\n  var vao = createVAO(gl, [\r\n      {\r\n        buffer: buffer,\r\n        type:   gl.FLOAT,\r\n        size:   3,\r\n        offset: 0,\r\n        stride: 40\r\n      },\r\n      {\r\n        buffer: buffer,\r\n        type:   gl.FLOAT,\r\n        size:   4,\r\n        offset: 12,\r\n        stride: 40\r\n      },\r\n      {\r\n        buffer: buffer,\r\n        type:   gl.FLOAT,\r\n        size:   3,\r\n        offset: 28,\r\n        stride: 40\r\n      }\r\n    ])\r\n\r\n  var shader = createShader(gl)\r\n  shader.attributes.position.location = 0\r\n  shader.attributes.color.location    = 1\r\n  shader.attributes.offset.location   = 2\r\n\r\n  var result = new ErrorBars(gl, buffer, vao, shader)\r\n  result.update(options)\r\n  return result\r\n}\r\n",null]}