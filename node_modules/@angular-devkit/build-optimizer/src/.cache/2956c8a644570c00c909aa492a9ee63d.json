{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/3d-view-controls/camera.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/3d-view-controls/camera.js","mtime":1529418304583},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createCamera\r\n\r\nvar now         = require('right-now')\r\nvar createView  = require('3d-view')\r\nvar mouseChange = require('mouse-change')\r\nvar mouseWheel  = require('mouse-wheel')\r\nvar mouseOffset = require('mouse-event-offset')\r\nvar hasPassive  = require('has-passive-events')\r\n\r\nfunction createCamera(element, options) {\r\n  element = element || document.body\r\n  options = options || {}\r\n\r\n  var limits  = [ 0.01, Infinity ]\r\n  if('distanceLimits' in options) {\r\n    limits[0] = options.distanceLimits[0]\r\n    limits[1] = options.distanceLimits[1]\r\n  }\r\n  if('zoomMin' in options) {\r\n    limits[0] = options.zoomMin\r\n  }\r\n  if('zoomMax' in options) {\r\n    limits[1] = options.zoomMax\r\n  }\r\n\r\n  var view = createView({\r\n    center: options.center || [0,0,0],\r\n    up:     options.up     || [0,1,0],\r\n    eye:    options.eye    || [0,0,10],\r\n    mode:   options.mode   || 'orbit',\r\n    distanceLimits: limits\r\n  })\r\n\r\n  var pmatrix = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n  var distance = 0.0\r\n  var width   = element.clientWidth\r\n  var height  = element.clientHeight\r\n\r\n  var camera = {\r\n    view:               view,\r\n    element:            element,\r\n    delay:              options.delay          || 16,\r\n    rotateSpeed:        options.rotateSpeed    || 1,\r\n    zoomSpeed:          options.zoomSpeed      || 1,\r\n    translateSpeed:     options.translateSpeed || 1,\r\n    flipX:              !!options.flipX,\r\n    flipY:              !!options.flipY,\r\n    modes:              view.modes,\r\n    tick: function() {\r\n      var t = now()\r\n      var delay = this.delay\r\n      view.idle(t-delay)\r\n      view.flush(t-(100+delay*2))\r\n      var ctime = t - 2 * delay\r\n      view.recalcMatrix(ctime)\r\n      var allEqual = true\r\n      var matrix = view.computedMatrix\r\n      for(var i=0; i<16; ++i) {\r\n        allEqual = allEqual && (pmatrix[i] === matrix[i])\r\n        pmatrix[i] = matrix[i]\r\n      }\r\n      var sizeChanged =\r\n          element.clientWidth === width &&\r\n          element.clientHeight === height\r\n      width  = element.clientWidth\r\n      height = element.clientHeight\r\n      if(allEqual) {\r\n        return !sizeChanged\r\n      }\r\n      distance = Math.exp(view.computedRadius[0])\r\n      return true\r\n    },\r\n    lookAt: function(center, eye, up) {\r\n      view.lookAt(view.lastT(), center, eye, up)\r\n    },\r\n    rotate: function(pitch, yaw, roll) {\r\n      view.rotate(view.lastT(), pitch, yaw, roll)\r\n    },\r\n    pan: function(dx, dy, dz) {\r\n      view.pan(view.lastT(), dx, dy, dz)\r\n    },\r\n    translate: function(dx, dy, dz) {\r\n      view.translate(view.lastT(), dx, dy, dz)\r\n    }\r\n  }\r\n\r\n  Object.defineProperties(camera, {\r\n    matrix: {\r\n      get: function() {\r\n        return view.computedMatrix\r\n      },\r\n      set: function(mat) {\r\n        view.setMatrix(view.lastT(), mat)\r\n        return view.computedMatrix\r\n      },\r\n      enumerable: true\r\n    },\r\n    mode: {\r\n      get: function() {\r\n        return view.getMode()\r\n      },\r\n      set: function(mode) {\r\n        view.setMode(mode)\r\n        return view.getMode()\r\n      },\r\n      enumerable: true\r\n    },\r\n    center: {\r\n      get: function() {\r\n        return view.computedCenter\r\n      },\r\n      set: function(ncenter) {\r\n        view.lookAt(view.lastT(), ncenter)\r\n        return view.computedCenter\r\n      },\r\n      enumerable: true\r\n    },\r\n    eye: {\r\n      get: function() {\r\n        return view.computedEye\r\n      },\r\n      set: function(neye) {\r\n        view.lookAt(view.lastT(), null, neye)\r\n        return view.computedEye\r\n      },\r\n      enumerable: true\r\n    },\r\n    up: {\r\n      get: function() {\r\n        return view.computedUp\r\n      },\r\n      set: function(nup) {\r\n        view.lookAt(view.lastT(), null, null, nup)\r\n        return view.computedUp\r\n      },\r\n      enumerable: true\r\n    },\r\n    distance: {\r\n      get: function() {\r\n        return distance\r\n      },\r\n      set: function(d) {\r\n        view.setDistance(view.lastT(), d)\r\n        return d\r\n      },\r\n      enumerable: true\r\n    },\r\n    distanceLimits: {\r\n      get: function() {\r\n        return view.getDistanceLimits(limits)\r\n      },\r\n      set: function(v) {\r\n        view.setDistanceLimits(v)\r\n        return v\r\n      },\r\n      enumerable: true\r\n    }\r\n  })\r\n\r\n  element.addEventListener('contextmenu', function(ev) {\r\n    ev.preventDefault()\r\n    return false\r\n  })\r\n\r\n  var lastX = 0, lastY = 0, lastMods = {shift: false, control: false, alt: false, meta: false}\r\n  mouseChange(element, handleInteraction)\r\n\r\n  //enable simple touch interactions\r\n  element.addEventListener('touchstart', function (ev) {\r\n    var xy = mouseOffset(ev.changedTouches[0], element)\r\n    handleInteraction(0, xy[0], xy[1], lastMods)\r\n    handleInteraction(1, xy[0], xy[1], lastMods)\r\n\r\n    ev.preventDefault()\r\n  }, hasPassive ? {passive: false} : false)\r\n\r\n  element.addEventListener('touchmove', function (ev) {\r\n    var xy = mouseOffset(ev.changedTouches[0], element)\r\n    handleInteraction(1, xy[0], xy[1], lastMods)\r\n\r\n    ev.preventDefault()\r\n  }, hasPassive ? {passive: false} : false)\r\n\r\n  element.addEventListener('touchend', function (ev) {\r\n    var xy = mouseOffset(ev.changedTouches[0], element)\r\n    handleInteraction(0, lastX, lastY, lastMods)\r\n\r\n    ev.preventDefault()\r\n  }, hasPassive ? {passive: false} : false)\r\n\r\n  function handleInteraction (buttons, x, y, mods) {\r\n    var scale = 1.0 / element.clientHeight\r\n    var dx    = scale * (x - lastX)\r\n    var dy    = scale * (y - lastY)\r\n\r\n    var flipX = camera.flipX ? 1 : -1\r\n    var flipY = camera.flipY ? 1 : -1\r\n\r\n    var drot  = Math.PI * camera.rotateSpeed\r\n\r\n    var t = now()\r\n\r\n    if(buttons & 1) {\r\n      if(mods.shift) {\r\n        view.rotate(t, 0, 0, -dx * drot)\r\n      } else {\r\n        view.rotate(t, flipX * drot * dx, -flipY * drot * dy, 0)\r\n      }\r\n    } else if(buttons & 2) {\r\n      view.pan(t, -camera.translateSpeed * dx * distance, camera.translateSpeed * dy * distance, 0)\r\n    } else if(buttons & 4) {\r\n      var kzoom = camera.zoomSpeed * dy / window.innerHeight * (t - view.lastT()) * 50.0\r\n      view.pan(t, 0, 0, distance * (Math.exp(kzoom) - 1))\r\n    }\r\n\r\n    lastX = x\r\n    lastY = y\r\n    lastMods = mods\r\n  }\r\n\r\n  mouseWheel(element, function(dx, dy, dz) {\r\n    var flipX = camera.flipX ? 1 : -1\r\n    var flipY = camera.flipY ? 1 : -1\r\n    var t = now()\r\n    if(Math.abs(dx) > Math.abs(dy)) {\r\n      view.rotate(t, 0, 0, -dx * flipX * Math.PI * camera.rotateSpeed / window.innerWidth)\r\n    } else {\r\n      var kzoom = camera.zoomSpeed * flipY * dy / window.innerHeight * (t - view.lastT()) / 100.0\r\n      view.pan(t, 0, 0, distance * (Math.exp(kzoom) - 1))\r\n    }\r\n  }, true)\r\n\r\n  return camera\r\n}\r\n",null]}