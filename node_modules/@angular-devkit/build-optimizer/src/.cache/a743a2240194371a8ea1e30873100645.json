{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-heatmap2d/heatmap.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-heatmap2d/heatmap.js","mtime":1529418308632},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createHeatmap2D\r\n\r\nvar bsearch = require('binary-search-bounds')\r\nvar iota = require('iota-array')\r\nvar pool = require('typedarray-pool')\r\nvar createShader = require('gl-shader')\r\nvar createBuffer = require('gl-buffer')\r\n\r\nvar shaders = require('./lib/shaders')\r\n\r\nfunction GLHeatmap2D (\r\n  plot,\r\n  shader,\r\n  pickShader,\r\n  positionBuffer,\r\n  weightBuffer,\r\n  colorBuffer,\r\n  idBuffer) {\r\n  this.plot = plot\r\n  this.shader = shader\r\n  this.pickShader = pickShader\r\n  this.positionBuffer = positionBuffer\r\n  this.weightBuffer = weightBuffer\r\n  this.colorBuffer = colorBuffer\r\n  this.idBuffer = idBuffer\r\n  this.xData = []\r\n  this.yData = []\r\n  this.shape = [0, 0]\r\n  this.bounds = [Infinity, Infinity, -Infinity, -Infinity]\r\n  this.pickOffset = 0\r\n}\r\n\r\nvar proto = GLHeatmap2D.prototype\r\n\r\nvar WEIGHTS = [\r\n  0, 0,\r\n  1, 0,\r\n  0, 1,\r\n  1, 0,\r\n  1, 1,\r\n  0, 1\r\n]\r\n\r\nproto.draw = (function () {\r\n  var MATRIX = [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1\r\n  ]\r\n\r\n  return function () {\r\n    var plot = this.plot\r\n    var shader = this.shader\r\n    var bounds = this.bounds\r\n    var numVertices = this.numVertices\r\n\r\n    if (numVertices <= 0) {\r\n      return\r\n    }\r\n\r\n    var gl = plot.gl\r\n    var dataBox = plot.dataBox\r\n\r\n    var boundX = bounds[2] - bounds[0]\r\n    var boundY = bounds[3] - bounds[1]\r\n    var dataX = dataBox[2] - dataBox[0]\r\n    var dataY = dataBox[3] - dataBox[1]\r\n\r\n    MATRIX[0] = 2.0 * boundX / dataX\r\n    MATRIX[4] = 2.0 * boundY / dataY\r\n    MATRIX[6] = 2.0 * (bounds[0] - dataBox[0]) / dataX - 1.0\r\n    MATRIX[7] = 2.0 * (bounds[1] - dataBox[1]) / dataY - 1.0\r\n\r\n    shader.bind()\r\n\r\n    var uniforms = shader.uniforms\r\n    uniforms.viewTransform = MATRIX\r\n\r\n    uniforms.shape = this.shape\r\n\r\n    var attributes = shader.attributes\r\n    this.positionBuffer.bind()\r\n    attributes.position.pointer()\r\n\r\n    this.weightBuffer.bind()\r\n    attributes.weight.pointer(gl.UNSIGNED_BYTE, false)\r\n\r\n    this.colorBuffer.bind()\r\n    attributes.color.pointer(gl.UNSIGNED_BYTE, true)\r\n\r\n    gl.drawArrays(gl.TRIANGLES, 0, numVertices)\r\n  }\r\n})()\r\n\r\nproto.drawPick = (function () {\r\n  var MATRIX = [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1\r\n  ]\r\n\r\n  var PICK_VECTOR = [0, 0, 0, 0]\r\n\r\n  return function (pickOffset) {\r\n    var plot = this.plot\r\n    var shader = this.pickShader\r\n    var bounds = this.bounds\r\n    var numVertices = this.numVertices\r\n\r\n    if (numVertices <= 0) {\r\n      return\r\n    }\r\n\r\n    var gl = plot.gl\r\n    var dataBox = plot.dataBox\r\n\r\n    var boundX = bounds[2] - bounds[0]\r\n    var boundY = bounds[3] - bounds[1]\r\n    var dataX = dataBox[2] - dataBox[0]\r\n    var dataY = dataBox[3] - dataBox[1]\r\n\r\n    MATRIX[0] = 2.0 * boundX / dataX\r\n    MATRIX[4] = 2.0 * boundY / dataY\r\n    MATRIX[6] = 2.0 * (bounds[0] - dataBox[0]) / dataX - 1.0\r\n    MATRIX[7] = 2.0 * (bounds[1] - dataBox[1]) / dataY - 1.0\r\n\r\n    for (var i = 0; i < 4; ++i) {\r\n      PICK_VECTOR[i] = (pickOffset >> (i * 8)) & 0xff\r\n    }\r\n\r\n    this.pickOffset = pickOffset\r\n\r\n    shader.bind()\r\n\r\n    var uniforms = shader.uniforms\r\n    uniforms.viewTransform = MATRIX\r\n    uniforms.pickOffset = PICK_VECTOR\r\n    uniforms.shape = this.shape\r\n\r\n    var attributes = shader.attributes\r\n    this.positionBuffer.bind()\r\n    attributes.position.pointer()\r\n\r\n    this.weightBuffer.bind()\r\n    attributes.weight.pointer(gl.UNSIGNED_BYTE, false)\r\n\r\n    this.idBuffer.bind()\r\n    attributes.pickId.pointer(gl.UNSIGNED_BYTE, false)\r\n\r\n    gl.drawArrays(gl.TRIANGLES, 0, numVertices)\r\n\r\n    return pickOffset + this.shape[0] * this.shape[1]\r\n  }\r\n})()\r\n\r\nproto.pick = function (x, y, value) {\r\n  var pickOffset = this.pickOffset\r\n  var pointCount = this.shape[0] * this.shape[1]\r\n  if (value < pickOffset || value >= pickOffset + pointCount) {\r\n    return null\r\n  }\r\n  var pointId = value - pickOffset\r\n  var xData = this.xData\r\n  var yData = this.yData\r\n  return {\r\n    object: this,\r\n    pointId: pointId,\r\n    dataCoord: [\r\n      xData[pointId % this.shape[0]],\r\n      yData[(pointId / this.shape[0]) | 0]]\r\n  }\r\n}\r\n\r\nproto.update = function (options) {\r\n  options = options || {}\r\n\r\n  var shape = options.shape || [0, 0]\r\n\r\n  var x = options.x || iota(shape[0])\r\n  var y = options.y || iota(shape[1])\r\n  var z = options.z || new Float32Array(shape[0] * shape[1])\r\n\r\n  this.xData = x\r\n  this.yData = y\r\n\r\n  var colorLevels = options.colorLevels || [0]\r\n  var colorValues = options.colorValues || [0, 0, 0, 1]\r\n  var colorCount = colorLevels.length\r\n\r\n  var bounds = this.bounds\r\n  var lox = bounds[0] = x[0]\r\n  var loy = bounds[1] = y[0]\r\n  var hix = bounds[2] = x[x.length - 1]\r\n  var hiy = bounds[3] = y[y.length - 1]\r\n\r\n  var xs = 1.0 / (hix - lox)\r\n  var ys = 1.0 / (hiy - loy)\r\n\r\n  var numX = shape[0]\r\n  var numY = shape[1]\r\n\r\n  this.shape = [numX, numY]\r\n\r\n  var numVerts = (numX - 1) * (numY - 1) * (WEIGHTS.length >>> 1)\r\n\r\n  this.numVertices = numVerts\r\n\r\n  var colors = pool.mallocUint8(numVerts * 4)\r\n  var positions = pool.mallocFloat32(numVerts * 2)\r\n  var weights   = pool.mallocUint8 (numVerts * 2)\r\n  var ids = pool.mallocUint32(numVerts)\r\n\r\n  var ptr = 0\r\n\r\n  for (var j = 0; j < numY - 1; ++j) {\r\n    var yc0 = ys * (y[j] - loy)\r\n    var yc1 = ys * (y[j + 1] - loy)\r\n    for (var i = 0; i < numX - 1; ++i) {\r\n      var xc0 = xs * (x[i] - lox)\r\n      var xc1 = xs * (x[i + 1] - lox)\r\n\r\n      for (var dd = 0; dd < WEIGHTS.length; dd += 2) {\r\n        var dx = WEIGHTS[dd]\r\n        var dy = WEIGHTS[dd + 1]\r\n        var offset = (j + dy) * numX + (i + dx)\r\n        var zc = z[offset]\r\n        var colorIdx = bsearch.le(colorLevels, zc)\r\n        var r, g, b, a\r\n        if (colorIdx < 0) {\r\n          r = colorValues[0]\r\n          g = colorValues[1]\r\n          b = colorValues[2]\r\n          a = colorValues[3]\r\n        } else if (colorIdx === colorCount - 1) {\r\n          r = colorValues[4 * colorCount - 4]\r\n          g = colorValues[4 * colorCount - 3]\r\n          b = colorValues[4 * colorCount - 2]\r\n          a = colorValues[4 * colorCount - 1]\r\n        } else {\r\n          var t = (zc - colorLevels[colorIdx]) /\r\n            (colorLevels[colorIdx + 1] - colorLevels[colorIdx])\r\n          var ti = 1.0 - t\r\n          var i0 = 4 * colorIdx\r\n          var i1 = 4 * (colorIdx + 1)\r\n          r = ti * colorValues[i0] + t * colorValues[i1]\r\n          g = ti * colorValues[i0 + 1] + t * colorValues[i1 + 1]\r\n          b = ti * colorValues[i0 + 2] + t * colorValues[i1 + 2]\r\n          a = ti * colorValues[i0 + 3] + t * colorValues[i1 + 3]\r\n        }\r\n\r\n        colors[4 * ptr] = 255 * r\r\n        colors[4 * ptr + 1] = 255 * g\r\n        colors[4 * ptr + 2] = 255 * b\r\n        colors[4 * ptr + 3] = 255 * a\r\n\r\n        positions[2*ptr] = xc0*.5 + xc1*.5;\r\n        positions[2*ptr+1] = yc0*.5 + yc1*.5;\r\n\r\n        weights[2*ptr] = dx;\r\n        weights[2*ptr+1] = dy;\r\n\r\n        ids[ptr] = j * numX + i\r\n\r\n        ptr += 1\r\n      }\r\n    }\r\n  }\r\n\r\n  this.positionBuffer.update(positions)\r\n  this.weightBuffer.update(weights)\r\n  this.colorBuffer.update(colors)\r\n  this.idBuffer.update(ids)\r\n\r\n  pool.free(positions)\r\n  pool.free(colors)\r\n  pool.free(weights)\r\n  pool.free(ids)\r\n}\r\n\r\nproto.dispose = function () {\r\n  this.shader.dispose()\r\n  this.pickShader.dispose()\r\n  this.positionBuffer.dispose()\r\n  this.weightBuffer.dispose()\r\n  this.colorBuffer.dispose()\r\n  this.idBuffer.dispose()\r\n  this.plot.removeObject(this)\r\n}\r\n\r\nfunction createHeatmap2D (plot, options) {\r\n  var gl = plot.gl\r\n\r\n  var shader = createShader(gl, shaders.vertex, shaders.fragment)\r\n  var pickShader = createShader(gl, shaders.pickVertex, shaders.pickFragment)\r\n\r\n  var positionBuffer = createBuffer(gl)\r\n  var weightBuffer   = createBuffer(gl)\r\n  var colorBuffer = createBuffer(gl)\r\n  var idBuffer = createBuffer(gl)\r\n\r\n  var heatmap = new GLHeatmap2D(\r\n    plot,\r\n    shader,\r\n    pickShader,\r\n    positionBuffer,\r\n    weightBuffer,\r\n    colorBuffer,\r\n    idBuffer)\r\n\r\n  heatmap.update(options)\r\n  plot.addObject(heatmap)\r\n\r\n  return heatmap\r\n}\r\n",null]}