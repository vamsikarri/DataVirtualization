{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/bar/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/bar/attributes.js","mtime":1529418310699},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar scatterAttrs = require('../scatter/attributes');\nvar colorAttributes = require('../../components/colorscale/color_attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar textFontAttrs = fontAttrs({\n    editType: 'calc',\n    arrayOk: true,\n    description: ''\n});\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\n\nvar markerLineWidth = extendFlat({},\n    scatterMarkerLineAttrs.width, { dflt: 0 });\n\nvar markerLine = extendFlat({\n    width: markerLineWidth,\n    editType: 'calc'\n}, colorAttributes('marker.line'));\n\nvar marker = extendFlat({\n    line: markerLine,\n    editType: 'calc'\n}, colorAttributes('marker'), {\n    showscale: scatterMarkerAttrs.showscale,\n    colorbar: colorbarAttrs,\n    opacity: {\n        valType: 'number',\n        arrayOk: true,\n        dflt: 1,\n        min: 0,\n        max: 1,\n        role: 'style',\n        editType: 'style',\n        description: 'Sets the opacity of the bars.'\n    }\n});\n\nmodule.exports = {\n    x: scatterAttrs.x,\n    x0: scatterAttrs.x0,\n    dx: scatterAttrs.dx,\n    y: scatterAttrs.y,\n    y0: scatterAttrs.y0,\n    dy: scatterAttrs.dy,\n\n    text: scatterAttrs.text,\n    hovertext: scatterAttrs.hovertext,\n\n    textposition: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['inside', 'outside', 'auto', 'none'],\n        dflt: 'none',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Specifies the location of the `text`.',\n            '*inside* positions `text` inside, next to the bar end',\n            '(rotated and scaled if needed).',\n            '*outside* positions `text` outside, next to the bar end',\n            '(scaled if needed).',\n            '*auto* positions `text` inside or outside',\n            'so that `text` size is maximized.'\n        ].join(' ')\n    },\n\n    textfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `text`.'\n    }),\n\n    insidetextfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `text` lying inside the bar.'\n    }),\n\n    outsidetextfont: extendFlat({}, textFontAttrs, {\n        description: 'Sets the font used for `text` lying outside the bar.'\n    }),\n\n    constraintext: {\n        valType: 'enumerated',\n        values: ['inside', 'outside', 'both', 'none'],\n        role: 'info',\n        dflt: 'both',\n        editType: 'calc',\n        description: [\n            'Constrain the size of text inside or outside a bar to be no',\n            'larger than the bar itself.'\n        ].join(' ')\n    },\n\n    cliponaxis: extendFlat({}, scatterAttrs.cliponaxis, {\n        description: [\n            'Determines whether the text nodes',\n            'are clipped about the subplot axes.',\n            'To show the text nodes above axis lines and tick labels,',\n            'make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.'\n        ].join(' ')\n    }),\n\n    orientation: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['v', 'h'],\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the orientation of the bars.',\n            'With *v* (*h*), the value of the each bar spans',\n            'along the vertical (horizontal).'\n        ].join(' ')\n    },\n\n    base: {\n        valType: 'any',\n        dflt: null,\n        arrayOk: true,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets where the bar base is drawn (in position axis units).',\n            'In *stack* or *relative* barmode,',\n            'traces that set *base* will be excluded',\n            'and drawn in *overlay* mode instead.'\n        ].join(' ')\n    },\n\n    offset: {\n        valType: 'number',\n        dflt: null,\n        arrayOk: true,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Shifts the position where the bar is drawn',\n            '(in position axis units).',\n            'In *group* barmode,',\n            'traces that set *offset* will be excluded',\n            'and drawn in *overlay* mode instead.'\n        ].join(' ')\n    },\n\n    width: {\n        valType: 'number',\n        dflt: null,\n        min: 0,\n        arrayOk: true,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the bar width (in position axis units).'\n        ].join(' ')\n    },\n\n    marker: marker,\n\n    selected: {\n        marker: {\n            opacity: scatterAttrs.selected.marker.opacity,\n            color: scatterAttrs.selected.marker.color,\n            editType: 'style'\n        },\n        textfont: scatterAttrs.selected.textfont,\n        editType: 'style'\n    },\n    unselected: {\n        marker: {\n            opacity: scatterAttrs.unselected.marker.opacity,\n            color: scatterAttrs.unselected.marker.color,\n            editType: 'style'\n        },\n        textfont: scatterAttrs.unselected.textfont,\n        editType: 'style'\n    },\n\n    r: scatterAttrs.r,\n    t: scatterAttrs.t,\n\n    _deprecated: {\n        bardir: {\n            valType: 'enumerated',\n            role: 'info',\n            editType: 'calc',\n            values: ['v', 'h'],\n            description: 'Renamed to `orientation`.'\n        }\n    }\n};\n",null]}