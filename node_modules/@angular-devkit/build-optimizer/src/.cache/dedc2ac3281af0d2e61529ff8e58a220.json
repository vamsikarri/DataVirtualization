{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-axes3d/lib/lines.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-axes3d/lib/lines.js","mtime":1529418308593},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports    = createLines\r\n\r\nvar createBuffer  = require('gl-buffer')\r\nvar createVAO     = require('gl-vao')\r\nvar createShader  = require('./shaders').line\r\n\r\nvar MAJOR_AXIS = [0,0,0]\r\nvar MINOR_AXIS = [0,0,0]\r\nvar SCREEN_AXIS = [0,0,0]\r\nvar OFFSET_VEC = [0,0,0]\r\nvar SHAPE = [1,1]\r\n\r\nfunction zeroVec(a) {\r\n  a[0] = a[1] = a[2] = 0\r\n  return a\r\n}\r\n\r\nfunction copyVec(a,b) {\r\n  a[0] = b[0]\r\n  a[1] = b[1]\r\n  a[2] = b[2]\r\n  return a\r\n}\r\n\r\nfunction Lines(gl, vertBuffer, vao, shader, tickCount, tickOffset, gridCount, gridOffset) {\r\n  this.gl         = gl\r\n  this.vertBuffer = vertBuffer\r\n  this.vao        = vao\r\n  this.shader     = shader\r\n  this.tickCount  = tickCount\r\n  this.tickOffset = tickOffset\r\n  this.gridCount  = gridCount\r\n  this.gridOffset = gridOffset\r\n}\r\n\r\nvar proto = Lines.prototype\r\n\r\nproto.bind = function(model, view, projection) {\r\n  this.shader.bind()\r\n  this.shader.uniforms.model = model\r\n  this.shader.uniforms.view = view\r\n  this.shader.uniforms.projection = projection\r\n\r\n  SHAPE[0] = this.gl.drawingBufferWidth\r\n  SHAPE[1] = this.gl.drawingBufferHeight\r\n\r\n  this.shader.uniforms.screenShape = SHAPE\r\n  this.vao.bind()\r\n}\r\n\r\nproto.unbind = function() {\r\n  this.vao.unbind()\r\n}\r\n\r\nproto.drawAxisLine = function(j, bounds, offset, color, lineWidth) {\r\n  var minorAxis = zeroVec(MINOR_AXIS)\r\n  this.shader.uniforms.majorAxis = MINOR_AXIS\r\n\r\n  minorAxis[j] = bounds[1][j] - bounds[0][j]\r\n  this.shader.uniforms.minorAxis = minorAxis\r\n\r\n  var noffset = copyVec(OFFSET_VEC, offset)\r\n  noffset[j] += bounds[0][j]\r\n  this.shader.uniforms.offset = noffset\r\n\r\n  this.shader.uniforms.lineWidth = lineWidth\r\n\r\n  this.shader.uniforms.color = color\r\n\r\n  var screenAxis = zeroVec(SCREEN_AXIS)\r\n  screenAxis[(j+2)%3] = 1\r\n  this.shader.uniforms.screenAxis = screenAxis\r\n  this.vao.draw(this.gl.TRIANGLES, 6)\r\n\r\n  var screenAxis = zeroVec(SCREEN_AXIS)\r\n  screenAxis[(j+1)%3] = 1\r\n  this.shader.uniforms.screenAxis = screenAxis\r\n  this.vao.draw(this.gl.TRIANGLES, 6)\r\n}\r\n\r\nproto.drawAxisTicks = function(j, offset, minorAxis, color, lineWidth) {\r\n  if(!this.tickCount[j]) {\r\n    return\r\n  }\r\n\r\n  var majorAxis = zeroVec(MAJOR_AXIS)\r\n  majorAxis[j]  = 1\r\n  this.shader.uniforms.majorAxis = majorAxis\r\n  this.shader.uniforms.offset    = offset\r\n  this.shader.uniforms.minorAxis = minorAxis\r\n  this.shader.uniforms.color     = color\r\n  this.shader.uniforms.lineWidth = lineWidth\r\n\r\n  var screenAxis = zeroVec(SCREEN_AXIS)\r\n  screenAxis[j] = 1\r\n  this.shader.uniforms.screenAxis = screenAxis\r\n  this.vao.draw(this.gl.TRIANGLES, this.tickCount[j], this.tickOffset[j])\r\n}\r\n\r\n\r\nproto.drawGrid = function(i, j, bounds, offset, color, lineWidth) {\r\n  if(!this.gridCount[i]) {\r\n    return\r\n  }\r\n\r\n  var minorAxis = zeroVec(MINOR_AXIS)\r\n  minorAxis[j]  = bounds[1][j] - bounds[0][j]\r\n  this.shader.uniforms.minorAxis = minorAxis\r\n\r\n  var noffset = copyVec(OFFSET_VEC, offset)\r\n  noffset[j] += bounds[0][j]\r\n  this.shader.uniforms.offset = noffset\r\n\r\n  var majorAxis = zeroVec(MAJOR_AXIS)\r\n  majorAxis[i]  = 1\r\n  this.shader.uniforms.majorAxis = majorAxis\r\n\r\n  var screenAxis = zeroVec(SCREEN_AXIS)\r\n  screenAxis[i] = 1\r\n  this.shader.uniforms.screenAxis = screenAxis\r\n  this.shader.uniforms.lineWidth = lineWidth\r\n\r\n  this.shader.uniforms.color = color\r\n  this.vao.draw(this.gl.TRIANGLES, this.gridCount[i], this.gridOffset[i])\r\n}\r\n\r\nproto.drawZero = function(j, i, bounds, offset, color, lineWidth) {\r\n  var minorAxis = zeroVec(MINOR_AXIS)\r\n  this.shader.uniforms.majorAxis = minorAxis\r\n\r\n  minorAxis[j] = bounds[1][j] - bounds[0][j]\r\n  this.shader.uniforms.minorAxis = minorAxis\r\n\r\n  var noffset = copyVec(OFFSET_VEC, offset)\r\n  noffset[j] += bounds[0][j]\r\n  this.shader.uniforms.offset = noffset\r\n\r\n  var screenAxis = zeroVec(SCREEN_AXIS)\r\n  screenAxis[i] = 1\r\n  this.shader.uniforms.screenAxis = screenAxis\r\n  this.shader.uniforms.lineWidth = lineWidth\r\n\r\n  this.shader.uniforms.color = color\r\n  this.vao.draw(this.gl.TRIANGLES, 6)\r\n}\r\n\r\nproto.dispose = function() {\r\n  this.vao.dispose()\r\n  this.vertBuffer.dispose()\r\n  this.shader.dispose()\r\n}\r\n\r\nfunction createLines(gl, bounds, ticks) {\r\n  var vertices    = []\r\n  var tickOffset  = [0,0,0]\r\n  var tickCount   = [0,0,0]\r\n\r\n  //Create grid lines for each axis/direction\r\n  var gridOffset = [0,0,0]\r\n  var gridCount  = [0,0,0]\r\n\r\n  //Add zero line\r\n  vertices.push(\r\n    0,0,1,   0,1,1,   0,0,-1,\r\n    0,0,-1,  0,1,1,   0,1,-1)\r\n\r\n  for(var i=0; i<3; ++i) {\r\n    //Axis tick marks\r\n    var start = ((vertices.length / 3)|0)\r\n    for(var j=0; j<ticks[i].length; ++j) {\r\n      var x = +ticks[i][j].x\r\n      vertices.push(\r\n        x,0,1,   x,1,1,   x,0,-1,\r\n        x,0,-1,  x,1,1,   x,1,-1)\r\n    }\r\n    var end = ((vertices.length / 3)|0)\r\n    tickOffset[i] = start\r\n    tickCount[i]  = end - start\r\n\r\n    //Grid lines\r\n    var start = ((vertices.length / 3)|0)\r\n    for(var k=0; k<ticks[i].length; ++k) {\r\n      var x = +ticks[i][k].x\r\n      vertices.push(\r\n        x,0,1,   x,1,1,   x,0,-1,\r\n        x,0,-1,  x,1,1,   x,1,-1)\r\n    }\r\n    var end = ((vertices.length / 3)|0)\r\n    gridOffset[i] = start\r\n    gridCount[i]  = end - start\r\n  }\r\n\r\n  //Create cube VAO\r\n  var vertBuf = createBuffer(gl, new Float32Array(vertices))\r\n  var vao = createVAO(gl, [\r\n    { \"buffer\": vertBuf,\r\n      \"type\": gl.FLOAT,\r\n      \"size\": 3,\r\n      \"stride\": 0,\r\n      \"offset\": 0\r\n    }\r\n  ])\r\n  var shader = createShader(gl)\r\n  shader.attributes.position.location = 0\r\n  return new Lines(gl, vertBuf, vao, shader, tickCount, tickOffset, gridCount, gridOffset)\r\n}\r\n",null]}