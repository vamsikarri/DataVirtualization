{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/splom/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/splom/defaults.js","mtime":1529418310746},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar attributes = require('./attributes');\nvar subTypes = require('../scatter/subtypes');\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\nvar OPEN_RE = /-open/;\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var dimLength = handleDimensionsDefaults(traceIn, traceOut);\n\n    var showDiag = coerce('diagonal.visible');\n    var showUpper = coerce('showupperhalf');\n    var showLower = coerce('showlowerhalf');\n\n    if(!dimLength || (!showDiag && !showUpper && !showLower)) {\n        traceOut.visible = false;\n        return;\n    }\n\n    coerce('text');\n\n    handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n\n    var isOpen = OPEN_RE.test(traceOut.marker.symbol);\n    var isBubble = subTypes.isBubble(traceOut);\n    coerce('marker.line.width', isOpen || isBubble ? 1 : 0);\n\n    handleAxisDefaults(traceIn, traceOut, layout, coerce);\n\n    Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};\n\nfunction handleDimensionsDefaults(traceIn, traceOut) {\n    var dimensionsIn = traceIn.dimensions;\n    if(!Array.isArray(dimensionsIn)) return 0;\n\n    var dimLength = dimensionsIn.length;\n    var commonLength = 0;\n    var dimensionsOut = traceOut.dimensions = new Array(dimLength);\n    var dimIn;\n    var dimOut;\n    var i;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(dimIn, dimOut, attributes.dimensions, attr, dflt);\n    }\n\n    for(i = 0; i < dimLength; i++) {\n        dimIn = dimensionsIn[i];\n        dimOut = dimensionsOut[i] = {};\n\n        // coerce label even if dimensions may be `visible: false`,\n        // to fill in axis title defaults\n        coerce('label');\n\n        // wait until plot step to filter out visible false dimensions\n        var visible = coerce('visible');\n        if(!visible) continue;\n\n        var values = coerce('values');\n        if(!values || !values.length) {\n            dimOut.visible = false;\n            continue;\n        }\n\n        commonLength = Math.max(commonLength, values.length);\n        dimOut._index = i;\n    }\n\n    for(i = 0; i < dimLength; i++) {\n        dimOut = dimensionsOut[i];\n        if(dimOut.visible) dimOut._length = commonLength;\n    }\n\n    traceOut._length = commonLength;\n\n    return dimensionsOut.length;\n}\n\nfunction handleAxisDefaults(traceIn, traceOut, layout, coerce) {\n    var dimensions = traceOut.dimensions;\n    var dimLength = dimensions.length;\n    var showUpper = traceOut.showupperhalf;\n    var showLower = traceOut.showlowerhalf;\n    var showDiag = traceOut.diagonal.visible;\n    var i, j;\n\n    // N.B. one less x axis AND one less y axis when hiding one half and the diagonal\n    var axDfltLength = !showDiag && (!showUpper || !showLower) ? dimLength - 1 : dimLength;\n\n    var xaxes = coerce('xaxes', fillAxisIdArray('x', axDfltLength));\n    var yaxes = coerce('yaxes', fillAxisIdArray('y', axDfltLength));\n\n    // to avoid costly indexOf\n    traceOut._xaxes = arrayToHashObject(xaxes);\n    traceOut._yaxes = arrayToHashObject(yaxes);\n\n    // allow users to under-specify number of axes\n    var axLength = Math.min(axDfltLength, xaxes.length, yaxes.length);\n\n    // fill in splom subplot keys\n    for(i = 0; i < axLength; i++) {\n        for(j = 0; j < axLength; j++) {\n            var id = [xaxes[i] + yaxes[j]];\n\n            if(i > j && showUpper) {\n                layout._splomSubplots[id] = 1;\n            } else if(i < j && showLower) {\n                layout._splomSubplots[id] = 1;\n            } else if(i === j && (showDiag || !showLower || !showUpper)) {\n                // need to include diagonal subplots when\n                // hiding one half and the diagonal\n                layout._splomSubplots[id] = 1;\n            }\n        }\n    }\n\n    // build list of [x,y] axis corresponding to each dimensions[i],\n    // very useful for passing options to regl-splom\n    var diag = traceOut._diag = new Array(dimLength);\n\n    // cases where showDiag and showLower or showUpper are false\n    // no special treatment as the xaxes and yaxes items no longer match\n    // the dimensions items 1-to-1\n    var xShift = !showDiag && !showLower ? -1 : 0;\n    var yShift = !showDiag && !showUpper ? -1 : 0;\n\n    for(i = 0; i < dimLength; i++) {\n        var dim = dimensions[i];\n        var xa = xaxes[i + xShift];\n        var ya = yaxes[i + yShift];\n\n        fillAxisStash(layout, xa, dim);\n        fillAxisStash(layout, ya, dim);\n\n        // note that some the entries here may be undefined\n        diag[i] = [xa, ya];\n    }\n\n    // when lower half is omitted, override grid default\n    // to make sure axes remain on the left/bottom of the plot area\n    if(!showLower) {\n        layout._splomGridDflt.xside = 'bottom';\n        layout._splomGridDflt.yside = 'left';\n    }\n}\n\nfunction fillAxisIdArray(axLetter, len) {\n    var out = new Array(len);\n\n    for(var i = 0; i < len; i++) {\n        out[i] = axLetter + (i ? i + 1 : '');\n    }\n\n    return out;\n}\n\nfunction fillAxisStash(layout, axId, dim) {\n    if(!axId) return;\n\n    var axLetter = axId.charAt(0);\n    var stash = layout._splomAxes[axLetter];\n\n    if(!(axId in stash)) {\n        stash[axId] = (dim || {}).label || '';\n    }\n}\n\nfunction arrayToHashObject(arr) {\n    var obj = {};\n    for(var i = 0; i < arr.length; i++) {\n        obj[arr[i]] = 1;\n    }\n    return obj;\n}\n",null]}