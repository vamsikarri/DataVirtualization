{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contour/colorbar.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contour/colorbar.js","mtime":1529418310711},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Plots = require('../../plots/plots');\nvar drawColorbar = require('../../components/colorbar/draw');\n\nvar makeColorMap = require('./make_color_map');\nvar endPlus = require('./end_plus');\n\n\nmodule.exports = function colorbar(gd, cd) {\n    var trace = cd[0].trace,\n        cbId = 'cb' + trace.uid;\n\n    gd._fullLayout._infolayer.selectAll('.' + cbId).remove();\n\n    if(!trace.showscale) {\n        Plots.autoMargin(gd, cbId);\n        return;\n    }\n\n    var cb = drawColorbar(gd, cbId);\n    cd[0].t.cb = cb;\n\n    var contours = trace.contours,\n        line = trace.line,\n        cs = contours.size || 1,\n        coloring = contours.coloring;\n\n    var colorMap = makeColorMap(trace, {isColorbar: true});\n\n    if(coloring === 'heatmap') {\n        cb.filllevels({\n            start: trace.zmin,\n            end: trace.zmax,\n            size: (trace.zmax - trace.zmin) / 254\n        });\n    }\n\n    cb.fillcolor((coloring === 'fill' || coloring === 'heatmap') ? colorMap : '')\n        .line({\n            color: coloring === 'lines' ? colorMap : line.color,\n            width: contours.showlines !== false ? line.width : 0,\n            dash: line.dash\n        })\n        .levels({\n            start: contours.start,\n            end: endPlus(contours),\n            size: cs\n        })\n        .options(trace.colorbar)();\n};\n",null]}