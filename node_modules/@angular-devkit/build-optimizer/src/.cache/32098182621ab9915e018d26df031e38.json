{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/box/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/box/calc.js","mtime":1529418310701},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar _ = Lib._;\nvar Axes = require('../../plots/cartesian/axes');\n\n// outlier definition based on http://www.physics.csbsju.edu/stats/box2.html\nmodule.exports = function calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var cd = [];\n\n    // N.B. violin reuses same Box.calc\n    var numKey = trace.type === 'violin' ? '_numViolins' : '_numBoxes';\n\n    var i;\n    var valAxis, valLetter;\n    var posAxis, posLetter;\n\n    if(trace.orientation === 'h') {\n        valAxis = xa;\n        valLetter = 'x';\n        posAxis = ya;\n        posLetter = 'y';\n    } else {\n        valAxis = ya;\n        valLetter = 'y';\n        posAxis = xa;\n        posLetter = 'x';\n    }\n\n    var val = valAxis.makeCalcdata(trace, valLetter);\n    var pos = getPos(trace, posLetter, posAxis, val, fullLayout[numKey]);\n\n    var dv = Lib.distinctVals(pos);\n    var posDistinct = dv.vals;\n    var dPos = dv.minDiff / 2;\n    var posBins = makeBins(posDistinct, dPos);\n\n    var pLen = posDistinct.length;\n    var ptsPerBin = initNestedArray(pLen);\n\n    // bin pts info per position bins\n    for(i = 0; i < trace._length; i++) {\n        var v = val[i];\n        if(!isNumeric(v)) continue;\n\n        var n = Lib.findBin(pos[i], posBins);\n        if(n >= 0 && n < pLen) {\n            var pt = {v: v, i: i};\n            arraysToCalcdata(pt, trace, i);\n            ptsPerBin[n].push(pt);\n        }\n    }\n\n    // build calcdata trace items, one item per distinct position\n    for(i = 0; i < pLen; i++) {\n        if(ptsPerBin[i].length > 0) {\n            var pts = ptsPerBin[i].sort(sortByVal);\n            var boxVals = pts.map(extractVal);\n            var bvLen = boxVals.length;\n\n            var cdi = {\n                pos: posDistinct[i],\n                pts: pts\n            };\n\n            cdi.min = boxVals[0];\n            cdi.max = boxVals[bvLen - 1];\n            cdi.mean = Lib.mean(boxVals, bvLen);\n            cdi.sd = Lib.stdev(boxVals, bvLen, cdi.mean);\n\n            // first quartile\n            cdi.q1 = Lib.interp(boxVals, 0.25);\n             // median\n            cdi.med = Lib.interp(boxVals, 0.5);\n            // third quartile\n            cdi.q3 = Lib.interp(boxVals, 0.75);\n\n            // lower and upper fences - last point inside\n            // 1.5 interquartile ranges from quartiles\n            cdi.lf = Math.min(\n                cdi.q1,\n                boxVals[Math.min(\n                    Lib.findBin(2.5 * cdi.q1 - 1.5 * cdi.q3, boxVals, true) + 1,\n                    bvLen - 1\n                )]\n            );\n            cdi.uf = Math.max(\n                cdi.q3,\n                boxVals[Math.max(\n                    Lib.findBin(2.5 * cdi.q3 - 1.5 * cdi.q1, boxVals),\n                    0\n                )]\n            );\n\n            // lower and upper outliers - 3 IQR out (don't clip to max/min,\n            // this is only for discriminating suspected & far outliers)\n            cdi.lo = 4 * cdi.q1 - 3 * cdi.q3;\n            cdi.uo = 4 * cdi.q3 - 3 * cdi.q1;\n\n\n            // lower and upper notches ~95% Confidence Intervals for median\n            var iqr = cdi.q3 - cdi.q1;\n            var mci = 1.57 * iqr / Math.sqrt(bvLen);\n            cdi.ln = cdi.med - mci;\n            cdi.un = cdi.med + mci;\n\n            cd.push(cdi);\n        }\n    }\n\n    calcSelection(cd, trace);\n    Axes.expand(valAxis, val, {padded: true});\n\n    if(cd.length > 0) {\n        cd[0].t = {\n            num: fullLayout[numKey],\n            dPos: dPos,\n            posLetter: posLetter,\n            valLetter: valLetter,\n            labels: {\n                med: _(gd, 'median:'),\n                min: _(gd, 'min:'),\n                q1: _(gd, 'q1:'),\n                q3: _(gd, 'q3:'),\n                max: _(gd, 'max:'),\n                mean: trace.boxmean === 'sd' ? _(gd, 'mean ± σ:') : _(gd, 'mean:'),\n                lf: _(gd, 'lower fence:'),\n                uf: _(gd, 'upper fence:')\n            }\n        };\n\n        fullLayout[numKey]++;\n        return cd;\n    } else {\n        return [{t: {empty: true}}];\n    }\n};\n\n// In vertical (horizontal) box plots:\n// if no x (y) data, use x0 (y0), or name\n// so if you want one box\n// per trace, set x0 (y0) to the x (y) value or category for this trace\n// (or set x (y) to a constant array matching y (x))\nfunction getPos(trace, posLetter, posAxis, val, num) {\n    if(posLetter in trace) {\n        return posAxis.makeCalcdata(trace, posLetter);\n    }\n\n    var pos0;\n\n    if(posLetter + '0' in trace) {\n        pos0 = trace[posLetter + '0'];\n    } else if('name' in trace && (\n        posAxis.type === 'category' || (\n            isNumeric(trace.name) &&\n            ['linear', 'log'].indexOf(posAxis.type) !== -1\n        ) || (\n            Lib.isDateTime(trace.name) &&\n            posAxis.type === 'date'\n        )\n    )) {\n        pos0 = trace.name;\n    } else {\n        pos0 = num;\n    }\n\n    var pos0c = posAxis.d2c(pos0, 0, trace[posLetter + 'calendar']);\n    return val.map(function() { return pos0c; });\n}\n\nfunction makeBins(x, dx) {\n    var len = x.length;\n    var bins = new Array(len + 1);\n\n    for(var i = 0; i < len; i++) {\n        bins[i] = x[i] - dx;\n    }\n    bins[len] = x[len - 1] + dx;\n\n    return bins;\n}\n\nfunction initNestedArray(len) {\n    var arr = new Array(len);\n    for(var i = 0; i < len; i++) {\n        arr[i] = [];\n    }\n    return arr;\n}\n\nfunction arraysToCalcdata(pt, trace, i) {\n    var trace2calc = {\n        text: 'tx'\n    };\n\n    for(var k in trace2calc) {\n        if(Array.isArray(trace[k])) {\n            pt[trace2calc[k]] = trace[k][i];\n        }\n    }\n}\n\nfunction calcSelection(cd, trace) {\n    if(Lib.isArrayOrTypedArray(trace.selectedpoints)) {\n        for(var i = 0; i < cd.length; i++) {\n            var pts = cd[i].pts || [];\n            var ptNumber2cdIndex = {};\n\n            for(var j = 0; j < pts.length; j++) {\n                ptNumber2cdIndex[pts[j].i] = j;\n            }\n\n            Lib.tagSelected(pts, trace, ptNumber2cdIndex);\n        }\n    }\n}\n\nfunction sortByVal(a, b) { return a.v - b.v; }\n\nfunction extractVal(o) { return o.v; }\n",null]}