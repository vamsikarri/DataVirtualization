{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/attributes.js","mtime":1529418310608},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nmodule.exports = {\n    zauto: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        impliedEdits: {zmin: undefined, zmax: undefined},\n        description: [\n            'Determines the whether or not the color domain is computed',\n            'with respect to the input data.'\n        ].join(' ')\n    },\n    zmin: {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: 'plot',\n        impliedEdits: {zauto: false},\n        description: 'Sets the lower bound of color domain.'\n    },\n    zmax: {\n        valType: 'number',\n        role: 'info',\n        dflt: null,\n        editType: 'plot',\n        impliedEdits: {zauto: false},\n        description: 'Sets the upper bound of color domain.'\n    },\n    colorscale: {\n        valType: 'colorscale',\n        role: 'style',\n        editType: 'calc',\n        impliedEdits: {autocolorscale: false},\n        description: [\n            'Sets the colorscale.',\n            'The colorscale must be an array containing',\n            'arrays mapping a normalized value to an',\n            'rgb, rgba, hex, hsl, hsv, or named color string.',\n            'At minimum, a mapping for the lowest (0) and highest (1)',\n            'values are required. For example,',\n            '`[[0, \\'rgb(0,0,255)\\', [1, \\'rgb(255,0,0)\\']]`.',\n            'To control the bounds of the colorscale in z space,',\n            'use zmin and zmax'\n        ].join(' ')\n    },\n    autocolorscale: {\n        valType: 'boolean',\n        role: 'style',\n        dflt: true,  // gets overrode in 'heatmap' & 'surface' for backwards comp.\n        editType: 'calc',\n        impliedEdits: {colorscale: undefined},\n        description: [\n            'Determines whether or not the colorscale is picked using the sign of',\n            'the input z values.'\n        ].join(' ')\n    },\n    reversescale: {\n        valType: 'boolean',\n        role: 'style',\n        dflt: false,\n        editType: 'calc',\n        description: 'Reverses the colorscale.'\n    },\n    showscale: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not a colorbar is displayed for this trace.'\n        ].join(' ')\n    }\n};\n",null]}