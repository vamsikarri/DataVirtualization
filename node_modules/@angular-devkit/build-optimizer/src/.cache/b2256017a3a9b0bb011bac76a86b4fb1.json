{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/lib/gl_format_color.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/lib/gl_format_color.js","mtime":1529418310673},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar tinycolor = require('tinycolor2');\nvar rgba = require('color-normalize');\n\nvar Colorscale = require('../components/colorscale');\nvar colorDflt = require('../components/color/attributes').defaultLine;\nvar isArrayOrTypedArray = require('./is_array').isArrayOrTypedArray;\n\nvar colorDfltRgba = rgba(colorDflt);\nvar opacityDflt = 1;\n\nfunction calculateColor(colorIn, opacityIn) {\n    var colorOut = colorIn;\n    colorOut[3] *= opacityIn;\n    return colorOut;\n}\n\nfunction validateColor(colorIn) {\n    if(isNumeric(colorIn)) return colorDfltRgba;\n\n    var colorOut = rgba(colorIn);\n\n    return colorOut.length ? colorOut : colorDfltRgba;\n}\n\nfunction validateOpacity(opacityIn) {\n    return isNumeric(opacityIn) ? opacityIn : opacityDflt;\n}\n\nfunction formatColor(containerIn, opacityIn, len) {\n    var colorIn = containerIn.color;\n    var isArrayColorIn = isArrayOrTypedArray(colorIn);\n    var isArrayOpacityIn = isArrayOrTypedArray(opacityIn);\n    var colorOut = [];\n\n    var sclFunc, getColor, getOpacity, colori, opacityi;\n\n    if(containerIn.colorscale !== undefined) {\n        sclFunc = Colorscale.makeColorScaleFunc(\n            Colorscale.extractScale(\n                containerIn.colorscale,\n                containerIn.cmin,\n                containerIn.cmax\n            )\n        );\n    }\n    else {\n        sclFunc = validateColor;\n    }\n\n    if(isArrayColorIn) {\n        getColor = function(c, i) {\n            // FIXME: there is double work, considering that sclFunc does the opposite\n            return c[i] === undefined ? colorDfltRgba : rgba(sclFunc(c[i]));\n        };\n    }\n    else getColor = validateColor;\n\n    if(isArrayOpacityIn) {\n        getOpacity = function(o, i) {\n            return o[i] === undefined ? opacityDflt : validateOpacity(o[i]);\n        };\n    }\n    else getOpacity = validateOpacity;\n\n    if(isArrayColorIn || isArrayOpacityIn) {\n        for(var i = 0; i < len; i++) {\n            colori = getColor(colorIn, i);\n            opacityi = getOpacity(opacityIn, i);\n            colorOut[i] = calculateColor(colori, opacityi);\n        }\n    }\n    else colorOut = calculateColor(rgba(colorIn), opacityIn);\n\n    return colorOut;\n}\n\nfunction parseColorScale(colorscale, alpha) {\n    if(alpha === undefined) alpha = 1;\n\n    return colorscale.map(function(elem) {\n        var index = elem[0];\n        var color = tinycolor(elem[1]);\n        var rgb = color.toRgb();\n        return {\n            index: index,\n            rgb: [rgb.r, rgb.g, rgb.b, alpha]\n        };\n    });\n}\n\nmodule.exports = {\n    formatColor: formatColor,\n    parseColorScale: parseColorScale\n};\n",null]}