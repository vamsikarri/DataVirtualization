{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/violin/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/violin/plot.js","mtime":1529418310750},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar Lib = require('../../lib');\nvar Drawing = require('../../components/drawing');\nvar boxPlot = require('../box/plot');\nvar linePoints = require('../scatter/line_points');\nvar helpers = require('./helpers');\n\nmodule.exports = function plot(gd, plotinfo, cd, violinLayer) {\n    var fullLayout = gd._fullLayout;\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    function makePath(pts) {\n        var segments = linePoints(pts, {\n            xaxis: xa,\n            yaxis: ya,\n            connectGaps: true,\n            baseTolerance: 0.75,\n            shape: 'spline',\n            simplify: true\n        });\n        return Drawing.smoothopen(segments[0], 1);\n    }\n\n    var traces = violinLayer.selectAll('g.trace.violins')\n        .data(cd, function(d) { return d[0].trace.uid; });\n\n    traces.enter().append('g')\n        .attr('class', 'trace violins');\n\n    traces.exit().remove();\n\n    traces.order();\n\n    traces.each(function(d) {\n        var cd0 = d[0];\n        var t = cd0.t;\n        var trace = cd0.trace;\n        var sel = d3.select(this);\n        if(!plotinfo.isRangePlot) cd0.node3 = sel;\n        var numViolins = fullLayout._numViolins;\n        var group = (fullLayout.violinmode === 'group' && numViolins > 1);\n        var groupFraction = 1 - fullLayout.violingap;\n        // violin max half width\n        var bdPos = t.bdPos = t.dPos * groupFraction * (1 - fullLayout.violingroupgap) / (group ? numViolins : 1);\n        // violin center offset\n        var bPos = t.bPos = group ? 2 * t.dPos * (-0.5 + (t.num + 0.5) / numViolins) * groupFraction : 0;\n        // half-width within which to accept hover for this violin\n        // always split the distance to the closest violin\n        t.wHover = t.dPos * (group ? groupFraction / numViolins : 1);\n\n        if(trace.visible !== true || t.empty) {\n            d3.select(this).remove();\n            return;\n        }\n\n        var valAxis = plotinfo[t.valLetter + 'axis'];\n        var posAxis = plotinfo[t.posLetter + 'axis'];\n        var hasBothSides = trace.side === 'both';\n        var hasPositiveSide = hasBothSides || trace.side === 'positive';\n        var hasNegativeSide = hasBothSides || trace.side === 'negative';\n        var hasBox = trace.box && trace.box.visible;\n        var hasMeanLine = trace.meanline && trace.meanline.visible;\n        var groupStats = fullLayout._violinScaleGroupStats[trace.scalegroup];\n\n        var violins = sel.selectAll('path.violin').data(Lib.identity);\n\n        violins.enter().append('path')\n            .style('vector-effect', 'non-scaling-stroke')\n            .attr('class', 'violin');\n\n        violins.exit().remove();\n\n        violins.each(function(d) {\n            var pathSel = d3.select(this);\n            var density = d.density;\n            var len = density.length;\n            var posCenter = d.pos + bPos;\n            var posCenterPx = posAxis.c2p(posCenter);\n            var scale;\n\n            switch(trace.scalemode) {\n                case 'width':\n                    scale = groupStats.maxWidth / bdPos;\n                    break;\n                case 'count':\n                    scale = (groupStats.maxWidth / bdPos) * (groupStats.maxCount / d.pts.length);\n                    break;\n            }\n\n            var pathPos, pathNeg, path;\n            var i, k, pts, pt;\n\n            if(hasPositiveSide) {\n                pts = new Array(len);\n                for(i = 0; i < len; i++) {\n                    pt = pts[i] = {};\n                    pt[t.posLetter] = posCenter + (density[i].v / scale);\n                    pt[t.valLetter] = density[i].t;\n                }\n                pathPos = makePath(pts);\n            }\n\n            if(hasNegativeSide) {\n                pts = new Array(len);\n                for(k = 0, i = len - 1; k < len; k++, i--) {\n                    pt = pts[k] = {};\n                    pt[t.posLetter] = posCenter - (density[i].v / scale);\n                    pt[t.valLetter] = density[i].t;\n                }\n                pathNeg = makePath(pts);\n            }\n\n            if(hasBothSides) {\n                path = pathPos + 'L' + pathNeg.substr(1) + 'Z';\n            }\n            else {\n                var startPt = [posCenterPx, valAxis.c2p(density[0].t)];\n                var endPt = [posCenterPx, valAxis.c2p(density[len - 1].t)];\n\n                if(trace.orientation === 'h') {\n                    startPt.reverse();\n                    endPt.reverse();\n                }\n\n                if(hasPositiveSide) {\n                    path = 'M' + startPt + 'L' + pathPos.substr(1) + 'L' + endPt;\n                } else {\n                    path = 'M' + endPt + 'L' + pathNeg.substr(1) + 'L' + startPt;\n                }\n            }\n            pathSel.attr('d', path);\n\n            // save a few things used in getPositionOnKdePath, getKdeValue\n            // on hover and for meanline draw block below\n            d.posCenterPx = posCenterPx;\n            d.posDensityScale = scale * bdPos;\n            d.path = pathSel.node();\n            d.pathLength = d.path.getTotalLength() / (hasBothSides ? 2 : 1);\n        });\n\n        if(hasBox) {\n            var boxWidth = trace.box.width;\n            var boxLineWidth = trace.box.line.width;\n            var bdPosScaled;\n            var bPosPxOffset;\n\n            if(hasBothSides) {\n                bdPosScaled = bdPos * boxWidth;\n                bPosPxOffset = 0;\n            } else if(hasPositiveSide) {\n                bdPosScaled = [0, bdPos * boxWidth / 2];\n                bPosPxOffset = -boxLineWidth;\n            } else {\n                bdPosScaled = [bdPos * boxWidth / 2, 0];\n                bPosPxOffset = boxLineWidth;\n            }\n\n            boxPlot.plotBoxAndWhiskers(sel, {pos: posAxis, val: valAxis}, trace, {\n                bPos: bPos,\n                bdPos: bdPosScaled,\n                bPosPxOffset: bPosPxOffset\n            });\n\n            // if both box and meanline are visible, show mean line inside box\n            if(hasMeanLine) {\n                boxPlot.plotBoxMean(sel, {pos: posAxis, val: valAxis}, trace, {\n                    bPos: bPos,\n                    bdPos: bdPosScaled,\n                    bPosPxOffset: bPosPxOffset\n                });\n            }\n        }\n        else {\n            if(hasMeanLine) {\n                var meanPaths = sel.selectAll('path.mean').data(Lib.identity);\n\n                meanPaths.enter().append('path')\n                    .attr('class', 'mean')\n                    .style({\n                        fill: 'none',\n                        'vector-effect': 'non-scaling-stroke'\n                    });\n\n                meanPaths.exit().remove();\n\n                meanPaths.each(function(d) {\n                    var v = valAxis.c2p(d.mean, true);\n                    var p = helpers.getPositionOnKdePath(d, trace, v);\n\n                    d3.select(this).attr('d',\n                        trace.orientation === 'h' ?\n                            'M' + v + ',' + p[0] + 'V' + p[1] :\n                            'M' + p[0] + ',' + v + 'H' + p[1]\n                    );\n                });\n            }\n        }\n\n        if(trace.points) {\n            boxPlot.plotPoints(sel, {x: xa, y: ya}, trace, t);\n        }\n    });\n};\n",null]}