{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contour/constants.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contour/constants.js","mtime":1529418310711},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\nmodule.exports = {\n    // some constants to help with marching squares algorithm\n    // where does the path start for each index?\n    BOTTOMSTART: [1, 9, 13, 104, 713],\n    TOPSTART: [4, 6, 7, 104, 713],\n    LEFTSTART: [8, 12, 14, 208, 1114],\n    RIGHTSTART: [2, 3, 11, 208, 1114],\n\n    // which way [dx,dy] do we leave a given index?\n    // saddles are already disambiguated\n    NEWDELTA: [\n        null, [-1, 0], [0, -1], [-1, 0],\n        [1, 0], null, [0, -1], [-1, 0],\n        [0, 1], [0, 1], null, [0, 1],\n        [1, 0], [1, 0], [0, -1]\n    ],\n\n    // for each saddle, the first index here is used\n    // for dx||dy<0, the second for dx||dy>0\n    CHOOSESADDLE: {\n        104: [4, 1],\n        208: [2, 8],\n        713: [7, 13],\n        1114: [11, 14]\n    },\n\n    // after one index has been used for a saddle, which do we\n    // substitute to be used up later?\n    SADDLEREMAINDER: {1: 4, 2: 8, 4: 1, 7: 13, 8: 2, 11: 14, 13: 7, 14: 11},\n\n    // length of a contour, as a multiple of the plot area diagonal, per label\n    LABELDISTANCE: 2,\n\n    // number of contour levels after which we start increasing the number of\n    // labels we draw. Many contours means they will generally be close\n    // together, so it will be harder to follow a long way to find a label\n    LABELINCREASE: 10,\n\n    // minimum length of a contour line, as a multiple of the label length,\n    // at which we draw *any* labels\n    LABELMIN: 3,\n\n    // max number of labels to draw on a single contour path, no matter how long\n    LABELMAX: 10,\n\n    // constants for the label position cost function\n    LABELOPTIMIZER: {\n        // weight given to edge proximity\n        EDGECOST: 1,\n        // weight given to the angle off horizontal\n        ANGLECOST: 1,\n        // weight given to distance from already-placed labels\n        NEIGHBORCOST: 5,\n        // cost multiplier for labels on the same level\n        SAMELEVELFACTOR: 10,\n        // minimum distance (as a multiple of the label length)\n        // for labels on the same level\n        SAMELEVELDISTANCE: 5,\n        // maximum cost before we won't even place the label\n        MAXCOST: 100,\n        // number of evenly spaced points to look at in the first\n        // iteration of the search\n        INITIALSEARCHPOINTS: 10,\n        // number of binary search iterations after the initial wide search\n        ITERATIONS: 5\n    }\n};\n",null]}