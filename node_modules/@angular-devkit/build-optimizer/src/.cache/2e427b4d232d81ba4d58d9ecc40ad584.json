{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/lib/text.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-plot2d/lib/text.js","mtime":1529418308658},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createTextElements\r\n\r\nvar createBuffer = require('gl-buffer')\r\nvar createShader = require('gl-shader')\r\nvar getText      = require('text-cache')\r\nvar bsearch      = require('binary-search-bounds')\r\nvar shaders      = require('./shaders')\r\n\r\nfunction TextElements(plot, vbo, shader) {\r\n  this.plot         = plot\r\n  this.vbo          = vbo\r\n  this.shader       = shader\r\n  this.tickOffset   = [[],[]]\r\n  this.tickX        = [[],[]]\r\n  this.labelOffset  = [0,0]\r\n  this.labelCount   = [0,0]\r\n}\r\n\r\nvar proto = TextElements.prototype\r\n\r\nproto.drawTicks = (function() {\r\n  var DATA_AXIS = [0,0]\r\n  var SCREEN_OFFSET = [0,0]\r\n  var ZERO_2 = [0,0]\r\n\r\n  return function(axis) {\r\n    var plot        = this.plot\r\n    var shader      = this.shader\r\n    var tickX       = this.tickX[axis]\r\n    var tickOffset  = this.tickOffset[axis]\r\n    var gl          = plot.gl\r\n    var viewBox     = plot.viewBox\r\n    var dataBox     = plot.dataBox\r\n    var screenBox   = plot.screenBox\r\n    var pixelRatio  = plot.pixelRatio\r\n    var tickEnable  = plot.tickEnable\r\n    var tickPad     = plot.tickPad\r\n    var textColor   = plot.tickColor\r\n    var textAngle   = plot.tickAngle\r\n    // todo check if this should be used (now unused)\r\n    // var tickLength  = plot.tickMarkLength\r\n\r\n    var labelEnable = plot.labelEnable\r\n    var labelPad    = plot.labelPad\r\n    var labelColor  = plot.labelColor\r\n    var labelAngle  = plot.labelAngle\r\n    var labelOffset = this.labelOffset[axis]\r\n    var labelCount  = this.labelCount[axis]\r\n\r\n    var start = bsearch.lt(tickX, dataBox[axis])\r\n    var end   = bsearch.le(tickX, dataBox[axis+2])\r\n\r\n    DATA_AXIS[0]    = DATA_AXIS[1] = 0\r\n    DATA_AXIS[axis] = 1\r\n\r\n    SCREEN_OFFSET[axis] = (viewBox[2+axis] + viewBox[axis]) / (screenBox[2+axis] - screenBox[axis]) - 1.0\r\n\r\n    var screenScale = 2.0 / screenBox[2+(axis^1)] - screenBox[axis^1]\r\n\r\n    SCREEN_OFFSET[axis^1] = screenScale * viewBox[axis^1] - 1.0\r\n    if(tickEnable[axis]) {\r\n      SCREEN_OFFSET[axis^1] -= screenScale * pixelRatio * tickPad[axis]\r\n      if(start < end && tickOffset[end] > tickOffset[start]) {\r\n        shader.uniforms.dataAxis     = DATA_AXIS\r\n        shader.uniforms.screenOffset = SCREEN_OFFSET\r\n        shader.uniforms.color        = textColor[axis]\r\n        shader.uniforms.angle        = textAngle[axis]\r\n        gl.drawArrays(\r\n          gl.TRIANGLES,\r\n          tickOffset[start],\r\n          tickOffset[end] - tickOffset[start])\r\n      }\r\n    }\r\n    if(labelEnable[axis] && labelCount) {\r\n      SCREEN_OFFSET[axis^1] -= screenScale * pixelRatio * labelPad[axis]\r\n      shader.uniforms.dataAxis     = ZERO_2\r\n      shader.uniforms.screenOffset = SCREEN_OFFSET\r\n      shader.uniforms.color        = labelColor[axis]\r\n      shader.uniforms.angle        = labelAngle[axis]\r\n      gl.drawArrays(\r\n        gl.TRIANGLES,\r\n        labelOffset,\r\n        labelCount)\r\n    }\r\n\r\n    SCREEN_OFFSET[axis^1] = screenScale * viewBox[2+(axis^1)] - 1.0\r\n    if(tickEnable[axis+2]) {\r\n      SCREEN_OFFSET[axis^1] += screenScale * pixelRatio * tickPad[axis+2]\r\n      if(start < end && tickOffset[end] > tickOffset[start]) {\r\n        shader.uniforms.dataAxis     = DATA_AXIS\r\n        shader.uniforms.screenOffset = SCREEN_OFFSET\r\n        shader.uniforms.color        = textColor[axis+2]\r\n        shader.uniforms.angle        = textAngle[axis+2]\r\n        gl.drawArrays(\r\n          gl.TRIANGLES,\r\n          tickOffset[start],\r\n          tickOffset[end] - tickOffset[start])\r\n      }\r\n    }\r\n    if(labelEnable[axis+2] && labelCount) {\r\n      SCREEN_OFFSET[axis^1] += screenScale * pixelRatio * labelPad[axis+2]\r\n      shader.uniforms.dataAxis     = ZERO_2\r\n      shader.uniforms.screenOffset = SCREEN_OFFSET\r\n      shader.uniforms.color        = labelColor[axis+2]\r\n      shader.uniforms.angle        = labelAngle[axis+2]\r\n      gl.drawArrays(\r\n        gl.TRIANGLES,\r\n        labelOffset,\r\n        labelCount)\r\n    }\r\n\r\n  }\r\n})()\r\n\r\nproto.drawTitle = (function() {\r\n  var DATA_AXIS = [0,0]\r\n  var SCREEN_OFFSET = [0,0]\r\n\r\n  return function() {\r\n    var plot        = this.plot\r\n    var shader      = this.shader\r\n    var gl          = plot.gl\r\n    var screenBox   = plot.screenBox\r\n    var titleCenter = plot.titleCenter\r\n    var titleAngle  = plot.titleAngle\r\n    var titleColor  = plot.titleColor\r\n    var pixelRatio  = plot.pixelRatio\r\n\r\n    if(!this.titleCount) {\r\n      return\r\n    }\r\n\r\n    for(var i=0; i<2; ++i) {\r\n      SCREEN_OFFSET[i] = 2.0 * (titleCenter[i]*pixelRatio - screenBox[i]) /\r\n        (screenBox[2+i] - screenBox[i]) - 1\r\n    }\r\n\r\n    shader.bind()\r\n    shader.uniforms.dataAxis      = DATA_AXIS\r\n    shader.uniforms.screenOffset  = SCREEN_OFFSET\r\n    shader.uniforms.angle         = titleAngle\r\n    shader.uniforms.color         = titleColor\r\n\r\n    gl.drawArrays(gl.TRIANGLES, this.titleOffset, this.titleCount)\r\n  }\r\n})()\r\n\r\nproto.bind = (function() {\r\n  var DATA_SHIFT = [0,0]\r\n  var DATA_SCALE = [0,0]\r\n  var TEXT_SCALE = [0,0]\r\n\r\n  return function() {\r\n    var plot      = this.plot\r\n    var shader    = this.shader\r\n    var bounds    = plot._tickBounds\r\n    var dataBox   = plot.dataBox\r\n    var screenBox = plot.screenBox\r\n    var viewBox   = plot.viewBox\r\n\r\n    shader.bind()\r\n\r\n    //Set up coordinate scaling uniforms\r\n    for(var i=0; i<2; ++i) {\r\n\r\n      var lo = bounds[i]\r\n      var hi = bounds[i+2]\r\n      var boundScale = hi - lo\r\n      var dataCenter  = 0.5 * (dataBox[i+2] + dataBox[i])\r\n      var dataWidth   = (dataBox[i+2] - dataBox[i])\r\n\r\n      var viewLo = viewBox[i]\r\n      var viewHi = viewBox[i+2]\r\n      var viewScale = viewHi - viewLo\r\n      var screenLo = screenBox[i]\r\n      var screenHi = screenBox[i+2]\r\n      var screenScale = screenHi - screenLo\r\n\r\n      DATA_SCALE[i] = 2.0 * boundScale / dataWidth * viewScale / screenScale\r\n      DATA_SHIFT[i] = 2.0 * (lo - dataCenter) / dataWidth * viewScale / screenScale\r\n    }\r\n\r\n    TEXT_SCALE[1] = 2.0 * plot.pixelRatio / (screenBox[3] - screenBox[1])\r\n    TEXT_SCALE[0] = TEXT_SCALE[1] * (screenBox[3] - screenBox[1]) / (screenBox[2] - screenBox[0])\r\n\r\n    shader.uniforms.dataScale = DATA_SCALE\r\n    shader.uniforms.dataShift = DATA_SHIFT\r\n    shader.uniforms.textScale = TEXT_SCALE\r\n\r\n    //Set attributes\r\n    this.vbo.bind()\r\n    shader.attributes.textCoordinate.pointer()\r\n  }\r\n})()\r\n\r\nproto.update = function(options) {\r\n  var vertices  = []\r\n  var axesTicks = options.ticks\r\n  var bounds    = options.bounds\r\n  var i, j, k, data, scale, dimension\r\n\r\n  for(dimension=0; dimension<2; ++dimension) {\r\n    var offsets = [Math.floor(vertices.length/3)], tickX = [-Infinity]\r\n\r\n    //Copy vertices over to buffer\r\n    var ticks = axesTicks[dimension]\r\n    for(i=0; i<ticks.length; ++i) {\r\n      var tick  = ticks[i]\r\n      var x     = tick.x\r\n      var text  = tick.text\r\n      var font  = tick.font || 'sans-serif'\r\n      scale = (tick.fontSize || 12)\r\n\r\n      var coordScale = 1.0 / (bounds[dimension+2] - bounds[dimension])\r\n      var coordShift = bounds[dimension]\r\n\r\n      var rows = text.split('\\n')\r\n      for(var r = 0; r < rows.length; r++) {\r\n        data = getText(font, rows[r]).data\r\n        for (j = 0; j < data.length; j += 2) {\r\n          vertices.push(\r\n              data[j] * scale,\r\n              -data[j + 1] * scale - r * scale * 1.2,\r\n              (x - coordShift) * coordScale)\r\n        }\r\n      }\r\n\r\n      offsets.push(Math.floor(vertices.length/3))\r\n      tickX.push(x)\r\n    }\r\n\r\n    this.tickOffset[dimension] = offsets\r\n    this.tickX[dimension] = tickX\r\n  }\r\n\r\n  //Add labels\r\n  for(dimension=0; dimension<2; ++dimension) {\r\n    this.labelOffset[dimension] = Math.floor(vertices.length/3)\r\n\r\n    data  = getText(options.labelFont[dimension], options.labels[dimension], { textAlign: 'center' }).data\r\n    scale = options.labelSize[dimension]\r\n    for(i=0; i<data.length; i+=2) {\r\n      vertices.push(data[i]*scale, -data[i+1]*scale, 0)\r\n    }\r\n\r\n    this.labelCount[dimension] =\r\n      Math.floor(vertices.length/3) - this.labelOffset[dimension]\r\n  }\r\n\r\n  //Add title\r\n  this.titleOffset = Math.floor(vertices.length/3)\r\n  data = getText(options.titleFont, options.title).data\r\n  scale = options.titleSize\r\n  for(i=0; i<data.length; i+=2) {\r\n    vertices.push(data[i]*scale, -data[i+1]*scale, 0)\r\n  }\r\n  this.titleCount = Math.floor(vertices.length/3) - this.titleOffset\r\n\r\n  //Upload new vertices\r\n  this.vbo.update(vertices)\r\n}\r\n\r\nproto.dispose = function() {\r\n  this.vbo.dispose()\r\n  this.shader.dispose()\r\n}\r\n\r\nfunction createTextElements(plot) {\r\n  var gl = plot.gl\r\n  var vbo = createBuffer(gl)\r\n  var shader = createShader(gl, shaders.textVert, shaders.textFrag)\r\n  var text = new TextElements(plot, vbo, shader)\r\n  return text\r\n}\r\n",null]}