{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/simplicial-complex-contour/lib/codegen.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/simplicial-complex-contour/lib/codegen.js","mtime":1529418311910},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\n\nmodule.exports = getPolygonizer\n\nvar pool = require('typedarray-pool')\nvar createMSTable = require('marching-simplex-table')\n\nvar CACHE = {}\n\nfunction createCellPolygonizer(d) {\n  var maxCellSize = 0\n  var tables = new Array(d+1)\n  tables[0] = [ [] ]\n  for(var i=1; i<=d; ++i) {\n    var tab = tables[i] = createMSTable(i)\n    for(var j=0; j<tab.length; ++j) {\n      maxCellSize = Math.max(maxCellSize, tab[i].length)\n    }\n  }\n\n  var code  = [\n  'function B(C,E,i,j){',\n    'var a=Math.min(i,j)|0,b=Math.max(i,j)|0,l=C[2*a],h=C[2*a+1];',\n    'while(l<h){',\n      'var m=(l+h)>>1,v=E[2*m+1];',\n      'if(v===b){return m}',\n      'if(b<v){h=m}else{l=m+1}',\n    '}',\n    'return l;',\n  '};',\n  'function getContour', d, 'd(F,E,C,S){',\n    'var n=F.length,R=[];',\n    'for(var i=0;i<n;++i){var c=F[i],l=c.length;'\n  ]\n\n  function generateCase(facets) {\n    if(facets.length <= 0) {\n      return\n    }\n    code.push('R.push(')\n    for(var i=0; i<facets.length; ++i) {\n      var facet = facets[i]\n      if(i > 0) {\n        code.push(',')\n      }\n      code.push('[')\n      for(var j=0; j<facet.length; ++j) {\n        var f = facet[j]\n        if(j > 0) {\n          code.push(',')\n        }\n        code.push('B(C,E,c[', f[0], '],c[', f[1], '])')\n      }\n      code.push(']')\n    }\n    code.push(');')\n  }\n\n  for(var i=d+1; i>1; --i) {\n    if(i < d+1) {\n      code.push('else ')\n    }\n    code.push('if(l===', i, '){')\n\n    //Generate mask\n    var maskStr = []\n    for(var j=0; j<i; ++j) {\n      maskStr.push('(S[c['+j+']]<<'+j+')')\n    }\n\n    //Perform table look up\n    code.push('var M=', maskStr.join('+'), \n      ';if(M===0||M===', (1<<i)-1, \n        '){continue}switch(M){')\n\n    var tab = tables[i-1]\n    for(var j=0; j<tab.length; ++j) {\n      code.push('case ', j, ':')\n      generateCase(tab[j])\n      code.push('break;')\n    }\n    code.push('}}')\n  }\n  code.push('}return R;};return getContour', d, 'd')\n\n  var proc = new Function('pool', code.join(''))\n  return proc(pool)\n}\n\nfunction getPolygonizer(d) {\n  var alg = CACHE[d]\n  if(!alg) {\n    alg = CACHE[d] = createCellPolygonizer(d) \n  }\n  return alg\n}",null]}