{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/layout/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/layout/defaults.js","mtime":1529418310697},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Color = require('../../../components/color');\n\nvar handleSubplotDefaults = require('../../subplot_defaults');\nvar layoutAttributes = require('./layout_attributes');\nvar handleAxisDefaults = require('./axis_defaults');\n\nvar axesNames = ['aaxis', 'baxis', 'caxis'];\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: 'ternary',\n        attributes: layoutAttributes,\n        handleDefaults: handleTernaryDefaults,\n        font: layoutOut.font,\n        paper_bgcolor: layoutOut.paper_bgcolor\n    });\n};\n\nfunction handleTernaryDefaults(ternaryLayoutIn, ternaryLayoutOut, coerce, options) {\n    var bgColor = coerce('bgcolor');\n    var sum = coerce('sum');\n    options.bgColor = Color.combine(bgColor, options.paper_bgcolor);\n    var axName, containerIn, containerOut;\n\n    // TODO: allow most (if not all) axis attributes to be set\n    // in the outer container and used as defaults in the individual axes?\n\n    for(var j = 0; j < axesNames.length; j++) {\n        axName = axesNames[j];\n        containerIn = ternaryLayoutIn[axName] || {};\n        containerOut = ternaryLayoutOut[axName] = {_name: axName, type: 'linear'};\n\n        handleAxisDefaults(containerIn, containerOut, options);\n    }\n\n    // if the min values contradict each other, set them all to default (0)\n    // and delete *all* the inputs so the user doesn't get confused later by\n    // changing one and having them all change.\n    var aaxis = ternaryLayoutOut.aaxis,\n        baxis = ternaryLayoutOut.baxis,\n        caxis = ternaryLayoutOut.caxis;\n    if(aaxis.min + baxis.min + caxis.min >= sum) {\n        aaxis.min = 0;\n        baxis.min = 0;\n        caxis.min = 0;\n        if(ternaryLayoutIn.aaxis) delete ternaryLayoutIn.aaxis.min;\n        if(ternaryLayoutIn.baxis) delete ternaryLayoutIn.baxis.min;\n        if(ternaryLayoutIn.caxis) delete ternaryLayoutIn.caxis.min;\n    }\n}\n",null]}