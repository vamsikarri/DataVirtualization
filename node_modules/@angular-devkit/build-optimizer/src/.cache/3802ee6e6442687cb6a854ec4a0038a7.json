{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/index.js","mtime":1529418310696},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Ternary = require('./ternary');\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\nvar counterRegex = require('../../lib').counterRegex;\nvar TERNARY = 'ternary';\n\nexports.name = TERNARY;\n\nexports.attr = 'subplot';\n\nexports.idRoot = TERNARY;\n\nexports.idRegex = exports.attrRegex = counterRegex(TERNARY);\n\nexports.attributes = require('./layout/attributes');\n\nexports.layoutAttributes = require('./layout/layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout/defaults');\n\nexports.plot = function plotTernary(gd) {\n    var fullLayout = gd._fullLayout;\n    var calcData = gd.calcdata;\n    var ternaryIds = fullLayout._subplots[TERNARY];\n\n    for(var i = 0; i < ternaryIds.length; i++) {\n        var ternaryId = ternaryIds[i],\n            ternaryCalcData = getSubplotCalcData(calcData, TERNARY, ternaryId),\n            ternary = fullLayout[ternaryId]._subplot;\n\n        // If ternary is not instantiated, create one!\n        if(!ternary) {\n            ternary = new Ternary({\n                id: ternaryId,\n                graphDiv: gd,\n                container: fullLayout._ternarylayer.node()\n            },\n                fullLayout\n            );\n\n            fullLayout[ternaryId]._subplot = ternary;\n        }\n\n        ternary.plot(ternaryCalcData, fullLayout, gd._promises);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldTernaryKeys = oldFullLayout._subplots[TERNARY] || [];\n\n    for(var i = 0; i < oldTernaryKeys.length; i++) {\n        var oldTernaryKey = oldTernaryKeys[i];\n        var oldTernary = oldFullLayout[oldTernaryKey]._subplot;\n\n        if(!newFullLayout[oldTernaryKey] && !!oldTernary) {\n            oldTernary.plotContainer.remove();\n            oldTernary.clipDef.remove();\n            oldTernary.clipDefRelative.remove();\n            oldTernary.layers['a-title'].remove();\n            oldTernary.layers['b-title'].remove();\n            oldTernary.layers['c-title'].remove();\n        }\n    }\n};\n",null]}