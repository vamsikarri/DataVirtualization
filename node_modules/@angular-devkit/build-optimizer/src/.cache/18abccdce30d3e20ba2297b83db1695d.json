{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/discworld.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/discworld.js","mtime":1529418312975},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nï»¿/* http://keith-wood.name/calendars.html\n   Discworld calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Discworld calendar - Unseen University version.\n    See also <a href=\"http://wiki.lspace.org/mediawiki/Discworld_calendar\">http://wiki.lspace.org/mediawiki/Discworld_calendar</a>\n    and <a href=\"http://discworld.wikia.com/wiki/Discworld_calendar\">http://discworld.wikia.com/wiki/Discworld_calendar</a>.\n    @class DiscworldCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction DiscworldCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nDiscworldCalendar.prototype = new main.baseCalendar;\n\nassign(DiscworldCalendar.prototype, {\n    /** The calendar name.\n        @memberof DiscworldCalendar */\n    name: 'Discworld',\n    /** Julian date of start of Discworld epoch: 1 January 0001 CE.\n        @memberof DiscworldCalendar */\n    jdEpoch: 1721425.5,\n    /** Days per month in a common year.\n        @memberof DiscworldCalendar */\n    daysPerMonth: [16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof DiscworldCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof DiscworldCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof DiscworldCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof DiscworldCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof DiscworldCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Discworld',\n            epochs: ['BUC', 'UC'],\n            monthNames: ['Ick', 'Offle', 'February', 'March', 'April', 'May', 'June',\n            'Grune', 'August', 'Spune', 'Sektober', 'Ember', 'December'],\n            monthNamesShort: ['Ick', 'Off', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Gru', 'Aug', 'Spu', 'Sek', 'Emb', 'Dec'],\n            dayNames: ['Sunday', 'Octeday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Oct', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Oc', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'yyyy/mm/dd',\n            firstDay: 2,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return false;\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return 13;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        return 400;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 8) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return this.daysPerMonth[date.month() - 1];\n    },\n\n    /** Retrieve the number of days in a week.\n        @memberof DiscworldCalendar\n        @return {number} The number of days. */\n    daysInWeek: function() {\n        return 8;\n    },\n\n    /** Retrieve the day of the week for a date.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The day of the week: 0 to number of days - 1.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfWeek: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return (date.day() + 1) % 8;\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        var dow = this.dayOfWeek(year, month, day);\n        return (dow >= 2 && dow <= 6);\n    },\n\n    /** Retrieve additional information about a date.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        return {century: centuries[Math.floor((date.year() - 1) / 100) + 1] || ''};\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof DiscworldCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day, main.local.invalidDate);\n        year = date.year() + (date.year() < 0 ? 1 : 0);\n        month = date.month();\n        day = date.day();\n        return day + (month > 1 ? 16 : 0) + (month > 2 ? (month - 2) * 32 : 0) +\n            (year - 1) * 400 + this.jdEpoch - 1;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof DiscworldCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        jd = Math.floor(jd + 0.5) - Math.floor(this.jdEpoch) - 1;\n        var year = Math.floor(jd / 400) + 1;\n        jd -= (year - 1) * 400;\n        jd += (jd > 15 ? 16 : 0);\n        var month = Math.floor(jd / 32) + 1;\n        var day = jd - (month - 1) * 32 + 1;\n        return this.newDate(year <= 0 ? year - 1 : year, month, day);\n    }\n});\n\n// Names of the centuries\nvar centuries = {\n    20: 'Fruitbat',\n    21: 'Anchovy'\n};\n\n// Discworld calendar implementation\nmain.calendars.discworld = DiscworldCalendar;\n\n",null]}