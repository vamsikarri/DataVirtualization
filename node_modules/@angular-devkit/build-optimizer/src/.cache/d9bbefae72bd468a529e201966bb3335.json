{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/nepali.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/calendars/nepali.js","mtime":1529418312977},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nï»¿/* http://keith-wood.name/calendars.html\n   Nepali calendar for jQuery v2.0.2.\n   Written by Artur Neumann (ict.projects{at}nepal.inf.org) April 2013.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar main = require('../main');\nvar assign = require('object-assign');\n\n\n/** Implementation of the Nepali civil calendar.\n    Based on the ideas from \n    <a href=\"http://codeissue.com/articles/a04e050dea7468f/algorithm-to-convert-english-date-to-nepali-date-using-c-net\">http://codeissue.com/articles/a04e050dea7468f/algorithm-to-convert-english-date-to-nepali-date-using-c-net</a>\n    and <a href=\"http://birenj2ee.blogspot.com/2011/04/nepali-calendar-in-java.html\">http://birenj2ee.blogspot.com/2011/04/nepali-calendar-in-java.html</a>\n    See also <a href=\"http://en.wikipedia.org/wiki/Nepali_calendar\">http://en.wikipedia.org/wiki/Nepali_calendar</a>\n    and <a href=\"https://en.wikipedia.org/wiki/Bikram_Samwat\">https://en.wikipedia.org/wiki/Bikram_Samwat</a>.\n    @class NepaliCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction NepaliCalendar(language) {\n    this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNepaliCalendar.prototype = new main.baseCalendar;\n\nassign(NepaliCalendar.prototype, {\n    /** The calendar name.\n        @memberof NepaliCalendar */\n    name: 'Nepali',\n    /** Julian date of start of Nepali epoch: 14 April 57 BCE.\n        @memberof NepaliCalendar */\n    jdEpoch: 1700709.5,\n    /** Days per month in a common year.\n        @memberof NepaliCalendar */\n    daysPerMonth: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n    /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof NepaliCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof NepaliCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof NepaliCalendar */\n    firstMonth: 1,\n    /** The minimum day number.\n        @memberof NepaliCalendar */\n    minDay: 1, \n    /** The number of days in the year.\n        @memberof NepaliCalendar */\n    daysPerYear: 365,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof NepaliCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Nepali',\n            epochs: ['BBS', 'ABS'],\n            monthNames: ['Baisakh', 'Jestha', 'Ashadh', 'Shrawan', 'Bhadra', 'Ashwin',\n            'Kartik', 'Mangsir', 'Paush', 'Mangh', 'Falgun', 'Chaitra'],\n            monthNamesShort: ['Bai', 'Je', 'As', 'Shra', 'Bha', 'Ash', 'Kar', 'Mang', 'Pau', 'Ma', 'Fal', 'Chai'],\n            dayNames: ['Aaitabaar', 'Sombaar', 'Manglbaar', 'Budhabaar', 'Bihibaar', 'Shukrabaar', 'Shanibaar'],\n            dayNamesShort: ['Aaita', 'Som', 'Mangl', 'Budha', 'Bihi', 'Shukra', 'Shani'],\n            dayNamesMin: ['Aai', 'So', 'Man', 'Bu', 'Bi', 'Shu', 'Sha'],\n            digits: null,\n            dateFormat: 'dd/mm/yyyy',\n            firstDay: 1,\n            isRTL: false\n        }\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        return this.daysInYear(year) !== this.daysPerYear;\n    },\n\n    /** Determine the week of the year for a date.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Sunday of this week starting on Sunday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(-checkDate.dayOfWeek(), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n        year = date.year();\n        if (typeof this.NEPALI_CALENDAR_DATA[year] === 'undefined') {\n            return this.daysPerYear;\n        }\n        var daysPerYear = 0;\n        for (var month_number = this.minMonth; month_number <= 12; month_number++) {\n            daysPerYear += this.NEPALI_CALENDAR_DATA[year][month_number];\n        }\n        return daysPerYear;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof NepaliCalendar\n        @param year {CDate|number| The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        if (year.year) {\n            month = year.month();\n            year = year.year();\n        }\n        this._validate(year, month, this.minDay, main.local.invalidMonth);\n        return (typeof this.NEPALI_CALENDAR_DATA[year] === 'undefined' ?\n            this.daysPerMonth[month - 1] : this.NEPALI_CALENDAR_DATA[year][month]);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return this.dayOfWeek(year, month, day) !== 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof NepaliCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(nepaliYear, nepaliMonth, nepaliDay) {\n        var date = this._validate(nepaliYear, nepaliMonth, nepaliDay, main.local.invalidDate);\n        nepaliYear = date.year();\n        nepaliMonth = date.month();\n        nepaliDay = date.day();\n        var gregorianCalendar = main.instance();\n        var gregorianDayOfYear = 0; // We will add all the days that went by since\n        // the 1st. January and then we can get the Gregorian Date\n        var nepaliMonthToCheck = nepaliMonth;\n        var nepaliYearToCheck = nepaliYear;\n        this._createMissingCalendarData(nepaliYear);\n        // Get the correct year\n        var gregorianYear = nepaliYear - (nepaliMonthToCheck > 9 || (nepaliMonthToCheck === 9 &&\n            nepaliDay >= this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0]) ? 56 : 57);\n        // First we add the amount of days in the actual Nepali month as the day of year in the\n        // Gregorian one because at least this days are gone since the 1st. Jan. \n        if (nepaliMonth !== 9) {\n            gregorianDayOfYear = nepaliDay;\n            nepaliMonthToCheck--;\n        }\n        // Now we loop throw all Nepali month and add the amount of days to gregorianDayOfYear \n        // we do this till we reach Paush (9th month). 1st. January always falls in this month  \n        while (nepaliMonthToCheck !== 9) {\n            if (nepaliMonthToCheck <= 0) {\n                nepaliMonthToCheck = 12;\n                nepaliYearToCheck--;\n            }                \n            gregorianDayOfYear += this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][nepaliMonthToCheck];\n            nepaliMonthToCheck--;\n        }        \n        // If the date that has to be converted is in Paush (month no. 9) we have to do some other calculation\n        if (nepaliMonth === 9) {\n            // Add the days that are passed since the first day of Paush and substract the\n            // amount of days that lie between 1st. Jan and 1st Paush\n            gregorianDayOfYear += nepaliDay - this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0];\n            // For the first days of Paush we are now in negative values,\n            // because in the end of the gregorian year we substract\n            // 365 / 366 days (P.S. remember math in school + - gives -)\n            if (gregorianDayOfYear < 0) {\n                gregorianDayOfYear += gregorianCalendar.daysInYear(gregorianYear);\n            }\n        }\n        else {\n            gregorianDayOfYear += this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][9] -\n                this.NEPALI_CALENDAR_DATA[nepaliYearToCheck][0];\n        }        \n        return gregorianCalendar.newDate(gregorianYear, 1 ,1).add(gregorianDayOfYear, 'd').toJD();\n    },\n    \n    /** Create a new date from a Julian date.\n        @memberof NepaliCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        var gregorianCalendar =  main.instance();\n        var gregorianDate = gregorianCalendar.fromJD(jd);\n        var gregorianYear = gregorianDate.year();\n        var gregorianDayOfYear = gregorianDate.dayOfYear();\n        var nepaliYear = gregorianYear + 56; //this is not final, it could be also +57 but +56 is always true for 1st Jan.\n        this._createMissingCalendarData(nepaliYear);\n        var nepaliMonth = 9; // Jan 1 always fall in Nepali month Paush which is the 9th month of Nepali calendar.\n        // Get the Nepali day in Paush (month 9) of 1st January \n        var dayOfFirstJanInPaush = this.NEPALI_CALENDAR_DATA[nepaliYear][0];\n        // Check how many days are left of Paush .\n        // Days calculated from 1st Jan till the end of the actual Nepali month, \n        // we use this value to check if the gregorian Date is in the actual Nepali month.\n        var daysSinceJanFirstToEndOfNepaliMonth =\n            this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth] - dayOfFirstJanInPaush + 1;\n        // If the gregorian day-of-year is smaller o equal than the sum of days between the 1st January and \n        // the end of the actual nepali month we found the correct nepali month.\n        // Example: \n        // The 4th February 2011 is the gregorianDayOfYear 35 (31 days of January + 4)\n        // 1st January 2011 is in the nepali year 2067, where 1st. January is in the 17th day of Paush (9th month)\n        // In 2067 Paush has 30days, This means (30-17+1=14) there are 14days between 1st January and end of Paush \n        // (including 17th January)\n        // The gregorianDayOfYear (35) is bigger than 14, so we check the next month\n        // The next nepali month (Mangh) has 29 days \n        // 29+14=43, this is bigger than gregorianDayOfYear(35) so, we found the correct nepali month\n        while (gregorianDayOfYear > daysSinceJanFirstToEndOfNepaliMonth) {\n            nepaliMonth++;\n            if (nepaliMonth > 12) {\n                nepaliMonth = 1;\n                nepaliYear++;\n            }    \n            daysSinceJanFirstToEndOfNepaliMonth += this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth];\n        }\n        // The last step is to calculate the nepali day-of-month\n        // to continue our example from before:\n        // we calculated there are 43 days from 1st. January (17 Paush) till end of Mangh (29 days)\n        // when we subtract from this 43 days the day-of-year of the the Gregorian date (35),\n        // we know how far the searched day is away from the end of the Nepali month.\n        // So we simply subtract this number from the amount of days in this month (30) \n        var nepaliDayOfMonth = this.NEPALI_CALENDAR_DATA[nepaliYear][nepaliMonth] -\n            (daysSinceJanFirstToEndOfNepaliMonth - gregorianDayOfYear);        \n        return this.newDate(nepaliYear, nepaliMonth, nepaliDayOfMonth);\n    },\n    \n    /** Creates missing data in the NEPALI_CALENDAR_DATA table.\n        This data will not be correct but just give an estimated result. Mostly -/+ 1 day\n        @private\n        @param nepaliYear {number} The missing year number. */\n    _createMissingCalendarData: function(nepaliYear) {\n        var tmp_calendar_data = this.daysPerMonth.slice(0);\n        tmp_calendar_data.unshift(17);\n        for (var nepaliYearToCreate = (nepaliYear - 1); nepaliYearToCreate < (nepaliYear + 2); nepaliYearToCreate++) {\n            if (typeof this.NEPALI_CALENDAR_DATA[nepaliYearToCreate] === 'undefined') {\n                this.NEPALI_CALENDAR_DATA[nepaliYearToCreate] = tmp_calendar_data;\n            }\n        }\n    },\n    \n    NEPALI_CALENDAR_DATA:  {\n        // These data are from http://www.ashesh.com.np\n        1970: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1971: [18, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n        1972: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        1973: [19, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        1974: [19, 31, 31, 32, 30, 31, 31, 30, 29, 30, 29, 30, 30],\n        1975: [18, 31, 31, 32, 32, 30, 31, 30, 29, 30, 29, 30, 30],\n        1976: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1977: [18, 31, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n        1978: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1979: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        1980: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1981: [18, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        1982: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1983: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        1984: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1985: [18, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        1986: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1987: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        1988: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        1989: [18, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        1990: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1991: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],    \n        // These data are from http://nepalicalendar.rat32.com/index.php\n        1992: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        1993: [18, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        1994: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1995: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        1996: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        1997: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1998: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        1999: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2000: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2001: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2002: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2003: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2004: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2005: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2006: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2007: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2008: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n        2009: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2010: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2011: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2012: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2013: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2014: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2015: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2016: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2017: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2018: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2019: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2020: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2021: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2022: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2023: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2024: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2025: [18, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2026: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2027: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2028: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2029: [18, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n        2030: [17, 31, 32, 31, 32, 31, 30, 30, 30, 30, 30, 30, 31],\n        2031: [17, 31, 32, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31],\n        2032: [17, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n        2033: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2034: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2035: [17, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n        2036: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2037: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2038: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2039: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2040: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2041: [18, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2042: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2043: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2044: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2045: [18, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2046: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2047: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2048: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2049: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2050: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2051: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2052: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2053: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2054: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2055: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 29, 30],\n        2056: [17, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],\n        2057: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2058: [17, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2059: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2060: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2061: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2062: [17, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],\n        2063: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2064: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2065: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2066: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],\n        2067: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2068: [17, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2069: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2070: [17, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],\n        2071: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2072: [17, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2073: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],\n        2074: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2075: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2076: [16, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        2077: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],\n        2078: [17, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],\n        2079: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],\n        2080: [16, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],\n        // These data are from http://www.ashesh.com.np/nepali-calendar/\n        2081: [17, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2082: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2083: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n        2084: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n        2085: [17, 31, 32, 31, 32, 31, 31, 30, 30, 29, 30, 30, 30],\n        2086: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2087: [16, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n        2088: [16, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],\n        2089: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2090: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2091: [16, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],\n        2092: [16, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2093: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2094: [17, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],\n        2095: [17, 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],\n        2096: [17, 30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],\n        2097: [17, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],\n        2098: [17, 31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 30, 31],\n        2099: [17, 31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30],\n        2100: [17, 31, 32, 31, 32, 30, 31, 30, 29, 30, 29, 30, 30]    \n    }\n});    \n\n// Nepali calendar implementation\nmain.calendars.nepali = NepaliCalendar;\n\n",null]}