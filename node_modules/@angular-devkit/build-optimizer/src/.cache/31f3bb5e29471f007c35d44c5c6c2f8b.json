{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/defaults.js","mtime":1529418310608},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar hasColorbar = require('../colorbar/has_colorbar');\nvar colorbarDefaults = require('../colorbar/defaults');\nvar isValidScale = require('./is_valid_scale');\nvar flipScale = require('./flip_scale');\n\n\nmodule.exports = function colorScaleDefaults(traceIn, traceOut, layout, coerce, opts) {\n    var prefix = opts.prefix,\n        cLetter = opts.cLetter,\n        containerStr = prefix.slice(0, prefix.length - 1),\n        containerIn = prefix ?\n            Lib.nestedProperty(traceIn, containerStr).get() || {} :\n            traceIn,\n        containerOut = prefix ?\n            Lib.nestedProperty(traceOut, containerStr).get() || {} :\n            traceOut,\n        minIn = containerIn[cLetter + 'min'],\n        maxIn = containerIn[cLetter + 'max'],\n        sclIn = containerIn.colorscale;\n\n    var validMinMax = isNumeric(minIn) && isNumeric(maxIn) && (minIn < maxIn);\n    coerce(prefix + cLetter + 'auto', !validMinMax);\n    coerce(prefix + cLetter + 'min');\n    coerce(prefix + cLetter + 'max');\n\n    // handles both the trace case (autocolorscale is false by default) and\n    // the marker and marker.line case (autocolorscale is true by default)\n    var autoColorscaleDftl;\n    if(sclIn !== undefined) autoColorscaleDftl = !isValidScale(sclIn);\n    coerce(prefix + 'autocolorscale', autoColorscaleDftl);\n    var sclOut = coerce(prefix + 'colorscale');\n\n    // reversescale is handled at the containerOut level\n    var reverseScale = coerce(prefix + 'reversescale');\n    if(reverseScale) containerOut.colorscale = flipScale(sclOut);\n\n    // ... until Scatter.colorbar can handle marker line colorbars\n    if(prefix === 'marker.line.') return;\n\n    // handle both the trace case where the dflt is listed in attributes and\n    // the marker case where the dflt is determined by hasColorbar\n    var showScaleDftl;\n    if(prefix) showScaleDftl = hasColorbar(containerIn);\n    var showScale = coerce(prefix + 'showscale', showScaleDftl);\n\n    if(showScale) colorbarDefaults(containerIn, containerOut, layout);\n};\n",null]}