{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/splom/base_plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/splom/base_plot.js","mtime":1529418310746},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar createLine = require('regl-line2d');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar Cartesian = require('../../plots/cartesian');\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\n\nvar SPLOM = 'splom';\n\nfunction plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var _module = Registry.getModule(SPLOM);\n    var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n\n    prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint']);\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        drawGrid(gd);\n    }\n\n    _module.plot(gd, {}, splomCalcData);\n}\n\nfunction drag(gd) {\n    var cd = gd.calcdata;\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        drawGrid(gd);\n    }\n\n    for(var i = 0; i < cd.length; i++) {\n        var cd0 = cd[i][0];\n        var trace = cd0.trace;\n        var scene = cd0.t._scene;\n\n        if(trace.type === 'splom' && scene && scene.matrix) {\n            dragOne(gd, trace, scene);\n        }\n    }\n}\n\nfunction dragOne(gd, trace, scene) {\n    var dimensions = trace.dimensions;\n    var visibleLength = scene.matrixOptions.data.length;\n    var ranges = new Array(visibleLength);\n\n    for(var i = 0, k = 0; i < dimensions.length; i++) {\n        if(dimensions[i].visible) {\n            var rng = ranges[k] = new Array(4);\n\n            var xa = AxisIDs.getFromId(gd, trace._diag[i][0]);\n            if(xa) {\n                rng[0] = xa.r2l(xa.range[0]);\n                rng[2] = xa.r2l(xa.range[1]);\n            }\n\n            var ya = AxisIDs.getFromId(gd, trace._diag[i][1]);\n            if(ya) {\n                rng[1] = ya.r2l(ya.range[0]);\n                rng[3] = ya.r2l(ya.range[1]);\n            }\n\n            k++;\n        }\n    }\n\n    if(scene.selectBatch) {\n        scene.matrix.update({ranges: ranges}, {ranges: ranges});\n        scene.matrix.draw(scene.unselectBatch, scene.selectBatch);\n    } else {\n        scene.matrix.update({ranges: ranges});\n        scene.matrix.draw();\n    }\n}\n\nfunction drawGrid(gd) {\n    var fullLayout = gd._fullLayout;\n    var regl = fullLayout._glcanvas.data()[0].regl;\n    var splomGrid = fullLayout._splomGrid;\n\n    if(!splomGrid) {\n        splomGrid = fullLayout._splomGrid = createLine(regl);\n    }\n\n    splomGrid.update(makeGridData(gd));\n    splomGrid.draw();\n}\n\nfunction makeGridData(gd) {\n    var fullLayout = gd._fullLayout;\n    var gs = fullLayout._size;\n    var fullView = [0, 0, fullLayout.width, fullLayout.height];\n    var lookup = {};\n    var k;\n\n    function push(prefix, ax, x0, x1, y0, y1) {\n        var lcolor = ax[prefix + 'color'];\n        var lwidth = ax[prefix + 'width'];\n        var key = String(lcolor + lwidth);\n\n        if(key in lookup) {\n            lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n        } else {\n            lookup[key] = {\n                data: [x0, x1, y0, y1],\n                join: 'rect',\n                thickness: lwidth,\n                color: lcolor,\n                viewport: fullView,\n                range: fullView,\n                overlay: false\n            };\n        }\n    }\n\n    for(k in fullLayout._splomSubplots) {\n        var sp = fullLayout._plots[k];\n        var xa = sp.xaxis;\n        var ya = sp.yaxis;\n        var xVals = xa._vals;\n        var yVals = ya._vals;\n        // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n        // we need to compute bottom-to-top offsets and slopes:\n        var yOffset = gs.b + ya.domain[0] * gs.h;\n        var ym = -ya._m;\n        var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n        var x, y;\n\n        if(xa.showgrid) {\n            for(k = 0; k < xVals.length; k++) {\n                x = xa._offset + xa.l2p(xVals[k].x);\n                push('grid', xa, x, yOffset, x, yOffset + ya._length);\n            }\n        }\n        if(showZeroLine(xa)) {\n            x = xa._offset + xa.l2p(0);\n            push('zeroline', xa, x, yOffset, x, yOffset + ya._length);\n        }\n        if(ya.showgrid) {\n            for(k = 0; k < yVals.length; k++) {\n                y = yOffset + yb + ym * yVals[k].x;\n                push('grid', ya, xa._offset, y, xa._offset + xa._length, y);\n            }\n        }\n        if(showZeroLine(ya)) {\n            y = yOffset + yb + 0;\n            push('zeroline', ya, xa._offset, y, xa._offset + xa._length, y);\n        }\n    }\n\n    var gridBatches = [];\n    for(k in lookup) {\n        gridBatches.push(lookup[k]);\n    }\n\n    return gridBatches;\n}\n\n// just like in Axes.doTicks but without the loop over traces\nfunction showZeroLine(ax) {\n    var rng = Lib.simpleMap(ax.range, ax.r2l);\n    var p0 = ax.l2p(0);\n\n    return (\n        ax.zeroline &&\n        ax._vals && ax._vals.length &&\n        (rng[0] * rng[1] <= 0) &&\n        (ax.type === 'linear' || ax.type === '-') &&\n        ((p0 > 1 && p0 < ax._length - 1) || !ax.showline)\n    );\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout, oldCalcdata) {\n    var oldModules = oldFullLayout._modules || [];\n    var newModules = newFullLayout._modules || [];\n\n    var hadSplom, hasSplom;\n    var i;\n\n    for(i = 0; i < oldModules.length; i++) {\n        if(oldModules[i].name === 'splom') {\n            hadSplom = true;\n            break;\n        }\n    }\n    for(i = 0; i < newModules.length; i++) {\n        if(newModules[i].name === 'splom') {\n            hasSplom = true;\n            break;\n        }\n    }\n\n    if(hadSplom && !hasSplom) {\n        for(i = 0; i < oldCalcdata.length; i++) {\n            var cd0 = oldCalcdata[i][0];\n            var trace = cd0.trace;\n            var scene = cd0.t._scene;\n\n            if(trace.type === 'splom' && scene && scene.matrix) {\n                scene.matrix.destroy();\n                cd0.t._scene = null;\n            }\n        }\n    }\n\n    if(oldFullLayout._splomGrid &&\n        (!newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms)) {\n        oldFullLayout._splomGrid.destroy();\n        oldFullLayout._splomGrid = null;\n    }\n\n    Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\n\nmodule.exports = {\n    name: SPLOM,\n    attr: Cartesian.attr,\n    attrRegex: Cartesian.attrRegex,\n    layoutAttributes: Cartesian.layoutAttributes,\n    supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n    drawFramework: Cartesian.drawFramework,\n    plot: plot,\n    drag: drag,\n    clean: clean,\n    updateFx: Cartesian.updateFx,\n    toSVG: Cartesian.toSVG\n};\n",null]}