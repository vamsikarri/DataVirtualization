{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-line3d/lines.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/gl-line3d/lines.js","mtime":1529418308635},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["'use strict'\r\n\r\nmodule.exports = createLinePlot\r\n\r\nvar createBuffer = require('gl-buffer')\r\nvar createVAO = require('gl-vao')\r\nvar createTexture = require('gl-texture2d')\r\nvar unpackFloat = require('glsl-read-float')\r\nvar bsearch = require('binary-search-bounds')\r\nvar ndarray = require('ndarray')\r\nvar shaders = require('./lib/shaders')\r\n\r\nvar createShader = shaders.createShader\r\nvar createPickShader = shaders.createPickShader\r\n\r\nvar identity = [1, 0, 0, 0,\r\n  0, 1, 0, 0,\r\n  0, 0, 1, 0,\r\n  0, 0, 0, 1]\r\n\r\nfunction distance (a, b) {\r\n  var s = 0.0\r\n  for (var i = 0; i < 3; ++i) {\r\n    var d = a[i] - b[i]\r\n    s += d * d\r\n  }\r\n  return Math.sqrt(s)\r\n}\r\n\r\nfunction filterClipBounds (bounds) {\r\n  var result = [[-1e6, -1e6, -1e6], [1e6, 1e6, 1e6]]\r\n  for (var i = 0; i < 3; ++i) {\r\n    result[0][i] = Math.max(bounds[0][i], result[0][i])\r\n    result[1][i] = Math.min(bounds[1][i], result[1][i])\r\n  }\r\n  return result\r\n}\r\n\r\nfunction PickResult (tau, position, index, dataCoordinate) {\r\n  this.arcLength = tau\r\n  this.position = position\r\n  this.index = index\r\n  this.dataCoordinate = dataCoordinate\r\n}\r\n\r\nfunction LinePlot (gl, shader, pickShader, buffer, vao, texture) {\r\n  this.gl = gl\r\n  this.shader = shader\r\n  this.pickShader = pickShader\r\n  this.buffer = buffer\r\n  this.vao = vao\r\n  this.clipBounds = [\r\n    [ -Infinity, -Infinity, -Infinity ],\r\n    [ Infinity, Infinity, Infinity ]]\r\n  this.points = []\r\n  this.arcLength = []\r\n  this.vertexCount = 0\r\n  this.bounds = [[0, 0, 0], [0, 0, 0]]\r\n  this.pickId = 0\r\n  this.lineWidth = 1\r\n  this.texture = texture\r\n  this.dashScale = 1\r\n  this.opacity = 1\r\n  this.dirty = true\r\n  this.pixelRatio = 1\r\n}\r\n\r\nvar proto = LinePlot.prototype\r\n\r\nproto.isTransparent = function () {\r\n  return this.opacity < 1\r\n}\r\n\r\nproto.isOpaque = function () {\r\n  return this.opacity >= 1\r\n}\r\n\r\nproto.pickSlots = 1\r\n\r\nproto.setPickBase = function (id) {\r\n  this.pickId = id\r\n}\r\n\r\nproto.drawTransparent = proto.draw = function (camera) {\r\n  var gl = this.gl\r\n  var shader = this.shader\r\n  var vao = this.vao\r\n  shader.bind()\r\n  shader.uniforms = {\r\n    model: camera.model || identity,\r\n    view: camera.view || identity,\r\n    projection: camera.projection || identity,\r\n    clipBounds: filterClipBounds(this.clipBounds),\r\n    dashTexture: this.texture.bind(),\r\n    dashScale: this.dashScale / this.arcLength[this.arcLength.length - 1],\r\n    opacity: this.opacity,\r\n    screenShape: [gl.drawingBufferWidth, gl.drawingBufferHeight],\r\n    pixelRatio: this.pixelRatio\r\n  }\r\n  vao.bind()\r\n  vao.draw(gl.TRIANGLE_STRIP, this.vertexCount)\r\n  vao.unbind()\r\n}\r\n\r\nproto.drawPick = function (camera) {\r\n  var gl = this.gl\r\n  var shader = this.pickShader\r\n  var vao = this.vao\r\n  shader.bind()\r\n  shader.uniforms = {\r\n    model: camera.model || identity,\r\n    view: camera.view || identity,\r\n    projection: camera.projection || identity,\r\n    pickId: this.pickId,\r\n    clipBounds: filterClipBounds(this.clipBounds),\r\n    screenShape: [gl.drawingBufferWidth, gl.drawingBufferHeight],\r\n    pixelRatio: this.pixelRatio\r\n  }\r\n  vao.bind()\r\n  vao.draw(gl.TRIANGLE_STRIP, this.vertexCount)\r\n  vao.unbind()\r\n}\r\n\r\nproto.update = function (options) {\r\n  var i, j\r\n\r\n  this.dirty = true\r\n\r\n  var connectGaps = !!options.connectGaps\r\n\r\n  if ('dashScale' in options) {\r\n    this.dashScale = options.dashScale\r\n  }\r\n  if ('opacity' in options) {\r\n    this.opacity = +options.opacity\r\n  }\r\n\r\n  var positions = options.position || options.positions\r\n  if (!positions) {\r\n    return\r\n  }\r\n\r\n  // Default color\r\n  var colors = options.color || options.colors || [0, 0, 0, 1]\r\n\r\n  var lineWidth = options.lineWidth || 1\r\n\r\n  // Recalculate buffer data\r\n  var buffer = []\r\n  var arcLengthArray = []\r\n  var pointArray = []\r\n  var arcLength = 0.0\r\n  var vertexCount = 0\r\n  var bounds = [\r\n    [ Infinity, Infinity, Infinity ],\r\n    [ -Infinity, -Infinity, -Infinity ]]\r\n  var hadGap = false\r\n\r\n  fill_loop:\r\n  for (i = 1; i < positions.length; ++i) {\r\n    var a = positions[i - 1]\r\n    var b = positions[i]\r\n\r\n    arcLengthArray.push(arcLength)\r\n    pointArray.push(a.slice())\r\n\r\n    for (j = 0; j < 3; ++j) {\r\n      if (isNaN(a[j]) || isNaN(b[j]) ||\r\n        !isFinite(a[j]) || !isFinite(b[j])) {\r\n\r\n        if (!connectGaps && buffer.length > 0) {\r\n          for (var k = 0; k < 24; ++k) {\r\n            buffer.push(buffer[buffer.length - 12])\r\n          }\r\n          vertexCount += 2\r\n          hadGap = true\r\n        }\r\n\r\n        continue fill_loop\r\n      }\r\n      bounds[0][j] = Math.min(bounds[0][j], a[j], b[j])\r\n      bounds[1][j] = Math.max(bounds[1][j], a[j], b[j])\r\n    }\r\n\r\n    var acolor, bcolor\r\n    if (Array.isArray(colors[0])) {\r\n      acolor = colors[i - 1]\r\n      bcolor = colors[i]\r\n    } else {\r\n      acolor = bcolor = colors\r\n    }\r\n    if (acolor.length === 3) {\r\n      acolor = [acolor[0], acolor[1], acolor[2], 1]\r\n    }\r\n    if (bcolor.length === 3) {\r\n      bcolor = [bcolor[0], bcolor[1], bcolor[2], 1]\r\n    }\r\n\r\n    var w0\r\n    if (Array.isArray(lineWidth)) {\r\n      w0 = lineWidth[i - 1]\r\n    } else {\r\n      w0 = lineWidth\r\n    }\r\n\r\n    var t0 = arcLength\r\n    arcLength += distance(a, b)\r\n\r\n    if (hadGap) {\r\n      for (j = 0; j < 2; ++j) {\r\n        buffer.push(\r\n          a[0], a[1], a[2], b[0], b[1], b[2], t0, w0, acolor[0], acolor[1], acolor[2], acolor[3])\r\n      }\r\n      vertexCount += 2\r\n      hadGap = false\r\n    }\r\n\r\n    buffer.push(\r\n      a[0], a[1], a[2], b[0], b[1], b[2], t0, w0, acolor[0], acolor[1], acolor[2], acolor[3],\r\n      a[0], a[1], a[2], b[0], b[1], b[2], t0, -w0, acolor[0], acolor[1], acolor[2], acolor[3],\r\n      b[0], b[1], b[2], a[0], a[1], a[2], arcLength, -w0, bcolor[0], bcolor[1], bcolor[2], bcolor[3],\r\n      b[0], b[1], b[2], a[0], a[1], a[2], arcLength, w0, bcolor[0], bcolor[1], bcolor[2], bcolor[3])\r\n\r\n    vertexCount += 4\r\n  }\r\n  this.buffer.update(buffer)\r\n\r\n  arcLengthArray.push(arcLength)\r\n  pointArray.push(positions[positions.length - 1].slice())\r\n\r\n  this.bounds = bounds\r\n\r\n  this.vertexCount = vertexCount\r\n\r\n  this.points = pointArray\r\n  this.arcLength = arcLengthArray\r\n\r\n  if ('dashes' in options) {\r\n    var dashArray = options.dashes\r\n\r\n    // Calculate prefix sum\r\n    var prefixSum = dashArray.slice()\r\n    prefixSum.unshift(0)\r\n    for (i = 1; i < prefixSum.length; ++i) {\r\n      prefixSum[i] = prefixSum[i - 1] + prefixSum[i]\r\n    }\r\n\r\n    var dashTexture = ndarray(new Array(256 * 4), [256, 1, 4])\r\n    for (i = 0; i < 256; ++i) {\r\n      for (j = 0; j < 4; ++j) {\r\n        dashTexture.set(i, 0, j, 0)\r\n      }\r\n      if (bsearch.le(prefixSum, prefixSum[prefixSum.length - 1] * i / 255.0) & 1) {\r\n        dashTexture.set(i, 0, 0, 0)\r\n      } else {\r\n        dashTexture.set(i, 0, 0, 255)\r\n      }\r\n    }\r\n\r\n    this.texture.setPixels(dashTexture)\r\n  }\r\n}\r\n\r\nproto.dispose = function () {\r\n  this.shader.dispose()\r\n  this.vao.dispose()\r\n  this.buffer.dispose()\r\n}\r\n\r\nproto.pick = function (selection) {\r\n  if (!selection) {\r\n    return null\r\n  }\r\n  if (selection.id !== this.pickId) {\r\n    return null\r\n  }\r\n  var tau = unpackFloat(\r\n    selection.value[0],\r\n    selection.value[1],\r\n    selection.value[2],\r\n    0)\r\n  var index = bsearch.le(this.arcLength, tau)\r\n  if (index < 0) {\r\n    return null\r\n  }\r\n  if (index === this.arcLength.length - 1) {\r\n    return new PickResult(\r\n      this.arcLength[this.arcLength.length - 1],\r\n      this.points[this.points.length - 1].slice(),\r\n      index)\r\n  }\r\n  var a = this.points[index]\r\n  var b = this.points[Math.min(index + 1, this.points.length - 1)]\r\n  var t = (tau - this.arcLength[index]) / (this.arcLength[index + 1] - this.arcLength[index])\r\n  var ti = 1.0 - t\r\n  var x = [0, 0, 0]\r\n  for (var i = 0; i < 3; ++i) {\r\n    x[i] = ti * a[i] + t * b[i]\r\n  }\r\n  var dataIndex = Math.min((t < 0.5) ? index : (index + 1), this.points.length - 1)\r\n  return new PickResult(\r\n    tau,\r\n    x,\r\n    dataIndex,\r\n    this.points[dataIndex])\r\n}\r\n\r\nfunction createLinePlot (options) {\r\n  var gl = options.gl || (options.scene && options.scene.gl)\r\n\r\n  var shader = createShader(gl)\r\n  shader.attributes.position.location = 0\r\n  shader.attributes.nextPosition.location = 1\r\n  shader.attributes.arcLength.location = 2\r\n  shader.attributes.lineWidth.location = 3\r\n  shader.attributes.color.location = 4\r\n\r\n  var pickShader = createPickShader(gl)\r\n  pickShader.attributes.position.location = 0\r\n  pickShader.attributes.nextPosition.location = 1\r\n  pickShader.attributes.arcLength.location = 2\r\n  pickShader.attributes.lineWidth.location = 3\r\n  pickShader.attributes.color.location = 4\r\n\r\n  var buffer = createBuffer(gl)\r\n  var vao = createVAO(gl, [\r\n    {\r\n      'buffer': buffer,\r\n      'size': 3,\r\n      'offset': 0,\r\n      'stride': 48\r\n    },\r\n    {\r\n      'buffer': buffer,\r\n      'size': 3,\r\n      'offset': 12,\r\n      'stride': 48\r\n    },\r\n    {\r\n      'buffer': buffer,\r\n      'size': 1,\r\n      'offset': 24,\r\n      'stride': 48\r\n    },\r\n    {\r\n      'buffer': buffer,\r\n      'size': 1,\r\n      'offset': 28,\r\n      'stride': 48\r\n    },\r\n    {\r\n      'buffer': buffer,\r\n      'size': 4,\r\n      'offset': 32,\r\n      'stride': 48\r\n    }\r\n  ])\r\n\r\n  // Create texture for dash pattern\r\n  var defaultTexture = ndarray(new Array(256 * 4), [256, 1, 4])\r\n  for (var i = 0; i < 256 * 4; ++i) {\r\n    defaultTexture.data[i] = 255\r\n  }\r\n  var texture = createTexture(gl, defaultTexture)\r\n  texture.wrap = gl.REPEAT\r\n\r\n  var linePlot = new LinePlot(gl, shader, pickShader, buffer, vao, texture)\r\n  linePlot.update(options)\r\n  return linePlot\r\n}\r\n",null]}