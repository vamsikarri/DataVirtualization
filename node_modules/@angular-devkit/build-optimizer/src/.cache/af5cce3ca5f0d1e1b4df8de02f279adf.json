{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/box/set_positions.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/box/set_positions.js","mtime":1529418310703},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\n\nvar orientations = ['v', 'h'];\n\nfunction setPositions(gd, plotinfo) {\n    var calcdata = gd.calcdata;\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    for(var i = 0; i < orientations.length; i++) {\n        var orientation = orientations[i];\n        var posAxis = orientation === 'h' ? ya : xa;\n        var boxList = [];\n        var minPad = 0;\n        var maxPad = 0;\n\n        // make list of boxes / candlesticks\n        // For backward compatibility, candlesticks are treated as if they *are* box traces here\n        for(var j = 0; j < calcdata.length; j++) {\n            var cd = calcdata[j];\n            var t = cd[0].t;\n            var trace = cd[0].trace;\n\n            if(trace.visible === true &&\n                    (trace.type === 'box' || trace.type === 'candlestick') &&\n                    !t.empty &&\n                    (trace.orientation || 'v') === orientation &&\n                    trace.xaxis === xa._id &&\n                    trace.yaxis === ya._id\n              ) {\n                boxList.push(j);\n\n                if(trace.boxpoints) {\n                    minPad = Math.max(minPad, trace.jitter - trace.pointpos - 1);\n                    maxPad = Math.max(maxPad, trace.jitter + trace.pointpos - 1);\n                }\n            }\n        }\n\n        setPositionOffset('box', gd, boxList, posAxis, [minPad, maxPad]);\n    }\n}\n\nfunction setPositionOffset(traceType, gd, boxList, posAxis, pad) {\n    var calcdata = gd.calcdata;\n    var fullLayout = gd._fullLayout;\n    var pointList = [];\n\n    // N.B. reused in violin\n    var numKey = traceType === 'violin' ? '_numViolins' : '_numBoxes';\n\n    var i, j, calcTrace;\n\n    // make list of box points\n    for(i = 0; i < boxList.length; i++) {\n        calcTrace = calcdata[boxList[i]];\n        for(j = 0; j < calcTrace.length; j++) {\n            pointList.push(calcTrace[j].pos);\n        }\n    }\n\n    if(!pointList.length) return;\n\n    // box plots - update dPos based on multiple traces\n    // and then use for posAxis autorange\n    var boxdv = Lib.distinctVals(pointList);\n    var dPos = boxdv.minDiff / 2;\n\n    // if there's no duplication of x points,\n    // disable 'group' mode by setting counter to 1\n    if(pointList.length === boxdv.vals.length) {\n        fullLayout[numKey] = 1;\n    }\n\n    // check for forced minimum dtick\n    Axes.minDtick(posAxis, boxdv.minDiff, boxdv.vals[0], true);\n\n    // set the width of all boxes\n    for(i = 0; i < boxList.length; i++) {\n        calcTrace = calcdata[boxList[i]];\n        calcTrace[0].t.dPos = dPos;\n    }\n\n    var gap = fullLayout[traceType + 'gap'];\n    var groupgap = fullLayout[traceType + 'groupgap'];\n    var padfactor = (1 - gap) * (1 - groupgap) * dPos / fullLayout[numKey];\n\n    // autoscale the x axis - including space for points if they're off the side\n    // TODO: this will overdo it if the outermost boxes don't have\n    // their points as far out as the other boxes\n    Axes.expand(posAxis, boxdv.vals, {\n        vpadminus: dPos + pad[0] * padfactor,\n        vpadplus: dPos + pad[1] * padfactor\n    });\n}\n\nmodule.exports = {\n    setPositions: setPositions,\n    setPositionOffset: setPositionOffset\n};\n",null]}