{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/splom/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/splom/attributes.js","mtime":1529418310746},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar scatterGlAttrs = require('../scattergl/attributes');\nvar cartesianIdRegex = require('../../plots/cartesian/constants').idRegex;\n\nfunction makeAxesValObject(axLetter) {\n    return {\n        valType: 'info_array',\n        freeLength: true,\n        role: 'info',\n        editType: 'calc',\n        items: {\n            valType: 'subplotid',\n            regex: cartesianIdRegex[axLetter],\n            editType: 'plot'\n        },\n        description: [\n            'Sets the list of ' + axLetter + ' axes',\n            'corresponding to this splom trace.',\n            'By default, a splom will match the first N ' + axLetter + 'axes',\n            'where N is the number of input dimensions.'\n        ].join(' ')\n    };\n}\n\nmodule.exports = {\n    dimensions: {\n        _isLinkedToArray: 'dimension',\n\n        visible: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: true,\n            editType: 'calc',\n            description: [\n                'Determines whether or not this dimension is shown on the graph.',\n                'Note that even visible false dimension contribute to the',\n                'default grid generate by this splom trace.'\n            ].join(' ')\n        },\n        label: {\n            valType: 'string',\n            role: 'info',\n            editType: 'calc',\n            description: 'Sets the label corresponding to this splom dimension.'\n        },\n        values: {\n            valType: 'data_array',\n            role: 'info',\n            editType: 'calc+clearAxisTypes',\n            description: 'Sets the dimension values to be plotted.'\n        },\n\n        // TODO should add an attribute to pin down x only vars and y only vars\n        // like https://seaborn.pydata.org/generated/seaborn.pairplot.html\n        // x_vars and y_vars\n\n        // maybe more axis defaulting option e.g. `showgrid: false`\n\n        editType: 'calc+clearAxisTypes'\n    },\n\n    // mode: {}, (only 'markers' for now)\n\n    text: scatterGlAttrs.text,\n    marker: scatterGlAttrs.marker,\n\n    xaxes: makeAxesValObject('x'),\n    yaxes: makeAxesValObject('y'),\n\n    diagonal: {\n        visible: {\n            valType: 'boolean',\n            role: 'info',\n            dflt: true,\n            editType: 'calc',\n            description: [\n                'Determines whether or not subplots on the diagonal are displayed.'\n            ].join(' ')\n        },\n\n        // type: 'scattergl' | 'histogram' | 'box' | 'violin'\n        // ...\n        // more options\n\n        editType: 'calc'\n    },\n\n    showupperhalf: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not subplots on the upper half',\n            'from the diagonal are displayed.'\n        ].join(' ')\n    },\n    showlowerhalf: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not subplots on the lower half',\n            'from the diagonal are displayed.'\n        ].join(' ')\n    },\n\n    selected: {\n        marker: scatterGlAttrs.selected.marker,\n        editType: 'calc'\n    },\n    unselected: {\n        marker: scatterGlAttrs.unselected.marker,\n        editType: 'calc'\n    },\n\n    opacity: scatterGlAttrs.opacity\n};\n",null]}