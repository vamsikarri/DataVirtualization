{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/calc.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/colorscale/calc.js","mtime":1529418310608},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar scales = require('./scales');\nvar flipScale = require('./flip_scale');\n\n\nmodule.exports = function calc(trace, vals, containerStr, cLetter) {\n    var container = trace;\n    var inputContainer = trace._input;\n    var fullInputContainer = trace._fullInput;\n\n    // set by traces with groupby transforms\n    var updateStyle = trace.updateStyle;\n\n    function doUpdate(attr, inputVal, fullVal) {\n        if(fullVal === undefined) fullVal = inputVal;\n\n        if(updateStyle) {\n            updateStyle(trace._input, containerStr ? (containerStr + '.' + attr) : attr, inputVal);\n        }\n        else {\n            inputContainer[attr] = inputVal;\n        }\n\n        container[attr] = fullVal;\n        if(fullInputContainer && (trace !== trace._fullInput)) {\n            if(updateStyle) {\n                updateStyle(trace._fullInput, containerStr ? (containerStr + '.' + attr) : attr, fullVal);\n            }\n            else {\n                fullInputContainer[attr] = fullVal;\n            }\n        }\n    }\n\n    if(containerStr) {\n        container = Lib.nestedProperty(container, containerStr).get();\n        inputContainer = Lib.nestedProperty(inputContainer, containerStr).get();\n        fullInputContainer = Lib.nestedProperty(fullInputContainer, containerStr).get() || {};\n    }\n\n    var autoAttr = cLetter + 'auto';\n    var minAttr = cLetter + 'min';\n    var maxAttr = cLetter + 'max';\n    var auto = container[autoAttr];\n    var min = container[minAttr];\n    var max = container[maxAttr];\n    var scl = container.colorscale;\n\n    if(auto !== false || min === undefined) {\n        min = Lib.aggNums(Math.min, null, vals);\n    }\n\n    if(auto !== false || max === undefined) {\n        max = Lib.aggNums(Math.max, null, vals);\n    }\n\n    if(min === max) {\n        min -= 0.5;\n        max += 0.5;\n    }\n\n    doUpdate(minAttr, min);\n    doUpdate(maxAttr, max);\n\n    /*\n     * If auto was explicitly false but min or max was missing,\n     * we filled in the missing piece here but later the trace does\n     * not look auto.\n     * Otherwise make sure the trace still looks auto as far as later\n     * changes are concerned.\n     */\n    doUpdate(autoAttr, (auto !== false || (min === undefined && max === undefined)));\n\n    if(container.autocolorscale) {\n        if(min * max < 0) scl = scales.RdBu;\n        else if(min >= 0) scl = scales.Reds;\n        else scl = scales.Blues;\n\n        // reversescale is handled at the containerOut level\n        doUpdate('colorscale', scl, container.reversescale ? flipScale(scl) : scl);\n\n        // We pushed a colorscale back to input, which will change the default autocolorscale next time\n        // to avoid spurious redraws from Plotly.react, update resulting autocolorscale now\n        // This is a conscious decision so that changing the data later does not unexpectedly\n        // give you a new colorscale\n        if(!inputContainer.autocolorscale) {\n            doUpdate('autocolorscale', false);\n        }\n    }\n};\n",null]}