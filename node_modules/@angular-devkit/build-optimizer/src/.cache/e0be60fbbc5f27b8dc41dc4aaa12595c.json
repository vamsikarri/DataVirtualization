{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/choropleth/hover.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/choropleth/hover.js","mtime":1529418310709},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar attributes = require('./attributes');\nvar fillHoverText = require('../scatter/fill_hover_text');\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n    var cd = pointData.cd;\n    var trace = cd[0].trace;\n    var geo = pointData.subplot;\n\n    var pt, i, j, isInside;\n\n    for(i = 0; i < cd.length; i++) {\n        pt = cd[i];\n        isInside = false;\n\n        if(pt._polygons) {\n            for(j = 0; j < pt._polygons.length; j++) {\n                if(pt._polygons[j].contains([xval, yval])) {\n                    isInside = !isInside;\n                }\n                // for polygons that cross antimeridian as xval is in [-180, 180]\n                if(pt._polygons[j].contains([xval + 360, yval])) {\n                    isInside = !isInside;\n                }\n            }\n\n            if(isInside) break;\n        }\n    }\n\n    if(!isInside || !pt) return;\n\n    pointData.x0 = pointData.x1 = pointData.xa.c2p(pt.ct);\n    pointData.y0 = pointData.y1 = pointData.ya.c2p(pt.ct);\n\n    pointData.index = pt.index;\n    pointData.location = pt.loc;\n    pointData.z = pt.z;\n\n    makeHoverInfo(pointData, trace, pt, geo.mockAxis);\n\n    return [pointData];\n};\n\nfunction makeHoverInfo(pointData, trace, pt, axis) {\n    var hoverinfo = pt.hi || trace.hoverinfo;\n\n    var parts = (hoverinfo === 'all') ?\n        attributes.hoverinfo.flags :\n        hoverinfo.split('+');\n\n    var hasName = (parts.indexOf('name') !== -1);\n    var hasLocation = (parts.indexOf('location') !== -1);\n    var hasZ = (parts.indexOf('z') !== -1);\n    var hasText = (parts.indexOf('text') !== -1);\n    var hasIdAsNameLabel = !hasName && hasLocation;\n\n    var text = [];\n\n    function formatter(val) {\n        return Axes.tickText(axis, axis.c2l(val), 'hover').text;\n    }\n\n    if(hasIdAsNameLabel) {\n        pointData.nameOverride = pt.loc;\n    } else {\n        if(hasName) pointData.nameOverride = trace.name;\n        if(hasLocation) text.push(pt.loc);\n    }\n\n    if(hasZ) text.push(formatter(pt.z));\n    if(hasText) {\n        fillHoverText(pt, trace, text);\n    }\n\n    pointData.extraText = text.join('<br>');\n}\n",null]}