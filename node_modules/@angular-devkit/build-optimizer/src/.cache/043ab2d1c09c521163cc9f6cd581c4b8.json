{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl2d/convert.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl2d/convert.js","mtime":1529418310689},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Axes = require('../cartesian/axes');\n\nvar convertHTMLToUnicode = require('../../lib/html2unicode');\nvar str2RGBArray = require('../../lib/str2rgbarray');\n\nfunction Axes2DOptions(scene) {\n    this.scene = scene;\n    this.gl = scene.gl;\n    this.pixelRatio = scene.pixelRatio;\n\n    this.screenBox = [0, 0, 1, 1];\n    this.viewBox = [0, 0, 1, 1];\n    this.dataBox = [-1, -1, 1, 1];\n\n    this.borderLineEnable = [false, false, false, false];\n    this.borderLineWidth = [1, 1, 1, 1];\n    this.borderLineColor = [\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1]\n    ];\n\n    this.ticks = [[], []];\n    this.tickEnable = [true, true, false, false];\n    this.tickPad = [15, 15, 15, 15];\n    this.tickAngle = [0, 0, 0, 0];\n    this.tickColor = [\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1]\n    ];\n    this.tickMarkLength = [0, 0, 0, 0];\n    this.tickMarkWidth = [0, 0, 0, 0];\n    this.tickMarkColor = [\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1]\n    ];\n\n    this.labels = ['x', 'y'];\n    this.labelEnable = [true, true, false, false];\n    this.labelAngle = [0, Math.PI / 2, 0, 3.0 * Math.PI / 2];\n    this.labelPad = [15, 15, 15, 15];\n    this.labelSize = [12, 12];\n    this.labelFont = ['sans-serif', 'sans-serif'];\n    this.labelColor = [\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 0, 1]\n    ];\n\n    this.title = '';\n    this.titleEnable = true;\n    this.titleCenter = [0, 0, 0, 0];\n    this.titleAngle = 0;\n    this.titleColor = [0, 0, 0, 1];\n    this.titleFont = 'sans-serif';\n    this.titleSize = 18;\n\n    this.gridLineEnable = [true, true];\n    this.gridLineColor = [\n        [0, 0, 0, 0.5],\n        [0, 0, 0, 0.5]\n    ];\n    this.gridLineWidth = [1, 1];\n\n    this.zeroLineEnable = [true, true];\n    this.zeroLineWidth = [1, 1];\n    this.zeroLineColor = [\n        [0, 0, 0, 1],\n        [0, 0, 0, 1]\n    ];\n\n    this.borderColor = false;\n    this.backgroundColor = [0, 0, 0, 0];\n\n    this.static = this.scene.staticPlot;\n}\n\nvar proto = Axes2DOptions.prototype;\n\nvar AXES = ['xaxis', 'yaxis'];\n\nproto.merge = function(options) {\n\n    // titles are rendered in SVG\n    this.titleEnable = false;\n    this.backgroundColor = str2RGBArray(options.plot_bgcolor);\n\n    var axisName, ax, axTitle, axMirror;\n    var hasAxisInDfltPos, hasAxisInAltrPos, hasSharedAxis, mirrorLines, mirrorTicks;\n    var i, j;\n\n    for(i = 0; i < 2; ++i) {\n        axisName = AXES[i];\n        var axisLetter = axisName.charAt(0);\n\n        // get options relevant to this subplot,\n        // '_name' is e.g. xaxis, xaxis2, yaxis, yaxis4 ...\n        ax = options[this.scene[axisName]._name];\n\n        axTitle = ax.title === this.scene.fullLayout._dfltTitle[axisLetter] ? '' : ax.title;\n\n        for(j = 0; j <= 2; j += 2) {\n            this.labelEnable[i + j] = false;\n            this.labels[i + j] = convertHTMLToUnicode(axTitle);\n            this.labelColor[i + j] = str2RGBArray(ax.titlefont.color);\n            this.labelFont[i + j] = ax.titlefont.family;\n            this.labelSize[i + j] = ax.titlefont.size;\n            this.labelPad[i + j] = this.getLabelPad(axisName, ax);\n\n            this.tickEnable[i + j] = false;\n            this.tickColor[i + j] = str2RGBArray((ax.tickfont || {}).color);\n            this.tickAngle[i + j] = (ax.tickangle === 'auto') ?\n                0 :\n                Math.PI * -ax.tickangle / 180;\n            this.tickPad[i + j] = this.getTickPad(ax);\n\n            this.tickMarkLength[i + j] = 0;\n            this.tickMarkWidth[i + j] = ax.tickwidth || 0;\n            this.tickMarkColor[i + j] = str2RGBArray(ax.tickcolor);\n\n            this.borderLineEnable[i + j] = false;\n            this.borderLineColor[i + j] = str2RGBArray(ax.linecolor);\n            this.borderLineWidth[i + j] = ax.linewidth || 0;\n        }\n\n        hasSharedAxis = this.hasSharedAxis(ax);\n        hasAxisInDfltPos = this.hasAxisInDfltPos(axisName, ax) && !hasSharedAxis;\n        hasAxisInAltrPos = this.hasAxisInAltrPos(axisName, ax) && !hasSharedAxis;\n\n        axMirror = ax.mirror || false;\n        mirrorLines = hasSharedAxis ?\n            (String(axMirror).indexOf('all') !== -1) :  // 'all' or 'allticks'\n            !!axMirror;                                 // all but false\n        mirrorTicks = hasSharedAxis ?\n            (axMirror === 'allticks') :\n            (String(axMirror).indexOf('ticks') !== -1); // 'ticks' or 'allticks'\n\n        // Axis titles and tick labels can only appear of one side of the scene\n        //  and are never show on subplots that share existing axes.\n\n        if(hasAxisInDfltPos) this.labelEnable[i] = true;\n        else if(hasAxisInAltrPos) this.labelEnable[i + 2] = true;\n\n        if(hasAxisInDfltPos) this.tickEnable[i] = ax.showticklabels;\n        else if(hasAxisInAltrPos) this.tickEnable[i + 2] = ax.showticklabels;\n\n        // Grid lines and ticks can appear on both sides of the scene\n        //  and can appear on subplot that share existing axes via `ax.mirror`.\n\n        if(hasAxisInDfltPos || mirrorLines) this.borderLineEnable[i] = ax.showline;\n        if(hasAxisInAltrPos || mirrorLines) this.borderLineEnable[i + 2] = ax.showline;\n\n        if(hasAxisInDfltPos || mirrorTicks) this.tickMarkLength[i] = this.getTickMarkLength(ax);\n        if(hasAxisInAltrPos || mirrorTicks) this.tickMarkLength[i + 2] = this.getTickMarkLength(ax);\n\n        this.gridLineEnable[i] = ax.showgrid;\n        this.gridLineColor[i] = str2RGBArray(ax.gridcolor);\n        this.gridLineWidth[i] = ax.gridwidth;\n\n        this.zeroLineEnable[i] = ax.zeroline;\n        this.zeroLineColor[i] = str2RGBArray(ax.zerolinecolor);\n        this.zeroLineWidth[i] = ax.zerolinewidth;\n    }\n};\n\n// is an axis shared with an already-drawn subplot ?\nproto.hasSharedAxis = function(ax) {\n    var scene = this.scene;\n    var subplotIds = scene.fullLayout._subplots.gl2d;\n    var list = Axes.findSubplotsWithAxis(subplotIds, ax);\n\n    // if index === 0, then the subplot is already drawn as subplots\n    // are drawn in order.\n    return (list.indexOf(scene.id) !== 0);\n};\n\n// has an axis in default position (i.e. bottom/left) ?\nproto.hasAxisInDfltPos = function(axisName, ax) {\n    var axSide = ax.side;\n\n    if(axisName === 'xaxis') return (axSide === 'bottom');\n    else if(axisName === 'yaxis') return (axSide === 'left');\n};\n\n// has an axis in alternate position (i.e. top/right) ?\nproto.hasAxisInAltrPos = function(axisName, ax) {\n    var axSide = ax.side;\n\n    if(axisName === 'xaxis') return (axSide === 'top');\n    else if(axisName === 'yaxis') return (axSide === 'right');\n};\n\nproto.getLabelPad = function(axisName, ax) {\n    var offsetBase = 1.5,\n        fontSize = ax.titlefont.size,\n        showticklabels = ax.showticklabels;\n\n    if(axisName === 'xaxis') {\n        return (ax.side === 'top') ?\n            -10 + fontSize * (offsetBase + (showticklabels ? 1 : 0)) :\n            -10 + fontSize * (offsetBase + (showticklabels ? 0.5 : 0));\n    }\n    else if(axisName === 'yaxis') {\n        return (ax.side === 'right') ?\n            10 + fontSize * (offsetBase + (showticklabels ? 1 : 0.5)) :\n            10 + fontSize * (offsetBase + (showticklabels ? 0.5 : 0));\n    }\n};\n\nproto.getTickPad = function(ax) {\n    return (ax.ticks === 'outside') ? 10 + ax.ticklen : 15;\n};\n\nproto.getTickMarkLength = function(ax) {\n    if(!ax.ticks) return 0;\n\n    var ticklen = ax.ticklen;\n\n    return (ax.ticks === 'inside') ? -ticklen : ticklen;\n};\n\n\nfunction createAxes2D(scene) {\n    return new Axes2DOptions(scene);\n}\n\nmodule.exports = createAxes2D;\n",null]}