{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/defaults.js","mtime":1529418310691},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../../lib');\nvar Color = require('../../../components/color');\nvar Registry = require('../../../registry');\n\nvar handleSubplotDefaults = require('../../subplot_defaults');\nvar supplyGl3dAxisLayoutDefaults = require('./axis_defaults');\nvar layoutAttributes = require('./layout_attributes');\n\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    var hasNon3D = layoutOut._basePlotModules.length > 1;\n\n    // some layout-wide attribute are used in all scenes\n    // if 3D is the only visible plot type\n    function getDfltFromLayout(attr) {\n        if(hasNon3D) return;\n\n        var isValid = Lib.validate(layoutIn[attr], layoutAttributes[attr]);\n        if(isValid) return layoutIn[attr];\n    }\n\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: 'gl3d',\n        attributes: layoutAttributes,\n        handleDefaults: handleGl3dDefaults,\n        fullLayout: layoutOut,\n        font: layoutOut.font,\n        fullData: fullData,\n        getDfltFromLayout: getDfltFromLayout,\n        paper_bgcolor: layoutOut.paper_bgcolor,\n        calendar: layoutOut.calendar\n    });\n};\n\nfunction handleGl3dDefaults(sceneLayoutIn, sceneLayoutOut, coerce, opts) {\n    /*\n     * Scene numbering proceeds as follows\n     * scene\n     * scene2\n     * scene3\n     *\n     * and d.scene will be undefined or some number or number string\n     *\n     * Also write back a blank scene object to user layout so that some\n     * attributes like aspectratio can be written back dynamically.\n     */\n\n    var bgcolor = coerce('bgcolor'),\n        bgColorCombined = Color.combine(bgcolor, opts.paper_bgcolor);\n\n    var cameraKeys = ['up', 'center', 'eye'];\n\n    for(var j = 0; j < cameraKeys.length; j++) {\n        coerce('camera.' + cameraKeys[j] + '.x');\n        coerce('camera.' + cameraKeys[j] + '.y');\n        coerce('camera.' + cameraKeys[j] + '.z');\n    }\n\n    /*\n     * coerce to positive number (min 0) but also do not accept 0 (>0 not >=0)\n     * note that 0's go false with the !! call\n     */\n    var hasAspect = !!coerce('aspectratio.x') &&\n                    !!coerce('aspectratio.y') &&\n                    !!coerce('aspectratio.z');\n\n    var defaultAspectMode = hasAspect ? 'manual' : 'auto';\n    var aspectMode = coerce('aspectmode', defaultAspectMode);\n\n    /*\n     * We need aspectratio object in all the Layouts as it is dynamically set\n     * in the calculation steps, ie, we cant set the correct data now, it happens later.\n     * We must also account for the case the user sends bad ratio data with 'manual' set\n     * for the mode. In this case we must force change it here as the default coerce\n     * misses it above.\n     */\n    if(!hasAspect) {\n        sceneLayoutIn.aspectratio = sceneLayoutOut.aspectratio = {x: 1, y: 1, z: 1};\n\n        if(aspectMode === 'manual') sceneLayoutOut.aspectmode = 'auto';\n\n        /*\n         * kind of like autorange - we need the calculated aspectmode back in\n         * the input layout or relayout can cause problems later\n         */\n        sceneLayoutIn.aspectmode = sceneLayoutOut.aspectmode;\n    }\n\n    supplyGl3dAxisLayoutDefaults(sceneLayoutIn, sceneLayoutOut, {\n        font: opts.font,\n        scene: opts.id,\n        data: opts.fullData,\n        bgColor: bgColorCombined,\n        calendar: opts.calendar,\n        fullLayout: opts.fullLayout\n    });\n\n    Registry.getComponentMethod('annotations3d', 'handleDefaults')(\n        sceneLayoutIn, sceneLayoutOut, opts\n    );\n\n    coerce('dragmode', opts.getDfltFromLayout('dragmode'));\n    coerce('hovermode', opts.getDfltFromLayout('hovermode'));\n}\n",null]}