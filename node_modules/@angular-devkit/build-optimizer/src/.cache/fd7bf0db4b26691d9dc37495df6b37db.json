{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/errorbars/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/components/errorbars/attributes.js","mtime":1529418310612},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n\nmodule.exports = {\n    visible: {\n        valType: 'boolean',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Determines whether or not this set of error bars is visible.'\n        ].join(' ')\n    },\n    type: {\n        valType: 'enumerated',\n        values: ['percent', 'constant', 'sqrt', 'data'],\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Determines the rule used to generate the error bars.',\n\n            'If *constant`, the bar lengths are of a constant value.',\n            'Set this constant in `value`.',\n\n            'If *percent*, the bar lengths correspond to a percentage of',\n            'underlying data. Set this percentage in `value`.',\n\n            'If *sqrt*, the bar lengths correspond to the sqaure of the',\n            'underlying data.',\n\n            'If *array*, the bar lengths are set with data set `array`.'\n        ].join(' ')\n    },\n    symmetric: {\n        valType: 'boolean',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Determines whether or not the error bars have the same length',\n            'in both direction',\n            '(top/bottom for vertical bars, left/right for horizontal bars.'\n        ].join(' ')\n    },\n    array: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the data corresponding the length of each error bar.',\n            'Values are plotted relative to the underlying data.'\n        ].join(' ')\n    },\n    arrayminus: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the data corresponding the length of each error bar in the',\n            'bottom (left) direction for vertical (horizontal) bars',\n            'Values are plotted relative to the underlying data.'\n        ].join(' ')\n    },\n    value: {\n        valType: 'number',\n        min: 0,\n        dflt: 10,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the value of either the percentage',\n            '(if `type` is set to *percent*) or the constant',\n            '(if `type` is set to *constant*) corresponding to the lengths of',\n            'the error bars.'\n        ].join(' ')\n    },\n    valueminus: {\n        valType: 'number',\n        min: 0,\n        dflt: 10,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the value of either the percentage',\n            '(if `type` is set to *percent*) or the constant',\n            '(if `type` is set to *constant*) corresponding to the lengths of',\n            'the error bars in the',\n            'bottom (left) direction for vertical (horizontal) bars'\n        ].join(' ')\n    },\n    traceref: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'style'\n    },\n    tracerefminus: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        role: 'info',\n        editType: 'style'\n    },\n    copy_ystyle: {\n        valType: 'boolean',\n        role: 'style',\n        editType: 'plot'\n    },\n    copy_zstyle: {\n        valType: 'boolean',\n        role: 'style',\n        editType: 'style'\n    },\n    color: {\n        valType: 'color',\n        role: 'style',\n        editType: 'style',\n        description: 'Sets the stoke color of the error bars.'\n    },\n    thickness: {\n        valType: 'number',\n        min: 0,\n        dflt: 2,\n        role: 'style',\n        editType: 'style',\n        description: 'Sets the thickness (in px) of the error bars.'\n    },\n    width: {\n        valType: 'number',\n        min: 0,\n        role: 'style',\n        editType: 'plot',\n        description: [\n            'Sets the width (in px) of the cross-bar at both ends',\n            'of the error bars.'\n        ].join(' ')\n    },\n    editType: 'calc',\n\n    _deprecated: {\n        opacity: {\n            valType: 'number',\n            role: 'style',\n            editType: 'style',\n            description: [\n                'Obsolete.',\n                'Use the alpha channel in error bar `color` to set the opacity.'\n            ].join(' ')\n        }\n    }\n};\n",null]}