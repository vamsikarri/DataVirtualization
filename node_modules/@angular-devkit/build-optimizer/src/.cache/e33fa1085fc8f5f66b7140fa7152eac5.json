{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattermapbox/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattermapbox/plot.js","mtime":1529418310743},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar convert = require('./convert');\n\nfunction ScatterMapbox(subplot, uid) {\n    this.subplot = subplot;\n    this.uid = uid;\n\n    this.sourceIds = {\n        fill: uid + '-source-fill',\n        line: uid + '-source-line',\n        circle: uid + '-source-circle',\n        symbol: uid + '-source-symbol'\n    };\n\n    this.layerIds = {\n        fill: uid + '-layer-fill',\n        line: uid + '-layer-line',\n        circle: uid + '-layer-circle',\n        symbol: uid + '-layer-symbol'\n    };\n\n    this.order = ['fill', 'line', 'circle', 'symbol'];\n\n    // We could merge the 'fill' source with the 'line' source and\n    // the 'circle' source with the 'symbol' source if ever having\n    // for up-to 4 sources per 'scattermapbox' traces becomes a problem.\n}\n\nvar proto = ScatterMapbox.prototype;\n\nproto.addSource = function(k, opts) {\n    this.subplot.map.addSource(this.sourceIds[k], {\n        type: 'geojson',\n        data: opts.geojson\n    });\n};\n\nproto.setSourceData = function(k, opts) {\n    this.subplot.map\n        .getSource(this.sourceIds[k])\n        .setData(opts.geojson);\n};\n\nproto.addLayer = function(k, opts) {\n    this.subplot.map.addLayer({\n        type: k,\n        id: this.layerIds[k],\n        source: this.sourceIds[k],\n        layout: opts.layout,\n        paint: opts.paint\n    });\n};\n\nproto.update = function update(calcTrace) {\n    var subplot = this.subplot;\n    var optsAll = convert(calcTrace);\n\n    for(var i = 0; i < this.order.length; i++) {\n        var k = this.order[i];\n        var opts = optsAll[k];\n\n        subplot.setOptions(this.layerIds[k], 'setLayoutProperty', opts.layout);\n\n        if(opts.layout.visibility === 'visible') {\n            this.setSourceData(k, opts);\n            subplot.setOptions(this.layerIds[k], 'setPaintProperty', opts.paint);\n        }\n    }\n\n    // link ref for quick update during selections\n    calcTrace[0].trace._glTrace = this;\n};\n\nproto.dispose = function dispose() {\n    var map = this.subplot.map;\n\n    for(var i = 0; i < this.order.length; i++) {\n        var k = this.order[i];\n        map.removeLayer(this.layerIds[k]);\n        map.removeSource(this.sourceIds[k]);\n    }\n};\n\nmodule.exports = function createScatterMapbox(subplot, calcTrace) {\n    var trace = calcTrace[0].trace;\n    var scatterMapbox = new ScatterMapbox(subplot, trace.uid);\n    var optsAll = convert(calcTrace);\n\n    for(var i = 0; i < scatterMapbox.order.length; i++) {\n        var k = scatterMapbox.order[i];\n        var opts = optsAll[k];\n\n        scatterMapbox.addSource(k, opts);\n        scatterMapbox.addLayer(k, opts);\n    }\n\n    // link ref for quick update during selections\n    calcTrace[0].trace._glTrace = scatterMapbox;\n\n    return scatterMapbox;\n};\n",null]}