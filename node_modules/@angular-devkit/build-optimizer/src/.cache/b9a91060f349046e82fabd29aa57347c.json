{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/surface/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/surface/defaults.js","mtime":1529418310747},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\nvar attributes = require('./attributes');\n\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    var i, j;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var z = coerce('z');\n    if(!z) {\n        traceOut.visible = false;\n        return;\n    }\n\n    var x = coerce('x');\n    coerce('y');\n\n    traceOut._xlength = (Array.isArray(x) && Lib.isArrayOrTypedArray(x[0])) ? z.length : z[0].length;\n    traceOut._ylength = z.length;\n\n    var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n    handleCalendarDefaults(traceIn, traceOut, ['x', 'y', 'z'], layout);\n\n    coerce('text');\n\n    // Coerce remaining properties\n    [\n        'lighting.ambient',\n        'lighting.diffuse',\n        'lighting.specular',\n        'lighting.roughness',\n        'lighting.fresnel',\n        'lightposition.x',\n        'lightposition.y',\n        'lightposition.z',\n        'hidesurface',\n        'opacity'\n    ].forEach(function(x) { coerce(x); });\n\n    var surfaceColor = coerce('surfacecolor');\n\n    coerce('colorscale');\n\n    var dims = ['x', 'y', 'z'];\n    for(i = 0; i < 3; ++i) {\n\n        var contourDim = 'contours.' + dims[i];\n        var show = coerce(contourDim + '.show');\n        var highlight = coerce(contourDim + '.highlight');\n\n        if(show || highlight) {\n            for(j = 0; j < 3; ++j) {\n                coerce(contourDim + '.project.' + dims[j]);\n            }\n        }\n\n        if(show) {\n            coerce(contourDim + '.color');\n            coerce(contourDim + '.width');\n            coerce(contourDim + '.usecolormap');\n        }\n\n        if(highlight) {\n            coerce(contourDim + '.highlightcolor');\n            coerce(contourDim + '.highlightwidth');\n        }\n    }\n\n    // backward compatibility block\n    if(!surfaceColor) {\n        mapLegacy(traceIn, 'zmin', 'cmin');\n        mapLegacy(traceIn, 'zmax', 'cmax');\n        mapLegacy(traceIn, 'zauto', 'cauto');\n    }\n\n    // TODO if contours.?.usecolormap are false and hidesurface is true\n    // the colorbar shouldn't be shown by default\n\n    colorscaleDefaults(\n        traceIn, traceOut, layout, coerce, {prefix: '', cLetter: 'c'}\n    );\n\n    // disable 1D transforms - currently surface does NOT support column data like heatmap does\n    // you can use mesh3d for this use case, but not surface\n    traceOut._length = null;\n};\n\nfunction mapLegacy(traceIn, oldAttr, newAttr) {\n    if(oldAttr in traceIn && !(newAttr in traceIn)) {\n        traceIn[newAttr] = traceIn[oldAttr];\n    }\n}\n",null]}