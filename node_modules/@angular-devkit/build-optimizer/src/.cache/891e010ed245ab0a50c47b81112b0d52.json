{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatter3d/calc_errors.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scatter3d/calc_errors.js","mtime":1529418310738},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\n\nfunction calculateAxisErrors(data, params, scaleFactor) {\n    if(!params || !params.visible) return null;\n\n    var computeError = Registry.getComponentMethod('errorbars', 'makeComputeError')(params);\n    var result = new Array(data.length);\n\n    for(var i = 0; i < data.length; i++) {\n        var errors = computeError(+data[i], i);\n\n        result[i] = [\n            -errors[0] * scaleFactor,\n            errors[1] * scaleFactor\n        ];\n    }\n\n    return result;\n}\n\nfunction dataLength(array) {\n    for(var i = 0; i < array.length; i++) {\n        if(array[i]) return array[i].length;\n    }\n    return 0;\n}\n\nfunction calculateErrors(data, scaleFactor) {\n    var errors = [\n        calculateAxisErrors(data.x, data.error_x, scaleFactor[0]),\n        calculateAxisErrors(data.y, data.error_y, scaleFactor[1]),\n        calculateAxisErrors(data.z, data.error_z, scaleFactor[2])\n    ];\n\n    var n = dataLength(errors);\n    if(n === 0) return null;\n\n    var errorBounds = new Array(n);\n\n    for(var i = 0; i < n; i++) {\n        var bound = [[0, 0, 0], [0, 0, 0]];\n\n        for(var j = 0; j < 3; j++) {\n            if(errors[j]) {\n                for(var k = 0; k < 2; k++) {\n                    bound[k][j] = errors[j][i][k];\n                }\n            }\n        }\n\n        errorBounds[i] = bound;\n    }\n\n    return errorBounds;\n}\n\nmodule.exports = calculateErrors;\n",null]}