{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/pie/plot.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/pie/plot.js","mtime":1529418310730},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\n\nvar Fx = require('../../components/fx');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar helpers = require('./helpers');\nvar eventData = require('./event_data');\n\nmodule.exports = function plot(gd, cdpie) {\n    var fullLayout = gd._fullLayout;\n\n    scalePies(cdpie, fullLayout._size);\n\n    var pieGroups = fullLayout._pielayer.selectAll('g.trace').data(cdpie);\n\n    pieGroups.enter().append('g')\n        .attr({\n            'stroke-linejoin': 'round', // TODO: miter might look better but can sometimes cause problems\n                                        // maybe miter with a small-ish stroke-miterlimit?\n            'class': 'trace'\n        });\n    pieGroups.exit().remove();\n    pieGroups.order();\n\n    pieGroups.each(function(cd) {\n        var pieGroup = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        setCoords(cd);\n\n        pieGroup.each(function() {\n            var slices = d3.select(this).selectAll('g.slice').data(cd);\n\n            slices.enter().append('g')\n                .classed('slice', true);\n            slices.exit().remove();\n\n            var quadrants = [\n                [[], []], // y<0: x<0, x>=0\n                [[], []] // y>=0: x<0, x>=0\n            ];\n            var hasOutsideText = false;\n\n            slices.each(function(pt) {\n                if(pt.hidden) {\n                    d3.select(this).selectAll('path,g').remove();\n                    return;\n                }\n\n                // to have consistent event data compared to other traces\n                pt.pointNumber = pt.i;\n                pt.curveNumber = trace.index;\n\n                quadrants[pt.pxmid[1] < 0 ? 0 : 1][pt.pxmid[0] < 0 ? 0 : 1].push(pt);\n\n                var cx = cd0.cx;\n                var cy = cd0.cy;\n                var sliceTop = d3.select(this);\n                var slicePath = sliceTop.selectAll('path.surface').data([pt]);\n\n                // hover state vars\n                // have we drawn a hover label, so it should be cleared later\n                var hasHoverLabel = false;\n                // have we emitted a hover event, so later an unhover event should be emitted\n                // note that click events do not depend on this - you can still get them\n                // with hovermode: false or if you were earlier dragging, then clicked\n                // in the same slice that you moused up in\n                var hasHoverEvent = false;\n\n                function handleMouseOver() {\n                    // in case fullLayout or fullData has changed without a replot\n                    var fullLayout2 = gd._fullLayout;\n                    var trace2 = gd._fullData[trace.index];\n\n                    if(gd._dragging || fullLayout2.hovermode === false) return;\n\n                    var hoverinfo = trace2.hoverinfo;\n                    if(Array.isArray(hoverinfo)) {\n                        // super hacky: we need to pull out the *first* hoverinfo from\n                        // pt.pts, then put it back into an array in a dummy trace\n                        // and call castHoverinfo on that.\n                        // TODO: do we want to have Fx.castHoverinfo somehow handle this?\n                        // it already takes an array for index, for 2D, so this seems tricky.\n                        hoverinfo = Fx.castHoverinfo({\n                            hoverinfo: [helpers.castOption(hoverinfo, pt.pts)],\n                            _module: trace._module\n                        }, fullLayout2, 0);\n                    }\n\n                    if(hoverinfo === 'all') hoverinfo = 'label+text+value+percent+name';\n\n                    // in case we dragged over the pie from another subplot,\n                    // or if hover is turned off\n                    if(hoverinfo !== 'none' && hoverinfo !== 'skip' && hoverinfo) {\n                        var rInscribed = getInscribedRadiusFraction(pt, cd0);\n                        var hoverCenterX = cx + pt.pxmid[0] * (1 - rInscribed);\n                        var hoverCenterY = cy + pt.pxmid[1] * (1 - rInscribed);\n                        var separators = fullLayout.separators;\n                        var thisText = [];\n\n                        if(hoverinfo.indexOf('label') !== -1) thisText.push(pt.label);\n                        if(hoverinfo.indexOf('text') !== -1) {\n                            var texti = helpers.castOption(trace2.hovertext || trace2.text, pt.pts);\n                            if(texti) thisText.push(texti);\n                        }\n                        if(hoverinfo.indexOf('value') !== -1) thisText.push(helpers.formatPieValue(pt.v, separators));\n                        if(hoverinfo.indexOf('percent') !== -1) thisText.push(helpers.formatPiePercent(pt.v / cd0.vTotal, separators));\n\n                        var hoverLabel = trace.hoverlabel;\n                        var hoverFont = hoverLabel.font;\n\n                        Fx.loneHover({\n                            x0: hoverCenterX - rInscribed * cd0.r,\n                            x1: hoverCenterX + rInscribed * cd0.r,\n                            y: hoverCenterY,\n                            text: thisText.join('<br>'),\n                            name: hoverinfo.indexOf('name') !== -1 ? trace2.name : undefined,\n                            idealAlign: pt.pxmid[0] < 0 ? 'left' : 'right',\n                            color: helpers.castOption(hoverLabel.bgcolor, pt.pts) || pt.color,\n                            borderColor: helpers.castOption(hoverLabel.bordercolor, pt.pts),\n                            fontFamily: helpers.castOption(hoverFont.family, pt.pts),\n                            fontSize: helpers.castOption(hoverFont.size, pt.pts),\n                            fontColor: helpers.castOption(hoverFont.color, pt.pts)\n                        }, {\n                            container: fullLayout2._hoverlayer.node(),\n                            outerContainer: fullLayout2._paper.node(),\n                            gd: gd\n                        });\n\n                        hasHoverLabel = true;\n                    }\n\n                    gd.emit('plotly_hover', {\n                        points: [eventData(pt, trace2)],\n                        event: d3.event\n                    });\n                    hasHoverEvent = true;\n                }\n\n                function handleMouseOut(evt) {\n                    var fullLayout2 = gd._fullLayout;\n                    var trace2 = gd._fullData[trace.index];\n\n                    if(hasHoverEvent) {\n                        evt.originalEvent = d3.event;\n                        gd.emit('plotly_unhover', {\n                            points: [eventData(pt, trace2)],\n                            event: d3.event\n                        });\n                        hasHoverEvent = false;\n                    }\n\n                    if(hasHoverLabel) {\n                        Fx.loneUnhover(fullLayout2._hoverlayer.node());\n                        hasHoverLabel = false;\n                    }\n                }\n\n                function handleClick() {\n                    // TODO: this does not support right-click. If we want to support it, we\n                    // would likely need to change pie to use dragElement instead of straight\n                    // mapbox event binding. Or perhaps better, make a simple wrapper with the\n                    // right mousedown, mousemove, and mouseup handlers just for a left/right click\n                    // mapbox would use this too.\n                    var fullLayout2 = gd._fullLayout;\n                    var trace2 = gd._fullData[trace.index];\n\n                    if(gd._dragging || fullLayout2.hovermode === false) return;\n\n                    gd._hoverdata = [eventData(pt, trace2)];\n                    Fx.click(gd, d3.event);\n                }\n\n                slicePath.enter().append('path')\n                    .classed('surface', true)\n                    .style({'pointer-events': 'all'});\n\n                sliceTop.select('path.textline').remove();\n\n                sliceTop\n                    .on('mouseover', handleMouseOver)\n                    .on('mouseout', handleMouseOut)\n                    .on('click', handleClick);\n\n                if(trace.pull) {\n                    var pull = +helpers.castOption(trace.pull, pt.pts) || 0;\n                    if(pull > 0) {\n                        cx += pull * pt.pxmid[0];\n                        cy += pull * pt.pxmid[1];\n                    }\n                }\n\n                pt.cxFinal = cx;\n                pt.cyFinal = cy;\n\n                function arc(start, finish, cw, scale) {\n                    return 'a' + (scale * cd0.r) + ',' + (scale * cd0.r) + ' 0 ' +\n                        pt.largeArc + (cw ? ' 1 ' : ' 0 ') +\n                        (scale * (finish[0] - start[0])) + ',' + (scale * (finish[1] - start[1]));\n                }\n\n                var hole = trace.hole;\n                if(pt.v === cd0.vTotal) { // 100% fails bcs arc start and end are identical\n                    var outerCircle = 'M' + (cx + pt.px0[0]) + ',' + (cy + pt.px0[1]) +\n                        arc(pt.px0, pt.pxmid, true, 1) +\n                        arc(pt.pxmid, pt.px0, true, 1) + 'Z';\n                    if(hole) {\n                        slicePath.attr('d',\n                            'M' + (cx + hole * pt.px0[0]) + ',' + (cy + hole * pt.px0[1]) +\n                            arc(pt.px0, pt.pxmid, false, hole) +\n                            arc(pt.pxmid, pt.px0, false, hole) +\n                            'Z' + outerCircle);\n                    }\n                    else slicePath.attr('d', outerCircle);\n                } else {\n\n                    var outerArc = arc(pt.px0, pt.px1, true, 1);\n\n                    if(hole) {\n                        var rim = 1 - hole;\n                        slicePath.attr('d',\n                            'M' + (cx + hole * pt.px1[0]) + ',' + (cy + hole * pt.px1[1]) +\n                            arc(pt.px1, pt.px0, false, hole) +\n                            'l' + (rim * pt.px0[0]) + ',' + (rim * pt.px0[1]) +\n                            outerArc +\n                            'Z');\n                    } else {\n                        slicePath.attr('d',\n                            'M' + cx + ',' + cy +\n                            'l' + pt.px0[0] + ',' + pt.px0[1] +\n                            outerArc +\n                            'Z');\n                    }\n                }\n\n                // add text\n                var textPosition = helpers.castOption(trace.textposition, pt.pts);\n                var sliceTextGroup = sliceTop.selectAll('g.slicetext')\n                    .data(pt.text && (textPosition !== 'none') ? [0] : []);\n\n                sliceTextGroup.enter().append('g')\n                    .classed('slicetext', true);\n                sliceTextGroup.exit().remove();\n\n                sliceTextGroup.each(function() {\n                    var sliceText = Lib.ensureSingle(d3.select(this), 'text', '', function(s) {\n                        // prohibit tex interpretation until we can handle\n                        // tex and regular text together\n                        s.attr('data-notex', 1);\n                    });\n\n                    sliceText.text(pt.text)\n                        .attr({\n                            'class': 'slicetext',\n                            transform: '',\n                            'text-anchor': 'middle'\n                        })\n                        .call(Drawing.font, textPosition === 'outside' ?\n                            trace.outsidetextfont : trace.insidetextfont)\n                        .call(svgTextUtils.convertToTspans, gd);\n\n                    // position the text relative to the slice\n                    var textBB = Drawing.bBox(sliceText.node());\n                    var transform;\n\n                    if(textPosition === 'outside') {\n                        transform = transformOutsideText(textBB, pt);\n                    } else {\n                        transform = transformInsideText(textBB, pt, cd0);\n                        if(textPosition === 'auto' && transform.scale < 1) {\n                            sliceText.call(Drawing.font, trace.outsidetextfont);\n                            if(trace.outsidetextfont.family !== trace.insidetextfont.family ||\n                                    trace.outsidetextfont.size !== trace.insidetextfont.size) {\n                                textBB = Drawing.bBox(sliceText.node());\n                            }\n                            transform = transformOutsideText(textBB, pt);\n                        }\n                    }\n\n                    var translateX = cx + pt.pxmid[0] * transform.rCenter + (transform.x || 0);\n                    var translateY = cy + pt.pxmid[1] * transform.rCenter + (transform.y || 0);\n\n                    // save some stuff to use later ensure no labels overlap\n                    if(transform.outside) {\n                        pt.yLabelMin = translateY - textBB.height / 2;\n                        pt.yLabelMid = translateY;\n                        pt.yLabelMax = translateY + textBB.height / 2;\n                        pt.labelExtraX = 0;\n                        pt.labelExtraY = 0;\n                        hasOutsideText = true;\n                    }\n\n                    sliceText.attr('transform',\n                        'translate(' + translateX + ',' + translateY + ')' +\n                        (transform.scale < 1 ? ('scale(' + transform.scale + ')') : '') +\n                        (transform.rotate ? ('rotate(' + transform.rotate + ')') : '') +\n                        'translate(' +\n                            (-(textBB.left + textBB.right) / 2) + ',' +\n                            (-(textBB.top + textBB.bottom) / 2) +\n                        ')');\n                });\n            });\n\n            // now make sure no labels overlap (at least within one pie)\n            if(hasOutsideText) scootLabels(quadrants, trace);\n            slices.each(function(pt) {\n                if(pt.labelExtraX || pt.labelExtraY) {\n                    // first move the text to its new location\n                    var sliceTop = d3.select(this);\n                    var sliceText = sliceTop.select('g.slicetext text');\n\n                    sliceText.attr('transform', 'translate(' + pt.labelExtraX + ',' + pt.labelExtraY + ')' +\n                        sliceText.attr('transform'));\n\n                    // then add a line to the new location\n                    var lineStartX = pt.cxFinal + pt.pxmid[0];\n                    var lineStartY = pt.cyFinal + pt.pxmid[1];\n                    var textLinePath = 'M' + lineStartX + ',' + lineStartY;\n                    var finalX = (pt.yLabelMax - pt.yLabelMin) * (pt.pxmid[0] < 0 ? -1 : 1) / 4;\n\n                    if(pt.labelExtraX) {\n                        var yFromX = pt.labelExtraX * pt.pxmid[1] / pt.pxmid[0];\n                        var yNet = pt.yLabelMid + pt.labelExtraY - (pt.cyFinal + pt.pxmid[1]);\n\n                        if(Math.abs(yFromX) > Math.abs(yNet)) {\n                            textLinePath +=\n                                'l' + (yNet * pt.pxmid[0] / pt.pxmid[1]) + ',' + yNet +\n                                'H' + (lineStartX + pt.labelExtraX + finalX);\n                        } else {\n                            textLinePath += 'l' + pt.labelExtraX + ',' + yFromX +\n                                'v' + (yNet - yFromX) +\n                                'h' + finalX;\n                        }\n                    } else {\n                        textLinePath +=\n                            'V' + (pt.yLabelMid + pt.labelExtraY) +\n                            'h' + finalX;\n                    }\n\n                    sliceTop.append('path')\n                        .classed('textline', true)\n                        .call(Color.stroke, trace.outsidetextfont.color)\n                        .attr({\n                            'stroke-width': Math.min(2, trace.outsidetextfont.size / 8),\n                            d: textLinePath,\n                            fill: 'none'\n                        });\n                }\n            });\n        });\n    });\n\n    // This is for a bug in Chrome (as of 2015-07-22, and does not affect FF)\n    // if insidetextfont and outsidetextfont are different sizes, sometimes the size\n    // of an \"em\" gets taken from the wrong element at first so lines are\n    // spaced wrong. You just have to tell it to try again later and it gets fixed.\n    // I have no idea why we haven't seen this in other contexts. Also, sometimes\n    // it gets the initial draw correct but on redraw it gets confused.\n    setTimeout(function() {\n        pieGroups.selectAll('tspan').each(function() {\n            var s = d3.select(this);\n            if(s.attr('dy')) s.attr('dy', s.attr('dy'));\n        });\n    }, 0);\n};\n\n\nfunction transformInsideText(textBB, pt, cd0) {\n    var textDiameter = Math.sqrt(textBB.width * textBB.width + textBB.height * textBB.height);\n    var textAspect = textBB.width / textBB.height;\n    var halfAngle = Math.PI * Math.min(pt.v / cd0.vTotal, 0.5);\n    var ring = 1 - cd0.trace.hole;\n    var rInscribed = getInscribedRadiusFraction(pt, cd0),\n\n        // max size text can be inserted inside without rotating it\n        // this inscribes the text rectangle in a circle, which is then inscribed\n        // in the slice, so it will be an underestimate, which some day we may want\n        // to improve so this case can get more use\n        transform = {\n            scale: rInscribed * cd0.r * 2 / textDiameter,\n\n            // and the center position and rotation in this case\n            rCenter: 1 - rInscribed,\n            rotate: 0\n        };\n\n    if(transform.scale >= 1) return transform;\n\n        // max size if text is rotated radially\n    var Qr = textAspect + 1 / (2 * Math.tan(halfAngle));\n    var maxHalfHeightRotRadial = cd0.r * Math.min(\n        1 / (Math.sqrt(Qr * Qr + 0.5) + Qr),\n        ring / (Math.sqrt(textAspect * textAspect + ring / 2) + textAspect)\n    );\n    var radialTransform = {\n        scale: maxHalfHeightRotRadial * 2 / textBB.height,\n        rCenter: Math.cos(maxHalfHeightRotRadial / cd0.r) -\n            maxHalfHeightRotRadial * textAspect / cd0.r,\n        rotate: (180 / Math.PI * pt.midangle + 720) % 180 - 90\n    };\n\n        // max size if text is rotated tangentially\n    var aspectInv = 1 / textAspect;\n    var Qt = aspectInv + 1 / (2 * Math.tan(halfAngle));\n    var maxHalfWidthTangential = cd0.r * Math.min(\n        1 / (Math.sqrt(Qt * Qt + 0.5) + Qt),\n        ring / (Math.sqrt(aspectInv * aspectInv + ring / 2) + aspectInv)\n    );\n    var tangentialTransform = {\n        scale: maxHalfWidthTangential * 2 / textBB.width,\n        rCenter: Math.cos(maxHalfWidthTangential / cd0.r) -\n            maxHalfWidthTangential / textAspect / cd0.r,\n        rotate: (180 / Math.PI * pt.midangle + 810) % 180 - 90\n    };\n    // if we need a rotated transform, pick the biggest one\n    // even if both are bigger than 1\n    var rotatedTransform = tangentialTransform.scale > radialTransform.scale ?\n            tangentialTransform : radialTransform;\n\n    if(transform.scale < 1 && rotatedTransform.scale > transform.scale) return rotatedTransform;\n    return transform;\n}\n\nfunction getInscribedRadiusFraction(pt, cd0) {\n    if(pt.v === cd0.vTotal && !cd0.trace.hole) return 1;// special case of 100% with no hole\n\n    var halfAngle = Math.PI * Math.min(pt.v / cd0.vTotal, 0.5);\n    return Math.min(1 / (1 + 1 / Math.sin(halfAngle)), (1 - cd0.trace.hole) / 2);\n}\n\nfunction transformOutsideText(textBB, pt) {\n    var x = pt.pxmid[0];\n    var y = pt.pxmid[1];\n    var dx = textBB.width / 2;\n    var dy = textBB.height / 2;\n\n    if(x < 0) dx *= -1;\n    if(y < 0) dy *= -1;\n\n    return {\n        scale: 1,\n        rCenter: 1,\n        rotate: 0,\n        x: dx + Math.abs(dy) * (dx > 0 ? 1 : -1) / 2,\n        y: dy / (1 + x * x / (y * y)),\n        outside: true\n    };\n}\n\nfunction scootLabels(quadrants, trace) {\n    var xHalf, yHalf, equatorFirst, farthestX, farthestY,\n        xDiffSign, yDiffSign, thisQuad, oppositeQuad,\n        wholeSide, i, thisQuadOutside, firstOppositeOutsidePt;\n\n    function topFirst(a, b) { return a.pxmid[1] - b.pxmid[1]; }\n    function bottomFirst(a, b) { return b.pxmid[1] - a.pxmid[1]; }\n\n    function scootOneLabel(thisPt, prevPt) {\n        if(!prevPt) prevPt = {};\n\n        var prevOuterY = prevPt.labelExtraY + (yHalf ? prevPt.yLabelMax : prevPt.yLabelMin);\n        var thisInnerY = yHalf ? thisPt.yLabelMin : thisPt.yLabelMax;\n        var thisOuterY = yHalf ? thisPt.yLabelMax : thisPt.yLabelMin;\n        var thisSliceOuterY = thisPt.cyFinal + farthestY(thisPt.px0[1], thisPt.px1[1]);\n        var newExtraY = prevOuterY - thisInnerY;\n\n        var xBuffer, i, otherPt, otherOuterY, otherOuterX, newExtraX;\n\n        // make sure this label doesn't overlap other labels\n        // this *only* has us move these labels vertically\n        if(newExtraY * yDiffSign > 0) thisPt.labelExtraY = newExtraY;\n\n        // make sure this label doesn't overlap any slices\n        if(!Array.isArray(trace.pull)) return; // this can only happen with array pulls\n\n        for(i = 0; i < wholeSide.length; i++) {\n            otherPt = wholeSide[i];\n\n            // overlap can only happen if the other point is pulled more than this one\n            if(otherPt === thisPt || (\n                (helpers.castOption(trace.pull, thisPt.pts) || 0) >=\n                (helpers.castOption(trace.pull, otherPt.pts) || 0))\n            ) {\n                continue;\n            }\n\n            if((thisPt.pxmid[1] - otherPt.pxmid[1]) * yDiffSign > 0) {\n                // closer to the equator - by construction all of these happen first\n                // move the text vertically to get away from these slices\n                otherOuterY = otherPt.cyFinal + farthestY(otherPt.px0[1], otherPt.px1[1]);\n                newExtraY = otherOuterY - thisInnerY - thisPt.labelExtraY;\n\n                if(newExtraY * yDiffSign > 0) thisPt.labelExtraY += newExtraY;\n\n            } else if((thisOuterY + thisPt.labelExtraY - thisSliceOuterY) * yDiffSign > 0) {\n                // farther from the equator - happens after we've done all the\n                // vertical moving we're going to do\n                // move horizontally to get away from these more polar slices\n\n                // if we're moving horz. based on a slice that's several slices away from this one\n                // then we need some extra space for the lines to labels between them\n                xBuffer = 3 * xDiffSign * Math.abs(i - wholeSide.indexOf(thisPt));\n\n                otherOuterX = otherPt.cxFinal + farthestX(otherPt.px0[0], otherPt.px1[0]);\n                newExtraX = otherOuterX + xBuffer - (thisPt.cxFinal + thisPt.pxmid[0]) - thisPt.labelExtraX;\n\n                if(newExtraX * xDiffSign > 0) thisPt.labelExtraX += newExtraX;\n            }\n        }\n    }\n\n    for(yHalf = 0; yHalf < 2; yHalf++) {\n        equatorFirst = yHalf ? topFirst : bottomFirst;\n        farthestY = yHalf ? Math.max : Math.min;\n        yDiffSign = yHalf ? 1 : -1;\n\n        for(xHalf = 0; xHalf < 2; xHalf++) {\n            farthestX = xHalf ? Math.max : Math.min;\n            xDiffSign = xHalf ? 1 : -1;\n\n            // first sort the array\n            // note this is a copy of cd, so cd itself doesn't get sorted\n            // but we can still modify points in place.\n            thisQuad = quadrants[yHalf][xHalf];\n            thisQuad.sort(equatorFirst);\n\n            oppositeQuad = quadrants[1 - yHalf][xHalf];\n            wholeSide = oppositeQuad.concat(thisQuad);\n\n            thisQuadOutside = [];\n            for(i = 0; i < thisQuad.length; i++) {\n                if(thisQuad[i].yLabelMid !== undefined) thisQuadOutside.push(thisQuad[i]);\n            }\n\n            firstOppositeOutsidePt = false;\n            for(i = 0; yHalf && i < oppositeQuad.length; i++) {\n                if(oppositeQuad[i].yLabelMid !== undefined) {\n                    firstOppositeOutsidePt = oppositeQuad[i];\n                    break;\n                }\n            }\n\n            // each needs to avoid the previous\n            for(i = 0; i < thisQuadOutside.length; i++) {\n                var prevPt = i && thisQuadOutside[i - 1];\n                // bottom half needs to avoid the first label of the top half\n                // top half we still need to call scootOneLabel on the first slice\n                // so we can avoid other slices, but we don't pass a prevPt\n                if(firstOppositeOutsidePt && !i) prevPt = firstOppositeOutsidePt;\n                scootOneLabel(thisQuadOutside[i], prevPt);\n            }\n        }\n    }\n}\n\nfunction scalePies(cdpie, plotSize) {\n    var scaleGroups = [];\n\n    var pieBoxWidth, pieBoxHeight, i, j, cd0, trace,\n        maxPull, scaleGroup, minPxPerValUnit;\n\n    // first figure out the center and maximum radius for each pie\n    for(i = 0; i < cdpie.length; i++) {\n        cd0 = cdpie[i][0];\n        trace = cd0.trace;\n        pieBoxWidth = plotSize.w * (trace.domain.x[1] - trace.domain.x[0]);\n        pieBoxHeight = plotSize.h * (trace.domain.y[1] - trace.domain.y[0]);\n\n        maxPull = trace.pull;\n        if(Array.isArray(maxPull)) {\n            maxPull = 0;\n            for(j = 0; j < trace.pull.length; j++) {\n                if(trace.pull[j] > maxPull) maxPull = trace.pull[j];\n            }\n        }\n\n        cd0.r = Math.min(pieBoxWidth, pieBoxHeight) / (2 + 2 * maxPull);\n\n        cd0.cx = plotSize.l + plotSize.w * (trace.domain.x[1] + trace.domain.x[0]) / 2;\n        cd0.cy = plotSize.t + plotSize.h * (2 - trace.domain.y[1] - trace.domain.y[0]) / 2;\n\n        if(trace.scalegroup && scaleGroups.indexOf(trace.scalegroup) === -1) {\n            scaleGroups.push(trace.scalegroup);\n        }\n    }\n\n    // Then scale any pies that are grouped\n    for(j = 0; j < scaleGroups.length; j++) {\n        minPxPerValUnit = Infinity;\n        scaleGroup = scaleGroups[j];\n\n        for(i = 0; i < cdpie.length; i++) {\n            cd0 = cdpie[i][0];\n            if(cd0.trace.scalegroup === scaleGroup) {\n                minPxPerValUnit = Math.min(minPxPerValUnit,\n                    cd0.r * cd0.r / cd0.vTotal);\n            }\n        }\n\n        for(i = 0; i < cdpie.length; i++) {\n            cd0 = cdpie[i][0];\n            if(cd0.trace.scalegroup === scaleGroup) {\n                cd0.r = Math.sqrt(minPxPerValUnit * cd0.vTotal);\n            }\n        }\n    }\n\n}\n\nfunction setCoords(cd) {\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var currentAngle = trace.rotation * Math.PI / 180;\n    var angleFactor = 2 * Math.PI / cd0.vTotal;\n    var firstPt = 'px0';\n    var lastPt = 'px1';\n\n    var i, cdi, currentCoords;\n\n    if(trace.direction === 'counterclockwise') {\n        for(i = 0; i < cd.length; i++) {\n            if(!cd[i].hidden) break; // find the first non-hidden slice\n        }\n        if(i === cd.length) return; // all slices hidden\n\n        currentAngle += angleFactor * cd[i].v;\n        angleFactor *= -1;\n        firstPt = 'px1';\n        lastPt = 'px0';\n    }\n\n    function getCoords(angle) {\n        return [cd0.r * Math.sin(angle), -cd0.r * Math.cos(angle)];\n    }\n\n    currentCoords = getCoords(currentAngle);\n\n    for(i = 0; i < cd.length; i++) {\n        cdi = cd[i];\n        if(cdi.hidden) continue;\n\n        cdi[firstPt] = currentCoords;\n\n        currentAngle += angleFactor * cdi.v / 2;\n        cdi.pxmid = getCoords(currentAngle);\n        cdi.midangle = currentAngle;\n\n        currentAngle += angleFactor * cdi.v / 2;\n        currentCoords = getCoords(currentAngle);\n\n        cdi[lastPt] = currentCoords;\n\n        cdi.largeArc = (cdi.v > cd0.vTotal / 2) ? 1 : 0;\n    }\n}\n",null]}