{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/pie/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/pie/defaults.js","mtime":1529418310729},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar attributes = require('./attributes');\nvar handleDomainDefaults = require('../../plots/domain').defaults;\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var coerceFont = Lib.coerceFont;\n    var len;\n\n    var vals = coerce('values');\n    var hasVals = Lib.isArrayOrTypedArray(vals);\n    var labels = coerce('labels');\n    if(Array.isArray(labels)) {\n        len = labels.length;\n        if(hasVals) len = Math.min(len, vals.length);\n    }\n    if(!Array.isArray(labels)) {\n        if(!hasVals) {\n            // must have at least one of vals or labels\n            traceOut.visible = false;\n            return;\n        }\n\n        len = vals.length;\n\n        coerce('label0');\n        coerce('dlabel');\n    }\n\n    if(!len) {\n        traceOut.visible = false;\n        return;\n    }\n    traceOut._length = len;\n\n    var lineWidth = coerce('marker.line.width');\n    if(lineWidth) coerce('marker.line.color');\n\n    coerce('marker.colors');\n\n    coerce('scalegroup');\n    // TODO: hole needs to be coerced to the same value within a scaleegroup\n\n    var textData = coerce('text');\n    var textInfo = coerce('textinfo', Array.isArray(textData) ? 'text+percent' : 'percent');\n    coerce('hovertext');\n\n    if(textInfo && textInfo !== 'none') {\n        var textPosition = coerce('textposition'),\n            hasBoth = Array.isArray(textPosition) || textPosition === 'auto',\n            hasInside = hasBoth || textPosition === 'inside',\n            hasOutside = hasBoth || textPosition === 'outside';\n\n        if(hasInside || hasOutside) {\n            var dfltFont = coerceFont(coerce, 'textfont', layout.font);\n            if(hasInside) coerceFont(coerce, 'insidetextfont', dfltFont);\n            if(hasOutside) coerceFont(coerce, 'outsidetextfont', dfltFont);\n        }\n    }\n\n    handleDomainDefaults(traceOut, layout, coerce);\n\n    coerce('hole');\n\n    coerce('sort');\n    coerce('direction');\n    coerce('rotation');\n\n    coerce('pull');\n};\n",null]}