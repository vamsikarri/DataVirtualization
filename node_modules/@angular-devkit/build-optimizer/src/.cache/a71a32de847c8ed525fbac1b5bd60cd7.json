{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/main.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/world-calendars/dist/main.js","mtime":1529418312979},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nï»¿/* http://keith-wood.name/calendars.html\n   Calendars for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\n\nvar assign = require('object-assign');\n\n\nfunction Calendars() {\n    this.regionalOptions = [];\n    this.regionalOptions[''] = {\n        invalidCalendar: 'Calendar {0} not found',\n        invalidDate: 'Invalid {0} date',\n        invalidMonth: 'Invalid {0} month',\n        invalidYear: 'Invalid {0} year',\n        differentCalendars: 'Cannot mix {0} and {1} dates'\n    };\n    this.local = this.regionalOptions[''];\n    this.calendars = {};\n    this._localCals = {};\n}\n\n/** Create the calendars plugin.\n    <p>Provides support for various world calendars in a consistent manner.</p>\n     @class Calendars\n    @example _exports.instance('julian').newDate(2014, 12, 25) */\nassign(Calendars.prototype, {\n\n    /** Obtain a calendar implementation and localisation.\n        @memberof Calendars\n        @param [name='gregorian'] {string} The name of the calendar, e.g. 'gregorian', 'persian', 'islamic'.\n        @param [language=''] {string} The language code to use for localisation (default is English).\n        @return {Calendar} The calendar and localisation.\n        @throws Error if calendar not found. */\n    instance: function(name, language) {\n        name = (name || 'gregorian').toLowerCase();\n        language = language || '';\n        var cal = this._localCals[name + '-' + language];\n        if (!cal && this.calendars[name]) {\n            cal = new this.calendars[name](language);\n            this._localCals[name + '-' + language] = cal;\n        }\n        if (!cal) {\n            throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar).\n                replace(/\\{0\\}/, name);\n        }\n        return cal;\n    },\n\n    /** Create a new date - for today if no other parameters given.\n        @memberof Calendars\n        @param year {CDate|number} The date to copy or the year for the date.\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @param [calendar='gregorian'] {BaseCalendar|string} The underlying calendar or the name of the calendar.\n        @param [language=''] {string} The language to use for localisation (default English).\n        @return {CDate} The new date.\n        @throws Error if an invalid date. */\n    newDate: function(year, month, day, calendar, language) {\n        calendar = (year != null && year.year ? year.calendar() : (typeof calendar === 'string' ?\n            this.instance(calendar, language) : calendar)) || this.instance();\n        return calendar.newDate(year, month, day);\n    },\n    \n    /** A simple digit substitution function for localising numbers via the Calendar digits option.\n        @member Calendars\n        @param digits {string[]} The substitute digits, for 0 through 9.\n        @return {function} The substitution function. */\n    substituteDigits: function(digits) {\n        return function(value) {\n            return (value + '').replace(/[0-9]/g, function(digit) {\n                return digits[digit];\n            });\n        }\n    },\n    \n    /** Digit substitution function for localising Chinese style numbers via the Calendar digits option.\n        @member Calendars\n        @param digits {string[]} The substitute digits, for 0 through 9.\n        @param powers {string[]} The characters denoting powers of 10, i.e. 1, 10, 100, 1000.\n        @return {function} The substitution function. */\n    substituteChineseDigits: function(digits, powers) {\n        return function(value) {\n            var localNumber = '';\n            var power = 0;\n            while (value > 0) {\n                var units = value % 10;\n                localNumber = (units === 0 ? '' : digits[units] + powers[power]) + localNumber;\n                power++;\n                value = Math.floor(value / 10);\n            }\n            if (localNumber.indexOf(digits[1] + powers[1]) === 0) {\n                localNumber = localNumber.substr(1);\n            }\n            return localNumber || digits[0];\n        }\n    }\n});\n\n/** Generic date, based on a particular calendar.\n    @class CDate\n    @param calendar {BaseCalendar} The underlying calendar implementation.\n    @param year {number} The year for this date.\n    @param month {number} The month for this date.\n    @param day {number} The day for this date.\n    @return {CDate} The date object.\n    @throws Error if an invalid date. */\nfunction CDate(calendar, year, month, day) {\n    this._calendar = calendar;\n    this._year = year;\n    this._month = month;\n    this._day = day;\n    if (this._calendar._validateLevel === 0 &&\n            !this._calendar.isValid(this._year, this._month, this._day)) {\n        throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).\n            replace(/\\{0\\}/, this._calendar.local.name);\n    }\n}\n\n/** Pad a numeric value with leading zeroes.\n    @private\n    @param value {number} The number to format.\n    @param length {number} The minimum length.\n    @return {string} The formatted number. */\nfunction pad(value, length) {\n    value = '' + value;\n    return '000000'.substring(0, length - value.length) + value;\n}\n\nassign(CDate.prototype, {\n\n    /** Create a new date.\n        @memberof CDate\n        @param [year] {CDate|number} The date to copy or the year for the date (default this date).\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @return {CDate} The new date.\n        @throws Error if an invalid date. */\n    newDate: function(year, month, day) {\n        return this._calendar.newDate((year == null ? this : year), month, day);\n    },\n\n    /** Set or retrieve the year for this date.\n        @memberof CDate\n        @param [year] {number} The year for the date.\n        @return {number|CDate} The date's year (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    year: function(year) {\n        return (arguments.length === 0 ? this._year : this.set(year, 'y'));\n    },\n\n    /** Set or retrieve the month for this date.\n        @memberof CDate\n        @param [month] {number} The month for the date.\n        @return {number|CDate} The date's month (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    month: function(month) {\n        return (arguments.length === 0 ? this._month : this.set(month, 'm'));\n    },\n\n    /** Set or retrieve the day for this date.\n        @memberof CDate\n        @param [day] {number} The day for the date.\n        @return {number|CData} The date's day (if no parameter) or the updated date.\n        @throws Error if an invalid date. */\n    day: function(day) {\n        return (arguments.length === 0 ? this._day : this.set(day, 'd'));\n    },\n\n    /** Set new values for this date.\n        @memberof CDate\n        @param year {number} The year for the date.\n        @param month {number} The month for the date.\n        @param day {number} The day for the date.\n        @return {CDate} The updated date.\n        @throws Error if an invalid date. */\n    date: function(year, month, day) {\n        if (!this._calendar.isValid(year, month, day)) {\n            throw (_exports.local.invalidDate || _exports.regionalOptions[''].invalidDate).\n                replace(/\\{0\\}/, this._calendar.local.name);\n        }\n        this._year = year;\n        this._month = month;\n        this._day = day;\n        return this;\n    },\n\n    /** Determine whether this date is in a leap year.\n        @memberof CDate\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not. */\n    leapYear: function() {\n        return this._calendar.leapYear(this);\n    },\n\n    /** Retrieve the epoch designator for this date, e.g. BCE or CE.\n        @memberof CDate\n        @return {string} The current epoch. */\n    epoch: function() {\n        return this._calendar.epoch(this);\n    },\n\n    /** Format the year, if not a simple sequential number.\n        @memberof CDate\n        @return {string} The formatted year. */\n    formatYear: function() {\n        return this._calendar.formatYear(this);\n    },\n\n    /** Retrieve the month of the year for this date,\n        i.e. the month's position within a numbered year.\n        @memberof CDate\n        @return {number} The month of the year: <code>minMonth</code> to months per year. */\n    monthOfYear: function() {\n        return this._calendar.monthOfYear(this);\n    },\n\n    /** Retrieve the week of the year for this date.\n        @memberof CDate\n        @return {number} The week of the year: 1 to weeks per year. */\n    weekOfYear: function() {\n        return this._calendar.weekOfYear(this);\n    },\n\n    /** Retrieve the number of days in the year for this date.\n        @memberof CDate\n        @return {number} The number of days in this year. */\n    daysInYear: function() {\n        return this._calendar.daysInYear(this);\n    },\n\n    /** Retrieve the day of the year for this date.\n        @memberof CDate\n        @return {number} The day of the year: 1 to days per year. */\n    dayOfYear: function() {\n        return this._calendar.dayOfYear(this);\n    },\n\n    /** Retrieve the number of days in the month for this date.\n        @memberof CDate\n        @return {number} The number of days. */\n    daysInMonth: function() {\n        return this._calendar.daysInMonth(this);\n    },\n\n    /** Retrieve the day of the week for this date.\n        @memberof CDate\n        @return {number} The day of the week: 0 to number of days - 1. */\n    dayOfWeek: function() {\n        return this._calendar.dayOfWeek(this);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof CDate\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not. */\n    weekDay: function() {\n        return this._calendar.weekDay(this);\n    },\n\n    /** Retrieve additional information about this date.\n        @memberof CDate\n        @return {object} Additional information - contents depends on calendar. */\n    extraInfo: function() {\n        return this._calendar.extraInfo(this);\n    },\n\n    /** Add period(s) to a date.\n        @memberof CDate\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    add: function(offset, period) {\n        return this._calendar.add(this, offset, period);\n    },\n\n    /** Set a portion of the date.\n        @memberof CDate\n        @param value {number} The new value for the period.\n        @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if not a valid date. */\n    set: function(value, period) {\n        return this._calendar.set(this, value, period);\n    },\n\n    /** Compare this date to another date.\n        @memberof CDate\n        @param date {CDate} The other date.\n        @return {number} -1 if this date is before the other date,\n                0 if they are equal, or +1 if this date is after the other date. */\n    compareTo: function(date) {\n        if (this._calendar.name !== date._calendar.name) {\n            throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).\n                replace(/\\{0\\}/, this._calendar.local.name).replace(/\\{1\\}/, date._calendar.local.name);\n        }\n        var c = (this._year !== date._year ? this._year - date._year :\n            this._month !== date._month ? this.monthOfYear() - date.monthOfYear() :\n            this._day - date._day);\n        return (c === 0 ? 0 : (c < 0 ? -1 : +1));\n    },\n\n    /** Retrieve the calendar backing this date.\n        @memberof CDate\n        @return {BaseCalendar} The calendar implementation. */\n    calendar: function() {\n        return this._calendar;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof CDate\n        @return {number} The equivalent Julian date. */\n    toJD: function() {\n        return this._calendar.toJD(this);\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof CDate\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        return this._calendar.fromJD(jd);\n    },\n\n    /** Convert this date to a standard (Gregorian) JavaScript Date.\n        @memberof CDate\n        @return {Date} The equivalent JavaScript date. */\n    toJSDate: function() {\n        return this._calendar.toJSDate(this);\n    },\n\n    /** Create a new date from a standard (Gregorian) JavaScript Date.\n        @memberof CDate\n        @param jsd {Date} The JavaScript date to convert.\n        @return {CDate} The equivalent date. */\n    fromJSDate: function(jsd) {\n        return this._calendar.fromJSDate(jsd);\n    },\n\n    /** Convert to a string for display.\n        @memberof CDate\n        @return {string} This date as a string. */\n    toString: function() {\n        return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) +\n            '-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);\n    }\n});\n\n/** Basic functionality for all calendars.\n    Other calendars should extend this:\n    <pre>OtherCalendar.prototype = new BaseCalendar;</pre>\n    @class BaseCalendar */\nfunction BaseCalendar() {\n    this.shortYearCutoff = '+10';\n}\n\nassign(BaseCalendar.prototype, {\n    _validateLevel: 0, // \"Stack\" to turn validation on/off\n\n    /** Create a new date within this calendar - today if no parameters given.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to duplicate or the year for the date.\n        @param [month] {number} The month for the date.\n        @param [day] {number} The day for the date.\n        @return {CDate} The new date.\n        @throws Error if not a valid date or a different calendar used. */\n    newDate: function(year, month, day) {\n        if (year == null) {\n            return this.today();\n        }\n        if (year.year) {\n            this._validate(year, month, day,\n                _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n            day = year.day();\n            month = year.month();\n            year = year.year();\n        }\n        return new CDate(this, year, month, day);\n    },\n\n    /** Create a new date for today.\n        @memberof BaseCalendar\n        @return {CDate} Today's date. */\n    today: function() {\n        return this.fromJSDate(new Date());\n    },\n\n    /** Retrieve the epoch designator for this date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {string} The current epoch.\n        @throws Error if an invalid year or a different calendar used. */\n    epoch: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1]);\n    },\n\n    /** Format the year, if not a simple sequential number\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to format or the year to format.\n        @return {string} The formatted year.\n        @throws Error if an invalid year or a different calendar used. */\n    formatYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4)\n    },\n\n    /** Retrieve the number of months in a year.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of months.\n        @throws Error if an invalid year or a different calendar used. */\n    monthsInYear: function(year) {\n        this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return 12;\n    },\n\n    /** Calculate the month's ordinal position within the year -\n        for those calendars that don't start at month 1!\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param month {number} The month to examine.\n        @return {number} The ordinal position, starting from <code>minMonth</code>.\n        @throws Error if an invalid year/month or a different calendar used. */\n    monthOfYear: function(year, month) {\n        var date = this._validate(year, month, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return (date.month() + this.monthsInYear(date) - this.firstMonth) %\n            this.monthsInYear(date) + this.minMonth;\n    },\n\n    /** Calculate actual month from ordinal position, starting from minMonth.\n        @memberof BaseCalendar\n        @param year {number} The year to examine.\n        @param ord {number} The month's ordinal position.\n        @return {number} The month's number.\n        @throws Error if an invalid year/month. */\n    fromMonthOfYear: function(year, ord) {\n        var m = (ord + this.firstMonth - 2 * this.minMonth) %\n            this.monthsInYear(year) + this.minMonth;\n        this._validate(year, m, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return m;\n    },\n\n    /** Retrieve the number of days in a year.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {number} The number of days.\n        @throws Error if an invalid year or a different calendar used. */\n    daysInYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        return (this.leapYear(date) ? 366 : 365);\n    },\n\n    /** Retrieve the day of the year for a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The day of the year.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfYear: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return date.toJD() - this.newDate(date.year(),\n            this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;\n    },\n\n    /** Retrieve the number of days in a week.\n        @memberof BaseCalendar\n        @return {number} The number of days. */\n    daysInWeek: function() {\n        return 7;\n    },\n\n    /** Retrieve the day of the week for a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The day of the week: 0 to number of days - 1.\n        @throws Error if an invalid date or a different calendar used. */\n    dayOfWeek: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();\n    },\n\n    /** Retrieve additional information about a date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {object} Additional information - contents depends on calendar.\n        @throws Error if an invalid date or a different calendar used. */\n    extraInfo: function(year, month, day) {\n        this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return {};\n    },\n\n    /** Add period(s) to a date.\n        Cater for no year zero.\n        @memberof BaseCalendar\n        @param date {CDate} The starting date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if a different calendar used. */\n    add: function(date, offset, period) {\n        this._validate(date, this.minMonth, this.minDay,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return this._correctAdd(date, this._add(date, offset, period), offset, period);\n    },\n\n    /** Add period(s) to a date.\n        @memberof BaseCalendar\n        @private\n        @param date {CDate} The starting date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    _add: function(date, offset, period) {\n        this._validateLevel++;\n        if (period === 'd' || period === 'w') {\n            var jd = date.toJD() + offset * (period === 'w' ? this.daysInWeek() : 1);\n            var d = date.calendar().fromJD(jd);\n            this._validateLevel--;\n            return [d.year(), d.month(), d.day()];\n        }\n        try {\n            var y = date.year() + (period === 'y' ? offset : 0);\n            var m = date.monthOfYear() + (period === 'm' ? offset : 0);\n            var d = date.day();// + (period === 'd' ? offset : 0) +\n                //(period === 'w' ? offset * this.daysInWeek() : 0);\n            var resyncYearMonth = function(calendar) {\n                while (m < calendar.minMonth) {\n                    y--;\n                    m += calendar.monthsInYear(y);\n                }\n                var yearMonths = calendar.monthsInYear(y);\n                while (m > yearMonths - 1 + calendar.minMonth) {\n                    y++;\n                    m -= yearMonths;\n                    yearMonths = calendar.monthsInYear(y);\n                }\n            };\n            if (period === 'y') {\n                if (date.month() !== this.fromMonthOfYear(y, m)) { // Hebrew\n                    m = this.newDate(y, date.month(), this.minDay).monthOfYear();\n                }\n                m = Math.min(m, this.monthsInYear(y));\n                d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n            }\n            else if (period === 'm') {\n                resyncYearMonth(this);\n                d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));\n            }\n            var ymd = [y, this.fromMonthOfYear(y, m), d];\n            this._validateLevel--;\n            return ymd;\n        }\n        catch (e) {\n            this._validateLevel--;\n            throw e;\n        }\n    },\n\n    /** Correct a candidate date after adding period(s) to a date.\n        Handle no year zero if necessary.\n        @memberof BaseCalendar\n        @private\n        @param date {CDate} The starting date.\n        @param ymd {number[]} The added date.\n        @param offset {number} The number of periods to adjust by.\n        @param period {string} One of 'y' for year, 'm' for month, 'w' for week, 'd' for day.\n        @return {CDate} The updated date. */\n    _correctAdd: function(date, ymd, offset, period) {\n        if (!this.hasYearZero && (period === 'y' || period === 'm')) {\n            if (ymd[0] === 0 || // In year zero\n                    (date.year() > 0) !== (ymd[0] > 0)) { // Crossed year zero\n                var adj = {y: [1, 1, 'y'], m: [1, this.monthsInYear(-1), 'm'],\n                    w: [this.daysInWeek(), this.daysInYear(-1), 'd'],\n                    d: [1, this.daysInYear(-1), 'd']}[period];\n                var dir = (offset < 0 ? -1 : +1);\n                ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);\n            }\n        }\n        return date.date(ymd[0], ymd[1], ymd[2]);\n    },\n\n    /** Set a portion of the date.\n        @memberof BaseCalendar\n        @param date {CDate} The starting date.\n        @param value {number} The new value for the period.\n        @param period {string} One of 'y' for year, 'm' for month, 'd' for day.\n        @return {CDate} The updated date.\n        @throws Error if an invalid date or a different calendar used. */\n    set: function(date, value, period) {\n        this._validate(date, this.minMonth, this.minDay,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        var y = (period === 'y' ? value : date.year());\n        var m = (period === 'm' ? value : date.month());\n        var d = (period === 'd' ? value : date.day());\n        if (period === 'y' || period === 'm') {\n            d = Math.min(d, this.daysInMonth(y, m));\n        }\n        return date.date(y, m, d);\n    },\n\n    /** Determine whether a date is valid for this calendar.\n        @memberof BaseCalendar\n        @param year {number} The year to examine.\n        @param month {number} The month to examine.\n        @param day {number} The day to examine.\n        @return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */\n    isValid: function(year, month, day) {\n        this._validateLevel++;\n        var valid = (this.hasYearZero || year !== 0);\n        if (valid) {\n            var date = this.newDate(year, month, this.minDay);\n            valid = (month >= this.minMonth && month - this.minMonth < this.monthsInYear(date)) &&\n                (day >= this.minDay && day - this.minDay < this.daysInMonth(date));\n        }\n        this._validateLevel--;\n        return valid;\n    },\n\n    /** Convert the date to a standard (Gregorian) JavaScript Date.\n        @memberof BaseCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {Date} The equivalent JavaScript date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJSDate: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        return _exports.instance().fromJD(this.toJD(date)).toJSDate();\n    },\n\n    /** Convert the date from a standard (Gregorian) JavaScript Date.\n        @memberof BaseCalendar\n        @param jsd {Date} The JavaScript date.\n        @return {CDate} The equivalent calendar date. */\n    fromJSDate: function(jsd) {\n        return this.fromJD(_exports.instance().fromJSDate(jsd).toJD());\n    },\n\n    /** Check that a candidate date is from the same calendar and is valid.\n        @memberof BaseCalendar\n        @private\n        @param year {CDate|number} The date to validate or the year to validate.\n        @param [month] {number} The month to validate.\n        @param [day] {number} The day to validate.\n        @param error {string} Rrror message if invalid.\n        @throws Error if different calendars used or invalid date. */\n    _validate: function(year, month, day, error) {\n        if (year.year) {\n            if (this._validateLevel === 0 && this.name !== year.calendar().name) {\n                throw (_exports.local.differentCalendars || _exports.regionalOptions[''].differentCalendars).\n                    replace(/\\{0\\}/, this.local.name).replace(/\\{1\\}/, year.calendar().local.name);\n            }\n            return year;\n        }\n        try {\n            this._validateLevel++;\n            if (this._validateLevel === 1 && !this.isValid(year, month, day)) {\n                throw error.replace(/\\{0\\}/, this.local.name);\n            }\n            var date = this.newDate(year, month, day);\n            this._validateLevel--;\n            return date;\n        }\n        catch (e) {\n            this._validateLevel--;\n            throw e;\n        }\n    }\n});\n\n/** Implementation of the Proleptic Gregorian Calendar.\n    See <a href=\":http://en.wikipedia.org/wiki/Gregorian_calendar\">http://en.wikipedia.org/wiki/Gregorian_calendar</a>\n    and <a href=\"http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\">http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar</a>.\n    @class GregorianCalendar\n    @augments BaseCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\nfunction GregorianCalendar(language) {\n    this.local = this.regionalOptions[language] || this.regionalOptions[''];\n}\n\nGregorianCalendar.prototype = new BaseCalendar;\n\nassign(GregorianCalendar.prototype, {\n    /** The calendar name.\n        @memberof GregorianCalendar */\n    name: 'Gregorian',\n     /** Julian date of start of Gregorian epoch: 1 January 0001 CE.\n        @memberof GregorianCalendar */\n    jdEpoch: 1721425.5,\n     /** Days per month in a common year.\n        @memberof GregorianCalendar */\n    daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n     /** <code>true</code> if has a year zero, <code>false</code> if not.\n        @memberof GregorianCalendar */\n    hasYearZero: false,\n    /** The minimum month number.\n        @memberof GregorianCalendar */\n    minMonth: 1,\n    /** The first month in the year.\n        @memberof GregorianCalendar */\n    firstMonth: 1,\n     /** The minimum day number.\n        @memberof GregorianCalendar */\n    minDay: 1,\n\n    /** Localisations for the plugin.\n        Entries are objects indexed by the language code ('' being the default US/English).\n        Each object has the following attributes.\n        @memberof GregorianCalendar\n        @property name {string} The calendar name.\n        @property epochs {string[]} The epoch names.\n        @property monthNames {string[]} The long names of the months of the year.\n        @property monthNamesShort {string[]} The short names of the months of the year.\n        @property dayNames {string[]} The long names of the days of the week.\n        @property dayNamesShort {string[]} The short names of the days of the week.\n        @property dayNamesMin {string[]} The minimal names of the days of the week.\n        @property dateFormat {string} The date format for this calendar.\n                See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n        @property firstDay {number} The number of the first day of the week, starting at 0.\n        @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n    regionalOptions: { // Localisations\n        '': {\n            name: 'Gregorian',\n            epochs: ['BCE', 'CE'],\n            monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\n            'July', 'August', 'September', 'October', 'November', 'December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            digits: null,\n            dateFormat: 'mm/dd/yyyy',\n            firstDay: 0,\n            isRTL: false\n        }\n    },\n    \n    /** Determine whether this date is in a leap year.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n        @throws Error if an invalid year or a different calendar used. */\n    leapYear: function(year) {\n        var date = this._validate(year, this.minMonth, this.minDay,\n            _exports.local.invalidYear || _exports.regionalOptions[''].invalidYear);\n        var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    },\n\n    /** Determine the week of the year for a date - ISO 8601.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {number} The week of the year, starting from 1.\n        @throws Error if an invalid date or a different calendar used. */\n    weekOfYear: function(year, month, day) {\n        // Find Thursday of this week starting on Monday\n        var checkDate = this.newDate(year, month, day);\n        checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');\n        return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n    },\n\n    /** Retrieve the number of days in a month.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year of the month.\n        @param [month] {number} The month.\n        @return {number} The number of days in this month.\n        @throws Error if an invalid month/year or a different calendar used. */\n    daysInMonth: function(year, month) {\n        var date = this._validate(year, month, this.minDay,\n            _exports.local.invalidMonth || _exports.regionalOptions[''].invalidMonth);\n        return this.daysPerMonth[date.month() - 1] +\n            (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n    },\n\n    /** Determine whether this date is a week day.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to examine or the year to examine.\n        @param [month] {number} The month to examine.\n        @param [day] {number} The day to examine.\n        @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n        @throws Error if an invalid date or a different calendar used. */\n    weekDay: function(year, month, day) {\n        return (this.dayOfWeek(year, month, day) || 7) < 6;\n    },\n\n    /** Retrieve the Julian date equivalent for this date,\n        i.e. days since January 1, 4713 BCE Greenwich noon.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {number} The equivalent Julian date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJD: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        year = date.year();\n        month = date.month();\n        day = date.day();\n        if (year < 0) { year++; } // No year zero\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        if (month < 3) {\n            month += 12;\n            year--;\n        }\n        var a = Math.floor(year / 100);\n        var b = 2 - a + Math.floor(a / 4);\n        return Math.floor(365.25 * (year + 4716)) +\n            Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;\n    },\n\n    /** Create a new date from a Julian date.\n        @memberof GregorianCalendar\n        @param jd {number} The Julian date to convert.\n        @return {CDate} The equivalent date. */\n    fromJD: function(jd) {\n        // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\n        var z = Math.floor(jd + 0.5);\n        var a = Math.floor((z - 1867216.25) / 36524.25);\n        a = z + 1 + a - Math.floor(a / 4);\n        var b = a + 1524;\n        var c = Math.floor((b - 122.1) / 365.25);\n        var d = Math.floor(365.25 * c);\n        var e = Math.floor((b - d) / 30.6001);\n        var day = b - d - Math.floor(e * 30.6001);\n        var month = e - (e > 13.5 ? 13 : 1);\n        var year = c - (month > 2.5 ? 4716 : 4715);\n        if (year <= 0) { year--; } // No year zero\n        return this.newDate(year, month, day);\n    },\n\n    /** Convert this date to a standard (Gregorian) JavaScript Date.\n        @memberof GregorianCalendar\n        @param year {CDate|number} The date to convert or the year to convert.\n        @param [month] {number} The month to convert.\n        @param [day] {number} The day to convert.\n        @return {Date} The equivalent JavaScript date.\n        @throws Error if an invalid date or a different calendar used. */\n    toJSDate: function(year, month, day) {\n        var date = this._validate(year, month, day,\n            _exports.local.invalidDate || _exports.regionalOptions[''].invalidDate);\n        var jsd = new Date(date.year(), date.month() - 1, date.day());\n        jsd.setHours(0);\n        jsd.setMinutes(0);\n        jsd.setSeconds(0);\n        jsd.setMilliseconds(0);\n        // Hours may be non-zero on daylight saving cut-over:\n        // > 12 when midnight changeover, but then cannot generate\n        // midnight datetime, so jump to 1AM, otherwise reset.\n        jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);\n        return jsd;\n    },\n\n    /** Create a new date from a standard (Gregorian) JavaScript Date.\n        @memberof GregorianCalendar\n        @param jsd {Date} The JavaScript date to convert.\n        @return {CDate} The equivalent date. */\n    fromJSDate: function(jsd) {\n        return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());\n    }\n});\n\n// Singleton manager\nvar _exports = module.exports = new Calendars();\n\n// Date template\n_exports.cdate = CDate;\n\n// Base calendar template\n_exports.baseCalendar = BaseCalendar;\n\n// Gregorian calendar implementation\n_exports.calendars.gregorian = GregorianCalendar;\n\n",null]}