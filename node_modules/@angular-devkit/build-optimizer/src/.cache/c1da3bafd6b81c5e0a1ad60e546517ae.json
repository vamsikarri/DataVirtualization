{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/index.js","mtime":1529418310692},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar mapboxgl = require('mapbox-gl');\n\nvar Lib = require('../../lib');\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar createMapbox = require('./mapbox');\nvar constants = require('./constants');\n\nvar MAPBOX = 'mapbox';\n\nfor(var k in constants.styleRules) {\n    Lib.addStyleRule('.mapboxgl-' + k, constants.styleRules[k]);\n}\n\nexports.name = MAPBOX;\n\nexports.attr = 'subplot';\n\nexports.idRoot = MAPBOX;\n\nexports.idRegex = exports.attrRegex = Lib.counterRegex(MAPBOX);\n\nexports.attributes = {\n    subplot: {\n        valType: 'subplotid',\n        role: 'info',\n        dflt: 'mapbox',\n        editType: 'calc',\n        description: [\n            'Sets a reference between this trace\\'s data coordinates and',\n            'a mapbox subplot.',\n            'If *mapbox* (the default value), the data refer to `layout.mapbox`.',\n            'If *mapbox2*, the data refer to `layout.mapbox2`, and so on.'\n        ].join(' ')\n    }\n};\n\nexports.layoutAttributes = require('./layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.plot = function plotMapbox(gd) {\n    var fullLayout = gd._fullLayout;\n    var calcData = gd.calcdata;\n    var mapboxIds = fullLayout._subplots[MAPBOX];\n\n    if(mapboxgl.version !== constants.requiredVersion) {\n        throw new Error(constants.wrongVersionErrorMsg);\n    }\n\n    var accessToken = findAccessToken(gd, mapboxIds);\n    mapboxgl.accessToken = accessToken;\n\n    for(var i = 0; i < mapboxIds.length; i++) {\n        var id = mapboxIds[i],\n            subplotCalcData = getSubplotCalcData(calcData, MAPBOX, id),\n            opts = fullLayout[id],\n            mapbox = opts._subplot;\n\n        if(!mapbox) {\n            mapbox = createMapbox({\n                gd: gd,\n                container: fullLayout._glcontainer.node(),\n                id: id,\n                fullLayout: fullLayout,\n                staticPlot: gd._context.staticPlot\n            });\n\n            fullLayout[id]._subplot = mapbox;\n        }\n\n        if(!mapbox.viewInitial) {\n            mapbox.viewInitial = {\n                center: Lib.extendFlat({}, opts.center),\n                zoom: opts.zoom,\n                bearing: opts.bearing,\n                pitch: opts.pitch\n            };\n        }\n\n        mapbox.plot(subplotCalcData, fullLayout, gd._promises);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldMapboxKeys = oldFullLayout._subplots[MAPBOX] || [];\n\n    for(var i = 0; i < oldMapboxKeys.length; i++) {\n        var oldMapboxKey = oldMapboxKeys[i];\n\n        if(!newFullLayout[oldMapboxKey] && !!oldFullLayout[oldMapboxKey]._subplot) {\n            oldFullLayout[oldMapboxKey]._subplot.destroy();\n        }\n    }\n};\n\nexports.toSVG = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[MAPBOX];\n    var size = fullLayout._size;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var opts = fullLayout[subplotIds[i]],\n            domain = opts.domain,\n            mapbox = opts._subplot;\n\n        var imageData = mapbox.toImage('png');\n        var image = fullLayout._glimages.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            x: size.l + size.w * domain.x[0],\n            y: size.t + size.h * (1 - domain.y[1]),\n            width: size.w * (domain.x[1] - domain.x[0]),\n            height: size.h * (domain.y[1] - domain.y[0]),\n            preserveAspectRatio: 'none'\n        });\n\n        mapbox.destroy();\n    }\n};\n\nfunction findAccessToken(gd, mapboxIds) {\n    var fullLayout = gd._fullLayout,\n        context = gd._context;\n\n    // special case for Mapbox Atlas users\n    if(context.mapboxAccessToken === '') return '';\n\n    // Take the first token we find in a mapbox subplot.\n    // These default to the context value but may be overridden.\n    for(var i = 0; i < mapboxIds.length; i++) {\n        var opts = fullLayout[mapboxIds[i]];\n\n        if(opts.accesstoken) {\n            return opts.accesstoken;\n        }\n    }\n\n    throw new Error(constants.noAccessTokenErrorMsg);\n}\n\nexports.updateFx = function(fullLayout) {\n    var subplotIds = fullLayout._subplots[MAPBOX];\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotObj = fullLayout[subplotIds[i]]._subplot;\n        subplotObj.updateFx(fullLayout);\n    }\n};\n",null]}