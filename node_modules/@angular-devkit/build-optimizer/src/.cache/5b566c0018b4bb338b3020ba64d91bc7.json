{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/layout_attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/layout_attributes.js","mtime":1529418310691},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\nvar domainAttrs = require('../../domain').attributes;\nvar extendFlat = require('../../../lib/extend').extendFlat;\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n    return {\n        x: {\n            valType: 'number',\n            role: 'info',\n            dflt: x,\n            editType: 'camera'\n        },\n        y: {\n            valType: 'number',\n            role: 'info',\n            dflt: y,\n            editType: 'camera'\n        },\n        z: {\n            valType: 'number',\n            role: 'info',\n            dflt: z,\n            editType: 'camera'\n        },\n        editType: 'camera'\n    };\n}\n\nmodule.exports = {\n    _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n\n    bgcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: 'rgba(0,0,0,0)',\n        editType: 'plot'\n    },\n    camera: {\n        up: extendFlat(makeCameraVector(0, 0, 1), {\n            description: [\n                'Sets the (x,y,z) components of the \\'up\\' camera vector.',\n                'This vector determines the up direction of this scene',\n                'with respect to the page.',\n                'The default is *{x: 0, y: 0, z: 1}* which means that',\n                'the z axis points up.'\n            ].join(' ')\n        }),\n        center: extendFlat(makeCameraVector(0, 0, 0), {\n            description: [\n                'Sets the (x,y,z) components of the \\'center\\' camera vector',\n                'This vector determines the translation (x,y,z) space',\n                'about the center of this scene.',\n                'By default, there is no such translation.'\n            ].join(' ')\n        }),\n        eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n            description: [\n                'Sets the (x,y,z) components of the \\'eye\\' camera vector.',\n                'This vector determines the view point about the origin',\n                'of this scene.'\n            ].join(' ')\n        }),\n        editType: 'camera'\n    },\n    domain: domainAttrs({name: 'scene', editType: 'plot'}),\n    aspectmode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['auto', 'cube', 'data', 'manual'],\n        dflt: 'auto',\n        editType: 'plot',\n        impliedEdits: {\n            'aspectratio.x': undefined,\n            'aspectratio.y': undefined,\n            'aspectratio.z': undefined\n        },\n        description: [\n            'If *cube*, this scene\\'s axes are drawn as a cube,',\n            'regardless of the axes\\' ranges.',\n\n            'If *data*, this scene\\'s axes are drawn',\n            'in proportion with the axes\\' ranges.',\n\n            'If *manual*, this scene\\'s axes are drawn',\n            'in proportion with the input of *aspectratio*',\n            '(the default behavior if *aspectratio* is provided).',\n\n            'If *auto*, this scene\\'s axes are drawn',\n            'using the results of *data* except when one axis',\n            'is more than four times the size of the two others,',\n            'where in that case the results of *cube* are used.'\n        ].join(' ')\n    },\n    aspectratio: { // must be positive (0's are coerced to 1)\n        x: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        y: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        z: {\n            valType: 'number',\n            role: 'info',\n            min: 0,\n            editType: 'plot',\n            impliedEdits: {'^aspectmode': 'manual'}\n        },\n        editType: 'plot',\n        impliedEdits: {aspectmode: 'manual'},\n        description: [\n            'Sets this scene\\'s axis aspectratio.'\n        ].join(' ')\n    },\n\n    xaxis: gl3dAxisAttrs,\n    yaxis: gl3dAxisAttrs,\n    zaxis: gl3dAxisAttrs,\n\n    dragmode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['orbit', 'turntable', 'zoom', 'pan', false],\n        dflt: 'turntable',\n        editType: 'plot',\n        description: [\n            'Determines the mode of drag interactions for this scene.'\n        ].join(' ')\n    },\n    hovermode: {\n        valType: 'enumerated',\n        role: 'info',\n        values: ['closest', false],\n        dflt: 'closest',\n        editType: 'modebar',\n        description: [\n            'Determines the mode of hover interactions for this scene.'\n        ].join(' ')\n    },\n    editType: 'plot',\n\n    _deprecated: {\n        cameraposition: {\n            valType: 'info_array',\n            role: 'info',\n            editType: 'camera',\n            description: 'Obsolete. Use `camera` instead.'\n        }\n    }\n};\n",null]}