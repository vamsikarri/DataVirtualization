{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/axis_attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/axis_attributes.js","mtime":1529418310690},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Color = require('../../../components/color');\nvar axesAttrs = require('../../cartesian/layout_attributes');\nvar extendFlat = require('../../../lib/extend').extendFlat;\nvar overrideAll = require('../../../plot_api/edit_types').overrideAll;\n\n\nmodule.exports = overrideAll({\n    visible: axesAttrs.visible,\n    showspikes: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: [\n            'Sets whether or not spikes starting from',\n            'data points to this axis\\' wall are shown on hover.'\n        ].join(' ')\n    },\n    spikesides: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: [\n            'Sets whether or not spikes extending from the',\n            'projection data points to this axis\\' wall boundaries',\n            'are shown on hover.'\n        ].join(' ')\n    },\n    spikethickness: {\n        valType: 'number',\n        role: 'style',\n        min: 0,\n        dflt: 2,\n        description: 'Sets the thickness (in px) of the spikes.'\n    },\n    spikecolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: Color.defaultLine,\n        description: 'Sets the color of the spikes.'\n    },\n    showbackground: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: false,\n        description: [\n            'Sets whether or not this axis\\' wall',\n            'has a background color.'\n        ].join(' ')\n    },\n    backgroundcolor: {\n        valType: 'color',\n        role: 'style',\n        dflt: 'rgba(204, 204, 204, 0.5)',\n        description: 'Sets the background color of this axis\\' wall.'\n    },\n    showaxeslabels: {\n        valType: 'boolean',\n        role: 'info',\n        dflt: true,\n        description: 'Sets whether or not this axis is labeled'\n    },\n    color: axesAttrs.color,\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n    title: axesAttrs.title,\n    titlefont: axesAttrs.titlefont,\n    type: axesAttrs.type,\n    autorange: axesAttrs.autorange,\n    rangemode: axesAttrs.rangemode,\n    range: axesAttrs.range,\n    // ticks\n    tickmode: axesAttrs.tickmode,\n    nticks: axesAttrs.nticks,\n    tick0: axesAttrs.tick0,\n    dtick: axesAttrs.dtick,\n    tickvals: axesAttrs.tickvals,\n    ticktext: axesAttrs.ticktext,\n    ticks: axesAttrs.ticks,\n    mirror: axesAttrs.mirror,\n    ticklen: axesAttrs.ticklen,\n    tickwidth: axesAttrs.tickwidth,\n    tickcolor: axesAttrs.tickcolor,\n    showticklabels: axesAttrs.showticklabels,\n    tickfont: axesAttrs.tickfont,\n    tickangle: axesAttrs.tickangle,\n    tickprefix: axesAttrs.tickprefix,\n    showtickprefix: axesAttrs.showtickprefix,\n    ticksuffix: axesAttrs.ticksuffix,\n    showticksuffix: axesAttrs.showticksuffix,\n    showexponent: axesAttrs.showexponent,\n    exponentformat: axesAttrs.exponentformat,\n    separatethousands: axesAttrs.separatethousands,\n    tickformat: axesAttrs.tickformat,\n    tickformatstops: axesAttrs.tickformatstops,\n    hoverformat: axesAttrs.hoverformat,\n    // lines and grids\n    showline: axesAttrs.showline,\n    linecolor: axesAttrs.linecolor,\n    linewidth: axesAttrs.linewidth,\n    showgrid: axesAttrs.showgrid,\n    gridcolor: extendFlat({}, axesAttrs.gridcolor,  // shouldn't this be on-par with 2D?\n        {dflt: 'rgb(204, 204, 204)'}),\n    gridwidth: axesAttrs.gridwidth,\n    zeroline: axesAttrs.zeroline,\n    zerolinecolor: axesAttrs.zerolinecolor,\n    zerolinewidth: axesAttrs.zerolinewidth\n}, 'plot', 'from-root');\n",null]}