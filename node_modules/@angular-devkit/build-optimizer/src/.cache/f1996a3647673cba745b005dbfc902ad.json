{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/layout/axis_defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/ternary/layout/axis_defaults.js","mtime":1529418310697},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../../lib');\nvar layoutAttributes = require('./axis_attributes');\nvar handleTickLabelDefaults = require('../../cartesian/tick_label_defaults');\nvar handleTickMarkDefaults = require('../../cartesian/tick_mark_defaults');\nvar handleTickValueDefaults = require('../../cartesian/tick_value_defaults');\nvar handleLineGridDefaults = require('../../cartesian/line_grid_defaults');\n\nmodule.exports = function supplyLayoutDefaults(containerIn, containerOut, options) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(containerIn, containerOut, layoutAttributes, attr, dflt);\n    }\n\n    containerOut.type = 'linear'; // no other types allowed for ternary\n\n    var dfltColor = coerce('color');\n    // if axis.color was provided, use it for fonts too; otherwise,\n    // inherit from global font color in case that was provided.\n    var dfltFontColor = (dfltColor === containerIn.color) ? dfltColor : options.font.color;\n\n    var axName = containerOut._name,\n        letterUpper = axName.charAt(0).toUpperCase(),\n        dfltTitle = 'Component ' + letterUpper;\n\n    var title = coerce('title', dfltTitle);\n    containerOut._hovertitle = title === dfltTitle ? title : letterUpper;\n\n    Lib.coerceFont(coerce, 'titlefont', {\n        family: options.font.family,\n        size: Math.round(options.font.size * 1.2),\n        color: dfltFontColor\n    });\n\n    // range is just set by 'min' - max is determined by the other axes mins\n    coerce('min');\n\n    handleTickValueDefaults(containerIn, containerOut, coerce, 'linear');\n    handleTickLabelDefaults(containerIn, containerOut, coerce, 'linear', {});\n    handleTickMarkDefaults(containerIn, containerOut, coerce,\n        { outerTicks: true });\n\n    var showTickLabels = coerce('showticklabels');\n    if(showTickLabels) {\n        Lib.coerceFont(coerce, 'tickfont', {\n            family: options.font.family,\n            size: options.font.size,\n            color: dfltFontColor\n        });\n        coerce('tickangle');\n        coerce('tickformat');\n    }\n\n    handleLineGridDefaults(containerIn, containerOut, coerce, {\n        dfltColor: dfltColor,\n        bgColor: options.bgColor,\n        // default grid color is darker here (60%, vs cartesian default ~91%)\n        // because the grid is not square so the eye needs heavier cues to follow\n        blend: 60,\n        showLine: true,\n        showGrid: true,\n        noZeroLine: true,\n        attributes: layoutAttributes\n    });\n\n    coerce('hoverformat');\n    coerce('layer');\n};\n",null]}