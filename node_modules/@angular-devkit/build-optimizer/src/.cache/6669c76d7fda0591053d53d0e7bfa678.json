{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contourcarpet/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/contourcarpet/attributes.js","mtime":1529418310714},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar heatmapAttrs = require('../heatmap/attributes');\nvar contourAttrs = require('../contour/attributes');\nvar contourContourAttrs = contourAttrs.contours;\nvar scatterAttrs = require('../scatter/attributes');\nvar colorscaleAttrs = require('../../components/colorscale/attributes');\nvar colorbarAttrs = require('../../components/colorbar/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterLineAttrs = scatterAttrs.line;\n\nmodule.exports = extendFlat({}, {\n    carpet: {\n        valType: 'string',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'The `carpet` of the carpet axes on which this contour trace lies'\n        ].join(' ')\n    },\n    z: heatmapAttrs.z,\n    a: heatmapAttrs.x,\n    a0: heatmapAttrs.x0,\n    da: heatmapAttrs.dx,\n    b: heatmapAttrs.y,\n    b0: heatmapAttrs.y0,\n    db: heatmapAttrs.dy,\n    text: heatmapAttrs.text,\n    transpose: heatmapAttrs.transpose,\n    atype: heatmapAttrs.xtype,\n    btype: heatmapAttrs.ytype,\n\n    fillcolor: contourAttrs.fillcolor,\n\n    autocontour: contourAttrs.autocontour,\n    ncontours: contourAttrs.ncontours,\n\n    contours: {\n        type: contourContourAttrs.type,\n        start: contourContourAttrs.start,\n        end: contourContourAttrs.end,\n        size: contourContourAttrs.size,\n        coloring: {\n            // from contourAttrs.contours.coloring but no 'heatmap' option\n            valType: 'enumerated',\n            values: ['fill', 'lines', 'none'],\n            dflt: 'fill',\n            role: 'style',\n            editType: 'calc',\n            description: [\n                'Determines the coloring method showing the contour values.',\n                'If *fill*, coloring is done evenly between each contour level',\n                'If *lines*, coloring is done on the contour lines.',\n                'If *none*, no coloring is applied on this trace.'\n            ].join(' ')\n        },\n        showlines: contourContourAttrs.showlines,\n        showlabels: contourContourAttrs.showlabels,\n        labelfont: contourContourAttrs.labelfont,\n        labelformat: contourContourAttrs.labelformat,\n        operation: contourContourAttrs.operation,\n        value: contourContourAttrs.value,\n        editType: 'calc',\n        impliedEdits: {'autocontour': false}\n    },\n\n    line: {\n        color: extendFlat({}, scatterLineAttrs.color, {\n            description: [\n                'Sets the color of the contour level.',\n                'Has no if `contours.coloring` is set to *lines*.'\n            ].join(' ')\n        }),\n        width: scatterLineAttrs.width,\n        dash: scatterLineAttrs.dash,\n        smoothing: extendFlat({}, scatterLineAttrs.smoothing, {\n            description: [\n                'Sets the amount of smoothing for the contour lines,',\n                'where *0* corresponds to no smoothing.'\n            ].join(' ')\n        }),\n        editType: 'plot'\n    }\n},\n    colorscaleAttrs,\n    { autocolorscale: extendFlat({}, colorscaleAttrs.autocolorscale, {dflt: false}) },\n    { colorbar: colorbarAttrs }\n);\n",null]}