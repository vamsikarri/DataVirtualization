{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/layers.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/mapbox/layers.js","mtime":1529418310692},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar convertTextOpts = require('./convert_text_opts');\n\nfunction MapboxLayer(mapbox, index) {\n    this.mapbox = mapbox;\n    this.map = mapbox.map;\n\n    this.uid = mapbox.uid + '-' + 'layer' + index;\n\n    this.idSource = this.uid + '-source';\n    this.idLayer = this.uid + '-layer';\n\n    // some state variable to check if a remove/add step is needed\n    this.sourceType = null;\n    this.source = null;\n    this.layerType = null;\n    this.below = null;\n\n    // is layer currently visible\n    this.visible = false;\n}\n\nvar proto = MapboxLayer.prototype;\n\nproto.update = function update(opts) {\n    if(!this.visible) {\n        // IMPORTANT: must create source before layer to not cause errors\n        this.updateSource(opts);\n        this.updateLayer(opts);\n    } else if(this.needsNewSource(opts)) {\n        // IMPORTANT: must delete layer before source to not cause errors\n        this.updateLayer(opts);\n        this.updateSource(opts);\n    } else if(this.needsNewLayer(opts)) {\n        this.updateLayer(opts);\n    } else {\n        this.updateStyle(opts);\n    }\n\n    this.visible = isVisible(opts);\n};\n\nproto.needsNewSource = function(opts) {\n    // for some reason changing layer to 'fill' or 'symbol'\n    // w/o changing the source throws an exception in mapbox-gl 0.18 ;\n    // stay safe and make new source on type changes\n    return (\n        this.sourceType !== opts.sourcetype ||\n        this.source !== opts.source ||\n        this.layerType !== opts.type\n    );\n};\n\nproto.needsNewLayer = function(opts) {\n    return (\n        this.layerType !== opts.type ||\n        this.below !== opts.below\n    );\n};\n\nproto.updateSource = function(opts) {\n    var map = this.map;\n\n    if(map.getSource(this.idSource)) map.removeSource(this.idSource);\n\n    this.sourceType = opts.sourcetype;\n    this.source = opts.source;\n\n    if(!isVisible(opts)) return;\n\n    var sourceOpts = convertSourceOpts(opts);\n\n    map.addSource(this.idSource, sourceOpts);\n};\n\nproto.updateLayer = function(opts) {\n    var map = this.map;\n    var convertedOpts = convertOpts(opts);\n\n    if(map.getLayer(this.idLayer)) map.removeLayer(this.idLayer);\n\n    this.layerType = opts.type;\n\n    if(isVisible(opts)) {\n        map.addLayer({\n            id: this.idLayer,\n            source: this.idSource,\n            'source-layer': opts.sourcelayer || '',\n            type: opts.type,\n            layout: convertedOpts.layout,\n            paint: convertedOpts.paint\n        }, opts.below);\n    }\n};\n\nproto.updateStyle = function(opts) {\n    if(isVisible(opts)) {\n        var convertedOpts = convertOpts(opts);\n        this.mapbox.setOptions(this.idLayer, 'setLayoutProperty', convertedOpts.layout);\n        this.mapbox.setOptions(this.idLayer, 'setPaintProperty', convertedOpts.paint);\n    }\n};\n\nproto.dispose = function dispose() {\n    var map = this.map;\n    map.removeLayer(this.idLayer);\n    map.removeSource(this.idSource);\n};\n\nfunction isVisible(opts) {\n    var source = opts.source;\n\n    return (\n        Lib.isPlainObject(source) ||\n        (typeof source === 'string' && source.length > 0)\n    );\n}\n\nfunction convertOpts(opts) {\n    var layout = {},\n        paint = {};\n\n    switch(opts.type) {\n\n        case 'circle':\n            Lib.extendFlat(paint, {\n                'circle-radius': opts.circle.radius,\n                'circle-color': opts.color,\n                'circle-opacity': opts.opacity\n            });\n            break;\n\n        case 'line':\n            Lib.extendFlat(paint, {\n                'line-width': opts.line.width,\n                'line-color': opts.color,\n                'line-opacity': opts.opacity\n            });\n            break;\n\n        case 'fill':\n            Lib.extendFlat(paint, {\n                'fill-color': opts.color,\n                'fill-outline-color': opts.fill.outlinecolor,\n                'fill-opacity': opts.opacity\n\n                // no way to pass specify outline width at the moment\n            });\n            break;\n\n        case 'symbol':\n            var symbol = opts.symbol,\n                textOpts = convertTextOpts(symbol.textposition, symbol.iconsize);\n\n            Lib.extendFlat(layout, {\n                'icon-image': symbol.icon + '-15',\n                'icon-size': symbol.iconsize / 10,\n\n                'text-field': symbol.text,\n                'text-size': symbol.textfont.size,\n                'text-anchor': textOpts.anchor,\n                'text-offset': textOpts.offset\n\n                // TODO font family\n                // 'text-font': symbol.textfont.family.split(', '),\n            });\n\n            Lib.extendFlat(paint, {\n                'icon-color': opts.color,\n                'text-color': symbol.textfont.color,\n                'text-opacity': opts.opacity\n            });\n            break;\n    }\n\n    return { layout: layout, paint: paint };\n}\n\nfunction convertSourceOpts(opts) {\n    var sourceType = opts.sourcetype;\n    var source = opts.source;\n    var sourceOpts = {type: sourceType};\n    var field;\n\n    if(sourceType === 'geojson') {\n        field = 'data';\n    } else if(sourceType === 'vector') {\n        field = typeof source === 'string' ? 'url' : 'tiles';\n    }\n\n    sourceOpts[field] = source;\n    return sourceOpts;\n}\n\nmodule.exports = function createMapboxLayer(mapbox, index, opts) {\n    var mapboxLayer = new MapboxLayer(mapbox, index);\n\n    mapboxLayer.update(opts);\n\n    return mapboxLayer;\n};\n",null]}