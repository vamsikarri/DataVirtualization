{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/mesh3d/convert.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/mesh3d/convert.js","mtime":1529418310724},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar createMesh = require('gl-mesh3d');\nvar triangulate = require('delaunay-triangulate');\nvar alphaShape = require('alpha-shape');\nvar convexHull = require('convex-hull');\n\nvar parseColorScale = require('../../lib/gl_format_color').parseColorScale;\nvar str2RgbaArray = require('../../lib/str2rgbarray');\n\nfunction Mesh3DTrace(scene, mesh, uid) {\n    this.scene = scene;\n    this.uid = uid;\n    this.mesh = mesh;\n    this.name = '';\n    this.color = '#fff';\n    this.data = null;\n    this.showContour = false;\n}\n\nvar proto = Mesh3DTrace.prototype;\n\nproto.handlePick = function(selection) {\n    if(selection.object === this.mesh) {\n        var selectIndex = selection.index = selection.data.index;\n\n        selection.traceCoordinate = [\n            this.data.x[selectIndex],\n            this.data.y[selectIndex],\n            this.data.z[selectIndex]\n        ];\n\n        var text = this.data.text;\n        if(Array.isArray(text) && text[selectIndex] !== undefined) {\n            selection.textLabel = text[selectIndex];\n        } else if(text) {\n            selection.textLabel = text;\n        }\n\n        return true;\n    }\n};\n\nfunction parseColorArray(colors) {\n    return colors.map(str2RgbaArray);\n}\n\nfunction zip3(x, y, z) {\n    var result = new Array(x.length);\n    for(var i = 0; i < x.length; ++i) {\n        result[i] = [x[i], y[i], z[i]];\n    }\n    return result;\n}\n\nproto.update = function(data) {\n    var scene = this.scene,\n        layout = scene.fullSceneLayout;\n\n    this.data = data;\n\n    // Unpack position data\n    function toDataCoords(axis, coord, scale, calendar) {\n        return coord.map(function(x) {\n            return axis.d2l(x, 0, calendar) * scale;\n        });\n    }\n\n    var positions = zip3(\n        toDataCoords(layout.xaxis, data.x, scene.dataScale[0], data.xcalendar),\n        toDataCoords(layout.yaxis, data.y, scene.dataScale[1], data.ycalendar),\n        toDataCoords(layout.zaxis, data.z, scene.dataScale[2], data.zcalendar));\n\n    var cells;\n    if(data.i && data.j && data.k) {\n        cells = zip3(data.i, data.j, data.k);\n    }\n    else if(data.alphahull === 0) {\n        cells = convexHull(positions);\n    }\n    else if(data.alphahull > 0) {\n        cells = alphaShape(data.alphahull, positions);\n    }\n    else {\n        var d = ['x', 'y', 'z'].indexOf(data.delaunayaxis);\n        cells = triangulate(positions.map(function(c) {\n            return [c[(d + 1) % 3], c[(d + 2) % 3]];\n        }));\n    }\n\n    var config = {\n        positions: positions,\n        cells: cells,\n        lightPosition: [data.lightposition.x, data.lightposition.y, data.lightposition.z],\n        ambient: data.lighting.ambient,\n        diffuse: data.lighting.diffuse,\n        specular: data.lighting.specular,\n        roughness: data.lighting.roughness,\n        fresnel: data.lighting.fresnel,\n        vertexNormalsEpsilon: data.lighting.vertexnormalsepsilon,\n        faceNormalsEpsilon: data.lighting.facenormalsepsilon,\n        opacity: data.opacity,\n        contourEnable: data.contour.show,\n        contourColor: str2RgbaArray(data.contour.color).slice(0, 3),\n        contourWidth: data.contour.width,\n        useFacetNormals: data.flatshading\n    };\n\n    if(data.intensity) {\n        this.color = '#fff';\n        config.vertexIntensity = data.intensity;\n        config.vertexIntensityBounds = [data.cmin, data.cmax];\n        config.colormap = parseColorScale(data.colorscale);\n    }\n    else if(data.vertexcolor) {\n        this.color = data.vertexcolor[0];\n        config.vertexColors = parseColorArray(data.vertexcolor);\n    }\n    else if(data.facecolor) {\n        this.color = data.facecolor[0];\n        config.cellColors = parseColorArray(data.facecolor);\n    }\n    else {\n        this.color = data.color;\n        config.meshColor = str2RgbaArray(data.color);\n    }\n\n    // Update mesh\n    this.mesh.update(config);\n};\n\nproto.dispose = function() {\n    this.scene.glplot.remove(this.mesh);\n    this.mesh.dispose();\n};\n\nfunction createMesh3DTrace(scene, data) {\n    var gl = scene.glplot.gl;\n    var mesh = createMesh({gl: gl});\n    var result = new Mesh3DTrace(scene, mesh, data.uid);\n    mesh._trace = result;\n    result.update(data);\n    scene.glplot.add(mesh);\n    return result;\n}\n\nmodule.exports = createMesh3DTrace;\n",null]}