{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattermapbox/defaults.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattermapbox/defaults.js","mtime":1529418310742},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar subTypes = require('../scatter/subtypes');\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\nvar handleLineDefaults = require('../scatter/line_defaults');\nvar handleTextDefaults = require('../scatter/text_defaults');\nvar handleFillColorDefaults = require('../scatter/fillcolor_defaults');\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var len = handleLonLatDefaults(traceIn, traceOut, coerce);\n    if(!len) {\n        traceOut.visible = false;\n        return;\n    }\n\n    coerce('text');\n    coerce('hovertext');\n    coerce('mode');\n\n    if(subTypes.hasLines(traceOut)) {\n        handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce, {noDash: true});\n        coerce('connectgaps');\n    }\n\n    if(subTypes.hasMarkers(traceOut)) {\n        handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce, {noLine: true});\n\n        // array marker.size and marker.color are only supported with circles\n\n        var marker = traceOut.marker;\n        // we need  mock marker.line object to make legends happy\n        marker.line = {width: 0};\n\n        if(marker.symbol !== 'circle') {\n            if(Lib.isArrayOrTypedArray(marker.size)) marker.size = marker.size[0];\n            if(Lib.isArrayOrTypedArray(marker.color)) marker.color = marker.color[0];\n        }\n    }\n\n    if(subTypes.hasText(traceOut)) {\n        handleTextDefaults(traceIn, traceOut, layout, coerce, {noSelect: true});\n    }\n\n    coerce('fill');\n    if(traceOut.fill !== 'none') {\n        handleFillColorDefaults(traceIn, traceOut, defaultColor, coerce);\n    }\n\n    Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};\n\nfunction handleLonLatDefaults(traceIn, traceOut, coerce) {\n    var lon = coerce('lon') || [];\n    var lat = coerce('lat') || [];\n    var len = Math.min(lon.length, lat.length);\n    traceOut._length = len;\n\n    return len;\n}\n",null]}