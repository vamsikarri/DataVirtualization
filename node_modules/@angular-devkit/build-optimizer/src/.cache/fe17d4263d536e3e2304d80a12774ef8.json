{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/heatmapgl/convert.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/heatmapgl/convert.js","mtime":1529418310720},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar createHeatmap2D = require('gl-heatmap2d');\nvar Axes = require('../../plots/cartesian/axes');\nvar str2RGBArray = require('../../lib/str2rgbarray');\n\n\nfunction Heatmap(scene, uid) {\n    this.scene = scene;\n    this.uid = uid;\n    this.type = 'heatmapgl';\n\n    this.name = '';\n    this.hoverinfo = 'all';\n\n    this.xData = [];\n    this.yData = [];\n    this.zData = [];\n    this.textLabels = [];\n\n    this.idToIndex = [];\n    this.bounds = [0, 0, 0, 0];\n\n    this.options = {\n        z: [],\n        x: [],\n        y: [],\n        shape: [0, 0],\n        colorLevels: [0],\n        colorValues: [0, 0, 0, 1]\n    };\n\n    this.heatmap = createHeatmap2D(scene.glplot, this.options);\n    this.heatmap._trace = this;\n}\n\nvar proto = Heatmap.prototype;\n\nproto.handlePick = function(pickResult) {\n    var options = this.options,\n        shape = options.shape,\n        index = pickResult.pointId,\n        xIndex = index % shape[0],\n        yIndex = Math.floor(index / shape[0]),\n        zIndex = index;\n\n    return {\n        trace: this,\n        dataCoord: pickResult.dataCoord,\n        traceCoord: [\n            options.x[xIndex],\n            options.y[yIndex],\n            options.z[zIndex]\n        ],\n        textLabel: this.textLabels[index],\n        name: this.name,\n        pointIndex: [yIndex, xIndex],\n        hoverinfo: this.hoverinfo\n    };\n};\n\nproto.update = function(fullTrace, calcTrace) {\n    var calcPt = calcTrace[0];\n\n    this.index = fullTrace.index;\n    this.name = fullTrace.name;\n    this.hoverinfo = fullTrace.hoverinfo;\n\n    // convert z from 2D -> 1D\n    var z = calcPt.z;\n    this.options.z = [].concat.apply([], z);\n\n    var rowLen = z[0].length,\n        colLen = z.length;\n    this.options.shape = [rowLen, colLen];\n\n    this.options.x = calcPt.x;\n    this.options.y = calcPt.y;\n\n    var colorOptions = convertColorscale(fullTrace);\n    this.options.colorLevels = colorOptions.colorLevels;\n    this.options.colorValues = colorOptions.colorValues;\n\n    // convert text from 2D -> 1D\n    this.textLabels = [].concat.apply([], fullTrace.text);\n\n    this.heatmap.update(this.options);\n\n    Axes.expand(this.scene.xaxis, calcPt.x);\n    Axes.expand(this.scene.yaxis, calcPt.y);\n};\n\nproto.dispose = function() {\n    this.heatmap.dispose();\n};\n\nfunction convertColorscale(fullTrace) {\n    var scl = fullTrace.colorscale,\n        zmin = fullTrace.zmin,\n        zmax = fullTrace.zmax;\n\n    var N = scl.length,\n        domain = new Array(N),\n        range = new Array(4 * N);\n\n    for(var i = 0; i < N; i++) {\n        var si = scl[i];\n        var color = str2RGBArray(si[1]);\n\n        domain[i] = zmin + si[0] * (zmax - zmin);\n\n        for(var j = 0; j < 4; j++) {\n            range[(4 * i) + j] = color[j];\n        }\n    }\n\n    return {\n        colorLevels: domain,\n        colorValues: range\n    };\n}\n\nfunction createHeatmap(scene, fullTrace, calcTrace) {\n    var plot = new Heatmap(scene, fullTrace.uid);\n    plot.update(fullTrace, calcTrace);\n    return plot;\n}\n\nmodule.exports = createHeatmap;\n",null]}