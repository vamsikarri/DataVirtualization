{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/violin/attributes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/violin/attributes.js","mtime":1529418310749},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar boxAttrs = require('../box/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = {\n    y: boxAttrs.y,\n    x: boxAttrs.x,\n    x0: boxAttrs.x0,\n    y0: boxAttrs.y0,\n    name: boxAttrs.name,\n    orientation: extendFlat({}, boxAttrs.orientation, {\n        description: [\n            'Sets the orientation of the violin(s).',\n            'If *v* (*h*), the distribution is visualized along',\n            'the vertical (horizontal).'\n        ].join(' ')\n    }),\n\n    bandwidth: {\n        valType: 'number',\n        min: 0,\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the bandwidth used to compute the kernel density estimate.',\n            'By default, the bandwidth is determined by Silverman\\'s rule of thumb.'\n        ].join(' ')\n    },\n\n    scalegroup: {\n        valType: 'string',\n        role: 'info',\n        dflt: '',\n        editType: 'calc',\n        description: [\n            'If there are multiple violins that should be sized according to',\n            'to some metric (see `scalemode`), link them by providing a non-empty group id here',\n            'shared by every trace in the same group.'\n        ].join(' ')\n    },\n    scalemode: {\n        valType: 'enumerated',\n        values: ['width', 'count'],\n        dflt: 'width',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the metric by which the width of each violin is determined.',\n            '*width* means each violin has the same (max) width',\n            '*count* means the violins are scaled by the number of sample points making',\n            'up each violin.'\n        ].join('')\n    },\n\n    spanmode: {\n        valType: 'enumerated',\n        values: ['soft', 'hard', 'manual'],\n        dflt: 'soft',\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the method by which the span in data space where the density function will be computed.',\n            '*soft* means the span goes from the sample\\'s minimum value minus two bandwidths',\n            'to the sample\\'s maximum value plus two bandwidths.',\n            '*hard* means the span goes from the sample\\'s minimum to its maximum value.',\n            'For custom span settings, use mode *manual* and fill in the `span` attribute.'\n        ].join(' ')\n    },\n    span: {\n        valType: 'info_array',\n        items: [\n            {valType: 'any', editType: 'calc'},\n            {valType: 'any', editType: 'calc'}\n        ],\n        role: 'info',\n        editType: 'calc',\n        description: [\n            'Sets the span in data space for which the density function will be computed.',\n            'Has an effect only when `spanmode` is set to *manual*.'\n        ].join(' ')\n    },\n\n    line: {\n        color: {\n            valType: 'color',\n            role: 'style',\n            editType: 'style',\n            description: 'Sets the color of line bounding the violin(s).'\n        },\n        width: {\n            valType: 'number',\n            role: 'style',\n            min: 0,\n            dflt: 2,\n            editType: 'style',\n            description: 'Sets the width (in px) of line bounding the violin(s).'\n        },\n        editType: 'plot'\n    },\n    fillcolor: boxAttrs.fillcolor,\n\n    points: extendFlat({}, boxAttrs.boxpoints, {\n        description: [\n            'If *outliers*, only the sample points lying outside the whiskers',\n            'are shown',\n            'If *suspectedoutliers*, the outlier points are shown and',\n            'points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1',\n            'are highlighted (see `outliercolor`)',\n            'If *all*, all sample points are shown',\n            'If *false*, only the violins are shown with no sample points'\n        ].join(' ')\n    }),\n    jitter: extendFlat({}, boxAttrs.jitter, {\n        description: [\n            'Sets the amount of jitter in the sample points drawn.',\n            'If *0*, the sample points align along the distribution axis.',\n            'If *1*, the sample points are drawn in a random jitter of width',\n            'equal to the width of the violins.'\n        ].join(' ')\n    }),\n    pointpos: extendFlat({}, boxAttrs.pointpos, {\n        description: [\n            'Sets the position of the sample points in relation to the violins.',\n            'If *0*, the sample points are places over the center of the violins.',\n            'Positive (negative) values correspond to positions to the',\n            'right (left) for vertical violins and above (below) for horizontal violins.'\n        ].join(' ')\n    }),\n    marker: boxAttrs.marker,\n    text: boxAttrs.text,\n\n    box: {\n        visible: {\n            valType: 'boolean',\n            dflt: false,\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Determines if an miniature box plot is drawn inside the violins. '\n            ].join(' ')\n        },\n        width: {\n            valType: 'number',\n            min: 0,\n            max: 1,\n            dflt: 0.25,\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Sets the width of the inner box plots relative to',\n                'the violins\\' width.',\n                'For example, with 1, the inner box plots are as wide as the violins.'\n            ].join(' ')\n        },\n        fillcolor: {\n            valType: 'color',\n            role: 'style',\n            editType: 'style',\n            description: 'Sets the inner box plot fill color.'\n        },\n        line: {\n            color: {\n                valType: 'color',\n                role: 'style',\n                editType: 'style',\n                description: 'Sets the inner box plot bounding line color.'\n            },\n            width: {\n                valType: 'number',\n                min: 0,\n                role: 'style',\n                editType: 'style',\n                description: 'Sets the inner box plot bounding line width.'\n            },\n            editType: 'style'\n        },\n        editType: 'plot'\n    },\n\n    meanline: {\n        visible: {\n            valType: 'boolean',\n            dflt: false,\n            role: 'info',\n            editType: 'plot',\n            description: [\n                'Determines if a line corresponding to the sample\\'s mean is shown',\n                'inside the violins.',\n                'If `box.visible` is turned on, the mean line is drawn inside the inner box.',\n                'Otherwise, the mean line is drawn from one side of the violin to other.'\n            ].join(' ')\n        },\n        color: {\n            valType: 'color',\n            role: 'style',\n            editType: 'style',\n            description: 'Sets the mean line color.'\n        },\n        width: {\n            valType: 'number',\n            min: 0,\n            role: 'style',\n            editType: 'style',\n            description: 'Sets the mean line width.'\n        },\n        editType: 'plot'\n    },\n\n    side: {\n        valType: 'enumerated',\n        values: ['both', 'positive', 'negative'],\n        dflt: 'both',\n        role: 'info',\n        editType: 'plot',\n        description: [\n            'Determines on which side of the position value the density function making up',\n            'one half of a violin is plotted.',\n            'Useful when comparing two violin traces under *overlay* mode, where one trace',\n            'has `side` set to *positive* and the other to *negative*.'\n        ].join(' ')\n    },\n\n    selected: boxAttrs.selected,\n    unselected: boxAttrs.unselected,\n\n    hoveron: {\n        valType: 'flaglist',\n        flags: ['violins', 'points', 'kde'],\n        dflt: 'violins+points+kde',\n        extras: ['all'],\n        role: 'info',\n        editType: 'style',\n        description: [\n            'Do the hover effects highlight individual violins',\n            'or sample points or the kernel density estimate or any combination of them?'\n        ].join(' ')\n    }\n};\n",null]}