{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattergl/index.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/traces/scattergl/index.js","mtime":1529418310742},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar createScatter = require('regl-scatter2d');\nvar createLine = require('regl-line2d');\nvar createError = require('regl-error2d');\nvar cluster = require('point-cluster');\nvar arrayRange = require('array-range');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar AxisIDs = require('../../plots/cartesian/axis_ids');\n\nvar subTypes = require('../scatter/subtypes');\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\nvar calcAxisExpansion = require('../scatter/calc').calcAxisExpansion;\nvar calcColorscales = require('../scatter/colorscale_calc');\nvar linkTraces = require('../scatter/link_traces');\nvar getTraceColor = require('../scatter/get_trace_color');\nvar fillHoverText = require('../scatter/fill_hover_text');\n\nvar convertStyle = require('./convert').convertStyle;\nvar convertLinePositions = require('./convert').convertLinePositions;\nvar convertErrorBarPositions = require('./convert').convertErrorBarPositions;\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar TOO_MANY_POINTS = require('./constants').TOO_MANY_POINTS;\n\nfunction calc(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var xa = AxisIDs.getFromId(gd, trace.xaxis);\n    var ya = AxisIDs.getFromId(gd, trace.yaxis);\n    var subplot = fullLayout._plots[trace.xaxis + trace.yaxis];\n    var count = trace._length;\n    var count2 = count * 2;\n    var stash = {};\n    var i, xx, yy;\n\n    var x = xa.makeCalcdata(trace, 'x');\n    var y = ya.makeCalcdata(trace, 'y');\n\n    // we need hi-precision for scatter2d,\n    // regl-scatter2d uses NaNs for bad/missing values\n    var positions = new Array(count2);\n    for(i = 0; i < count; i++) {\n        xx = x[i];\n        yy = y[i];\n        positions[i * 2] = xx === BADNUM ? NaN : xx;\n        positions[i * 2 + 1] = yy === BADNUM ? NaN : yy;\n    }\n\n    if(xa.type === 'log') {\n        for(i = 0; i < count2; i += 2) {\n            positions[i] = xa.c2l(positions[i]);\n        }\n    }\n    if(ya.type === 'log') {\n        for(i = 1; i < count2; i += 2) {\n            positions[i] = ya.c2l(positions[i]);\n        }\n    }\n\n    // we don't build a tree for log axes since it takes long to convert log2px\n    // and it is also\n    if(xa.type !== 'log' && ya.type !== 'log') {\n        // FIXME: delegate this to webworker\n        stash.tree = cluster(positions);\n    } else {\n        var ids = stash.ids = new Array(count);\n        for(i = 0; i < count; i++) {\n            ids[i] = i;\n        }\n    }\n\n    // create scene options and scene\n    calcColorscales(trace);\n    var opts = sceneOptions(gd, subplot, trace, positions, x, y);\n    var scene = sceneUpdate(gd, subplot);\n\n    // Re-use SVG scatter axis expansion routine except\n    // for graph with very large number of points where it\n    // performs poorly.\n    // In big data case, fake Axes.expand outputs with data bounds,\n    // and an average size for array marker.size inputs.\n    var ppad;\n    if(count < TOO_MANY_POINTS) {\n        ppad = calcMarkerSize(trace, count);\n    } else if(opts.marker) {\n        ppad = 2 * (opts.marker.sizeAvg || Math.max(opts.marker.size, 3));\n    }\n    calcAxisExpansion(gd, trace, xa, ya, x, y, ppad);\n\n    // set flags to create scene renderers\n    if(opts.fill && !scene.fill2d) scene.fill2d = true;\n    if(opts.marker && !scene.scatter2d) scene.scatter2d = true;\n    if(opts.line && !scene.line2d) scene.line2d = true;\n    if((opts.errorX || opts.errorY) && !scene.error2d) scene.error2d = true;\n\n    // FIXME: organize it in a more appropriate manner, probably in sceneOptions\n    // put point-cluster instance for optimized regl calc\n    if(opts.marker && count >= TOO_MANY_POINTS) {\n        opts.marker.cluster = stash.tree;\n    }\n\n    // save scene opts batch\n    scene.lineOptions.push(opts.line);\n    scene.errorXOptions.push(opts.errorX);\n    scene.errorYOptions.push(opts.errorY);\n    scene.fillOptions.push(opts.fill);\n    scene.markerOptions.push(opts.marker);\n    scene.selectedOptions.push(opts.selected);\n    scene.unselectedOptions.push(opts.unselected);\n    scene.count++;\n\n    // stash scene ref\n    stash._scene = scene;\n    stash.index = scene.count - 1;\n    stash.x = x;\n    stash.y = y;\n    stash.positions = positions;\n    stash.count = count;\n\n    gd.firstscatter = false;\n    return [{x: false, y: false, t: stash, trace: trace}];\n}\n\n// create scene options\nfunction sceneOptions(gd, subplot, trace, positions, x, y) {\n    var opts = convertStyle(gd, trace);\n\n    if(opts.marker) {\n        opts.marker.positions = positions;\n    }\n\n    if(opts.line && positions.length > 1) {\n        Lib.extendFlat(\n            opts.line,\n            convertLinePositions(gd, trace, positions)\n        );\n    }\n\n    if(opts.errorX || opts.errorY) {\n        var errors = convertErrorBarPositions(gd, trace, positions, x, y);\n\n        if(opts.errorX) {\n            Lib.extendFlat(opts.errorX, errors.x);\n        }\n        if(opts.errorY) {\n            Lib.extendFlat(opts.errorY, errors.y);\n        }\n    }\n\n    return opts;\n}\n\n// make sure scene exists on subplot, return it\nfunction sceneUpdate(gd, subplot) {\n    var scene = subplot._scene;\n    var fullLayout = gd._fullLayout;\n\n    var reset = {\n        // number of traces in subplot, since scene:subplot â†’ 1:1\n        count: 0,\n        // whether scene requires init hook in plot call (dirty plot call)\n        dirty: true,\n        // last used options\n        lineOptions: [],\n        fillOptions: [],\n        markerOptions: [],\n        selectedOptions: [],\n        unselectedOptions: [],\n        errorXOptions: [],\n        errorYOptions: []\n    };\n\n    var first = {\n        selectBatch: null,\n        unselectBatch: null,\n        // regl- component stubs, initialized in dirty plot call\n        fill2d: false,\n        scatter2d: false,\n        error2d: false,\n        line2d: false,\n        select2d: null\n    };\n\n    if(!subplot._scene) {\n        scene = subplot._scene = Lib.extendFlat({}, reset, first);\n\n        // apply new option to all regl components (used on drag)\n        scene.update = function update(opt) {\n            var opts = new Array(scene.count);\n            for(var i = 0; i < scene.count; i++) {\n                opts[i] = opt;\n            }\n\n            if(scene.fill2d) scene.fill2d.update(opts);\n            if(scene.scatter2d) scene.scatter2d.update(opts);\n            if(scene.line2d) scene.line2d.update(opts);\n            if(scene.error2d) scene.error2d.update(opts.concat(opts));\n            if(scene.select2d) scene.select2d.update(opts);\n\n            scene.draw();\n        };\n\n        // draw traces in proper order\n        scene.draw = function draw() {\n            var i;\n            for(i = 0; i < scene.count; i++) {\n                if(scene.fill2d && scene.fillOptions[i]) {\n                    // must do all fills first\n                    scene.fill2d.draw(i);\n                }\n            }\n            for(i = 0; i < scene.count; i++) {\n                if(scene.line2d && scene.lineOptions[i]) {\n                    scene.line2d.draw(i);\n                }\n                if(scene.error2d && scene.errorXOptions[i]) {\n                    scene.error2d.draw(i);\n                }\n                if(scene.error2d && scene.errorYOptions[i]) {\n                    scene.error2d.draw(i + scene.count);\n                }\n                if(scene.scatter2d && scene.markerOptions[i] && (!scene.selectBatch || !scene.selectBatch[i])) {\n                    // traces in no-selection mode\n                    scene.scatter2d.draw(i);\n                }\n            }\n\n            // draw traces in selection mode\n            if(scene.scatter2d && scene.select2d && scene.selectBatch) {\n                scene.select2d.draw(scene.selectBatch);\n                scene.scatter2d.draw(scene.unselectBatch);\n            }\n\n            scene.dirty = false;\n        };\n\n        // make sure canvas is clear\n        scene.clear = function clear() {\n            var vpSize = fullLayout._size;\n            var width = fullLayout.width;\n            var height = fullLayout.height;\n            var xaxis = subplot.xaxis;\n            var yaxis = subplot.yaxis;\n            var vp = [\n                vpSize.l + xaxis.domain[0] * vpSize.w,\n                vpSize.b + yaxis.domain[0] * vpSize.h,\n                (width - vpSize.r) - (1 - xaxis.domain[1]) * vpSize.w,\n                (height - vpSize.t) - (1 - yaxis.domain[1]) * vpSize.h\n            ];\n\n            var gl, regl;\n\n            if(scene.select2d) {\n                regl = scene.select2d.regl;\n                gl = regl._gl;\n                gl.enable(gl.SCISSOR_TEST);\n                gl.scissor(vp[0], vp[1], vp[2] - vp[0], vp[3] - vp[1]);\n                gl.clearColor(0, 0, 0, 0);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n\n            if(scene.scatter2d) {\n                regl = scene.scatter2d.regl;\n                gl = regl._gl;\n                gl.enable(gl.SCISSOR_TEST);\n                gl.scissor(vp[0], vp[1], vp[2] - vp[0], vp[3] - vp[1]);\n                gl.clearColor(0, 0, 0, 0);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n        };\n\n        // remove scene resources\n        scene.destroy = function destroy() {\n            if(scene.fill2d) scene.fill2d.destroy();\n            if(scene.scatter2d) scene.scatter2d.destroy();\n            if(scene.error2d) scene.error2d.destroy();\n            if(scene.line2d) scene.line2d.destroy();\n            if(scene.select2d) scene.select2d.destroy();\n\n            scene.lineOptions = null;\n            scene.fillOptions = null;\n            scene.markerOptions = null;\n            scene.selectedOptions = null;\n            scene.unselectedOptions = null;\n            scene.errorXOptions = null;\n            scene.errorYOptions = null;\n            scene.selectBatch = null;\n            scene.unselectBatch = null;\n\n            // we can't just delete _scene, because `destroy` is called in the\n            // middle of supplyDefaults, before relinkPrivateKeys which will put it back.\n            subplot._scene = null;\n        };\n    }\n\n    // In case if we have scene from the last calc - reset data\n    if(!scene.dirty) {\n        Lib.extendFlat(scene, reset);\n    }\n\n    return scene;\n}\n\nfunction plot(gd, subplot, cdata) {\n    if(!cdata.length) return;\n\n    var fullLayout = gd._fullLayout;\n    var scene = cdata[0][0].t._scene;\n    var dragmode = fullLayout.dragmode;\n\n    // we may have more subplots than initialized data due to Axes.getSubplots method\n    if(!scene) return;\n\n    var vpSize = fullLayout._size;\n    var width = fullLayout.width;\n    var height = fullLayout.height;\n\n    prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint']);\n    var regl = fullLayout._glcanvas.data()[0].regl;\n\n    // that is needed for fills\n    linkTraces(gd, subplot, cdata);\n\n    if(scene.dirty) {\n        // make sure scenes are created\n        if(scene.error2d === true) {\n            scene.error2d = createError(regl);\n        }\n        if(scene.line2d === true) {\n            scene.line2d = createLine(regl);\n        }\n        if(scene.scatter2d === true) {\n            scene.scatter2d = createScatter(regl);\n        }\n        if(scene.fill2d === true) {\n            scene.fill2d = createLine(regl);\n        }\n\n        // update main marker options\n        if(scene.line2d) {\n            scene.line2d.update(scene.lineOptions);\n        }\n        if(scene.error2d) {\n            var errorBatch = (scene.errorXOptions || []).concat(scene.errorYOptions || []);\n            scene.error2d.update(errorBatch);\n        }\n        if(scene.scatter2d) {\n            scene.scatter2d.update(scene.markerOptions);\n        }\n        // fill requires linked traces, so we generate it's positions here\n        if(scene.fill2d) {\n            scene.fillOptions = scene.fillOptions.map(function(fillOptions, i) {\n                var cdscatter = cdata[i];\n                if(!fillOptions || !cdscatter || !cdscatter[0] || !cdscatter[0].trace) return null;\n                var cd = cdscatter[0];\n                var trace = cd.trace;\n                var stash = cd.t;\n                var lineOptions = scene.lineOptions[i];\n                var last, j;\n\n                var pos = [], srcPos = (lineOptions && lineOptions.positions) || stash.positions;\n\n                if(trace.fill === 'tozeroy') {\n                    pos = [srcPos[0], 0];\n                    pos = pos.concat(srcPos);\n                    pos.push(srcPos[srcPos.length - 2]);\n                    pos.push(0);\n                }\n                else if(trace.fill === 'tozerox') {\n                    pos = [0, srcPos[1]];\n                    pos = pos.concat(srcPos);\n                    pos.push(0);\n                    pos.push(srcPos[srcPos.length - 1]);\n                }\n                else if(trace.fill === 'toself' || trace.fill === 'tonext') {\n                    pos = [];\n                    last = 0;\n                    for(j = 0; j < srcPos.length; j += 2) {\n                        if(isNaN(srcPos[j]) || isNaN(srcPos[j + 1])) {\n                            pos = pos.concat(srcPos.slice(last, j));\n                            pos.push(srcPos[last], srcPos[last + 1]);\n                            last = j + 2;\n                        }\n                    }\n                    pos = pos.concat(srcPos.slice(last));\n                    if(last) {\n                        pos.push(srcPos[last], srcPos[last + 1]);\n                    }\n                }\n                else {\n                    var nextTrace = trace._nexttrace;\n\n                    if(nextTrace) {\n                        var nextOptions = scene.lineOptions[i + 1];\n\n                        if(nextOptions) {\n                            var nextPos = nextOptions.positions;\n                            if(trace.fill === 'tonexty') {\n                                pos = srcPos.slice();\n\n                                for(i = Math.floor(nextPos.length / 2); i--;) {\n                                    var xx = nextPos[i * 2], yy = nextPos[i * 2 + 1];\n                                    if(isNaN(xx) || isNaN(yy)) continue;\n                                    pos.push(xx);\n                                    pos.push(yy);\n                                }\n                                fillOptions.fill = nextTrace.fillcolor;\n                            }\n                        }\n                    }\n                }\n\n                // detect prev trace positions to exclude from current fill\n                if(trace._prevtrace && trace._prevtrace.fill === 'tonext') {\n                    var prevLinePos = scene.lineOptions[i - 1].positions;\n\n                    // FIXME: likely this logic should be tested better\n                    var offset = pos.length / 2;\n                    last = offset;\n                    var hole = [last];\n                    for(j = 0; j < prevLinePos.length; j += 2) {\n                        if(isNaN(prevLinePos[j]) || isNaN(prevLinePos[j + 1])) {\n                            hole.push(j / 2 + offset + 1);\n                            last = j + 2;\n                        }\n                    }\n\n                    pos = pos.concat(prevLinePos);\n                    fillOptions.hole = hole;\n                }\n\n                fillOptions.opacity = trace.opacity;\n                fillOptions.positions = pos;\n\n                return fillOptions;\n            });\n\n            scene.fill2d.update(scene.fillOptions);\n        }\n    }\n\n    var selectMode = dragmode === 'lasso' || dragmode === 'select';\n    scene.selectBatch = null;\n    scene.unselectBatch = null;\n\n    // provide viewport and range\n    var vpRange = cdata.map(function(cdscatter) {\n        if(!cdscatter || !cdscatter[0] || !cdscatter[0].trace) return;\n        var cd = cdscatter[0];\n        var trace = cd.trace;\n        var stash = cd.t;\n        var id = stash.index;\n        var x = stash.x;\n        var y = stash.y;\n\n        var xaxis = subplot.xaxis || AxisIDs.getFromId(gd, trace.xaxis || 'x');\n        var yaxis = subplot.yaxis || AxisIDs.getFromId(gd, trace.yaxis || 'y');\n        var i;\n\n        var range = [\n            (xaxis._rl || xaxis.range)[0],\n            (yaxis._rl || yaxis.range)[0],\n            (xaxis._rl || xaxis.range)[1],\n            (yaxis._rl || yaxis.range)[1]\n        ];\n\n        var viewport = [\n            vpSize.l + xaxis.domain[0] * vpSize.w,\n            vpSize.b + yaxis.domain[0] * vpSize.h,\n            (width - vpSize.r) - (1 - xaxis.domain[1]) * vpSize.w,\n            (height - vpSize.t) - (1 - yaxis.domain[1]) * vpSize.h\n        ];\n\n        if(trace.selectedpoints || selectMode) {\n            if(!selectMode) selectMode = true;\n\n            if(!scene.selectBatch) {\n                scene.selectBatch = [];\n                scene.unselectBatch = [];\n            }\n\n            // regenerate scene batch, if traces number changed during selection\n            if(trace.selectedpoints) {\n                scene.selectBatch[id] = trace.selectedpoints;\n\n                var selPts = trace.selectedpoints;\n                var selDict = {};\n                for(i = 0; i < selPts.length; i++) {\n                    selDict[selPts[i]] = true;\n                }\n                var unselPts = [];\n                for(i = 0; i < stash.count; i++) {\n                    if(!selDict[i]) unselPts.push(i);\n                }\n                scene.unselectBatch[id] = unselPts;\n            }\n\n            // precalculate px coords since we are not going to pan during select\n            var xpx = new Array(stash.count);\n            var ypx = new Array(stash.count);\n            for(i = 0; i < stash.count; i++) {\n                xpx[i] = xaxis.c2p(x[i]);\n                ypx[i] = yaxis.c2p(y[i]);\n            }\n            stash.xpx = xpx;\n            stash.ypx = ypx;\n        }\n        else {\n            stash.xpx = stash.ypx = null;\n        }\n\n        return trace.visible ? {\n            viewport: viewport,\n            range: range\n        } : null;\n    });\n\n    if(selectMode) {\n        // create select2d\n        if(!scene.select2d) {\n            // create scatter instance by cloning scatter2d\n            scene.select2d = createScatter(fullLayout._glcanvas.data()[1].regl);\n        }\n\n        if(scene.scatter2d && scene.selectBatch && scene.selectBatch.length) {\n            // update only traces with selection\n            scene.scatter2d.update(scene.unselectedOptions.map(function(opts, i) {\n                return scene.selectBatch[i] ? opts : null;\n            }));\n        }\n\n        if(scene.select2d) {\n            scene.select2d.update(scene.markerOptions);\n            scene.select2d.update(scene.selectedOptions);\n        }\n    }\n\n    // upload viewport/range data to GPU\n    if(scene.fill2d) {\n        scene.fill2d.update(vpRange);\n    }\n    if(scene.line2d) {\n        scene.line2d.update(vpRange);\n    }\n    if(scene.error2d) {\n        scene.error2d.update(vpRange.concat(vpRange));\n    }\n    if(scene.scatter2d) {\n        scene.scatter2d.update(vpRange);\n    }\n    if(scene.select2d) {\n        scene.select2d.update(vpRange);\n    }\n\n    scene.draw();\n\n    return;\n}\n\nfunction hoverPoints(pointData, xval, yval, hovermode) {\n    var cd = pointData.cd;\n    var stash = cd[0].t;\n    var trace = cd[0].trace;\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var x = stash.x;\n    var y = stash.y;\n    var xpx = xa.c2p(xval);\n    var ypx = ya.c2p(yval);\n    var maxDistance = pointData.distance;\n    var ids;\n\n    // FIXME: make sure this is a proper way to calc search radius\n    if(stash.tree) {\n        var xl = xa.p2c(xpx - maxDistance);\n        var xr = xa.p2c(xpx + maxDistance);\n        var yl = ya.p2c(ypx - maxDistance);\n        var yr = ya.p2c(ypx + maxDistance);\n\n        if(hovermode === 'x') {\n            ids = stash.tree.range(\n                Math.min(xl, xr), Math.min(ya._rl[0], ya._rl[1]),\n                Math.max(xl, xr), Math.max(ya._rl[0], ya._rl[1])\n            );\n        }\n        else {\n            ids = stash.tree.range(\n                Math.min(xl, xr), Math.min(yl, yr),\n                Math.max(xl, xr), Math.max(yl, yr)\n            );\n        }\n    }\n    else if(stash.ids) {\n        ids = stash.ids;\n    }\n    else return [pointData];\n\n    // pick the id closest to the point\n    // note that point possibly may not be found\n    var id, ptx, pty, i, dx, dy, dist, dxy;\n\n    var minDist = maxDistance;\n    if(hovermode === 'x') {\n        for(i = 0; i < ids.length; i++) {\n            ptx = x[ids[i]];\n            dx = Math.abs(xa.c2p(ptx) - xpx);\n            if(dx < minDist) {\n                minDist = dx;\n                dy = ya.c2p(y[ids[i]]) - ypx;\n                dxy = Math.sqrt(dx * dx + dy * dy);\n                id = ids[i];\n            }\n        }\n    }\n    else {\n        for(i = 0; i < ids.length; i++) {\n            ptx = x[ids[i]];\n            pty = y[ids[i]];\n            dx = xa.c2p(ptx) - xpx;\n            dy = ya.c2p(pty) - ypx;\n\n            dist = Math.sqrt(dx * dx + dy * dy);\n            if(dist < minDist) {\n                minDist = dxy = dist;\n                id = ids[i];\n            }\n        }\n    }\n\n    pointData.index = id;\n    pointData.distance = minDist;\n    pointData.dxy = dxy;\n\n    if(id === undefined) return [pointData];\n\n    calcHover(pointData, x, y, trace);\n\n    return [pointData];\n}\n\n\nfunction calcHover(pointData, x, y, trace) {\n    var xa = pointData.xa;\n    var ya = pointData.ya;\n    var minDist = pointData.distance;\n    var dxy = pointData.dxy;\n    var id = pointData.index;\n\n    // the closest data point\n    var di = {\n        pointNumber: id,\n        x: x[id],\n        y: y[id]\n    };\n\n    // that is single-item arrays_to_calcdata excerpt, since we are doing it for a single point and we don't have to do it beforehead for 1e6 points\n    di.tx = Array.isArray(trace.text) ? trace.text[id] : trace.text;\n    di.htx = Array.isArray(trace.hovertext) ? trace.hovertext[id] : trace.hovertext;\n    di.data = Array.isArray(trace.customdata) ? trace.customdata[id] : trace.customdata;\n    di.tp = Array.isArray(trace.textposition) ? trace.textposition[id] : trace.textposition;\n\n    var font = trace.textfont;\n    if(font) {\n        di.ts = Array.isArray(font.size) ? font.size[id] : font.size;\n        di.tc = Array.isArray(font.color) ? font.color[id] : font.color;\n        di.tf = Array.isArray(font.family) ? font.family[id] : font.family;\n    }\n\n    var marker = trace.marker;\n    if(marker) {\n        di.ms = Lib.isArrayOrTypedArray(marker.size) ? marker.size[id] : marker.size;\n        di.mo = Lib.isArrayOrTypedArray(marker.opacity) ? marker.opacity[id] : marker.opacity;\n        di.mx = Array.isArray(marker.symbol) ? marker.symbol[id] : marker.symbol;\n        di.mc = Lib.isArrayOrTypedArray(marker.color) ? marker.color[id] : marker.color;\n    }\n\n    var line = marker && marker.line;\n    if(line) {\n        di.mlc = Array.isArray(line.color) ? line.color[id] : line.color;\n        di.mlw = Lib.isArrayOrTypedArray(line.width) ? line.width[id] : line.width;\n    }\n\n    var grad = marker && marker.gradient;\n    if(grad && grad.type !== 'none') {\n        di.mgt = Array.isArray(grad.type) ? grad.type[id] : grad.type;\n        di.mgc = Array.isArray(grad.color) ? grad.color[id] : grad.color;\n    }\n\n    var xp = xa.c2p(di.x, true);\n    var yp = ya.c2p(di.y, true);\n    var rad = di.mrc || 1;\n\n    var hoverlabel = trace.hoverlabel;\n\n    if(hoverlabel) {\n        di.hbg = Array.isArray(hoverlabel.bgcolor) ? hoverlabel.bgcolor[id] : hoverlabel.bgcolor;\n        di.hbc = Array.isArray(hoverlabel.bordercolor) ? hoverlabel.bordercolor[id] : hoverlabel.bordercolor;\n        di.hts = Array.isArray(hoverlabel.font.size) ? hoverlabel.font.size[id] : hoverlabel.font.size;\n        di.htc = Array.isArray(hoverlabel.font.color) ? hoverlabel.font.color[id] : hoverlabel.font.color;\n        di.htf = Array.isArray(hoverlabel.font.family) ? hoverlabel.font.family[id] : hoverlabel.font.family;\n        di.hnl = Array.isArray(hoverlabel.namelength) ? hoverlabel.namelength[id] : hoverlabel.namelength;\n    }\n    var hoverinfo = trace.hoverinfo;\n    if(hoverinfo) {\n        di.hi = Array.isArray(hoverinfo) ? hoverinfo[id] : hoverinfo;\n    }\n\n    var fakeCd = {};\n    fakeCd[pointData.index] = di;\n\n    Lib.extendFlat(pointData, {\n        color: getTraceColor(trace, di),\n\n        x0: xp - rad,\n        x1: xp + rad,\n        xLabelVal: di.x,\n\n        y0: yp - rad,\n        y1: yp + rad,\n        yLabelVal: di.y,\n\n        cd: fakeCd,\n        distance: minDist,\n        spikeDistance: dxy\n    });\n\n    if(di.htx) pointData.text = di.htx;\n    else if(di.tx) pointData.text = di.tx;\n    else if(trace.text) pointData.text = trace.text;\n\n    fillHoverText(di, trace, pointData);\n    Registry.getComponentMethod('errorbars', 'hoverInfo')(di, trace, pointData);\n\n    return pointData;\n}\n\n\nfunction selectPoints(searchInfo, polygon) {\n    var cd = searchInfo.cd;\n    var selection = [];\n    var trace = cd[0].trace;\n    var stash = cd[0].t;\n    var x = stash.x;\n    var y = stash.y;\n    var scene = stash._scene;\n\n    if(!scene) return selection;\n\n    var hasOnlyLines = (!subTypes.hasMarkers(trace) && !subTypes.hasText(trace));\n    if(trace.visible !== true || hasOnlyLines) return selection;\n\n    // degenerate polygon does not enable selection\n    // filter out points by visible scatter ones\n    var els = null;\n    var unels = null;\n    var i;\n    if(polygon !== false && !polygon.degenerate) {\n        els = [], unels = [];\n        for(i = 0; i < stash.count; i++) {\n            if(polygon.contains([stash.xpx[i], stash.ypx[i]])) {\n                els.push(i);\n                selection.push({\n                    pointNumber: i,\n                    x: x[i],\n                    y: y[i]\n                });\n            }\n            else {\n                unels.push(i);\n            }\n        }\n    } else {\n        unels = arrayRange(stash.count);\n    }\n\n    // make sure selectBatch is created\n    if(!scene.selectBatch) {\n        scene.selectBatch = [];\n        scene.unselectBatch = [];\n    }\n\n    if(!scene.selectBatch[stash.index]) {\n        // enter every trace select mode\n        for(i = 0; i < scene.count; i++) {\n            scene.selectBatch[i] = [];\n            scene.unselectBatch[i] = [];\n        }\n        // we should turn scatter2d into unselected once we have any points selected\n        scene.scatter2d.update(scene.unselectedOptions);\n    }\n\n    scene.selectBatch[stash.index] = els;\n    scene.unselectBatch[stash.index] = unels;\n\n    return selection;\n}\n\nfunction style(gd, cds) {\n    if(!cds) return;\n\n    var stash = cds[0][0].t;\n    var scene = stash._scene;\n\n    // don't clear the subplot if there are splom traces\n    // on the graph\n    if(!gd._fullLayout._has('splom')) {\n        scene.clear();\n    }\n\n    scene.draw();\n}\n\nmodule.exports = {\n    moduleType: 'trace',\n    name: 'scattergl',\n    basePlotModule: require('../../plots/cartesian'),\n    categories: ['gl', 'regl', 'cartesian', 'symbols', 'errorBarsOK', 'markerColorscale', 'showLegend', 'scatter-like'],\n\n    attributes: require('./attributes'),\n    supplyDefaults: require('./defaults'),\n    cleanData: require('../scatter/clean_data'),\n    colorbar: require('../scatter/colorbar'),\n    calc: calc,\n    plot: plot,\n    hoverPoints: hoverPoints,\n    style: style,\n    selectPoints: selectPoints,\n\n    sceneOptions: sceneOptions,\n    sceneUpdate: sceneUpdate,\n    calcHover: calcHover,\n\n    meta: {\n        hrName: 'scatter_gl',\n        description: [\n            'The data visualized as scatter point or lines is set in `x` and `y`',\n            'using the WebGL plotting engine.',\n            'Bubble charts are achieved by setting `marker.size` and/or `marker.color`',\n            'to a numerical arrays.'\n        ].join(' ')\n    }\n};\n",null]}