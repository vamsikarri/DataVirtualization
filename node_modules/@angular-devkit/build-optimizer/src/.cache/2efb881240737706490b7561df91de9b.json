{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/polar/legacy/undo_manager.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/polar/legacy/undo_manager.js","mtime":1529418310695},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\n// Modified from https://github.com/ArthurClemens/Javascript-Undo-Manager\n// Copyright (c) 2010-2013 Arthur Clemens, arthur@visiblearea.com\nmodule.exports = function UndoManager() {\n    var undoCommands = [],\n        index = -1,\n        isExecuting = false,\n        callback;\n\n    function execute(command, action) {\n        if(!command) return this;\n\n        isExecuting = true;\n        command[action]();\n        isExecuting = false;\n\n        return this;\n    }\n\n    return {\n        add: function(command) {\n            if(isExecuting) return this;\n            undoCommands.splice(index + 1, undoCommands.length - index);\n            undoCommands.push(command);\n            index = undoCommands.length - 1;\n            return this;\n        },\n        setCallback: function(callbackFunc) { callback = callbackFunc; },\n        undo: function() {\n            var command = undoCommands[index];\n            if(!command) return this;\n            execute(command, 'undo');\n            index -= 1;\n            if(callback) callback(command.undo);\n            return this;\n        },\n        redo: function() {\n            var command = undoCommands[index + 1];\n            if(!command) return this;\n            execute(command, 'redo');\n            index += 1;\n            if(callback) callback(command.redo);\n            return this;\n        },\n        clear: function() {\n            undoCommands = [];\n            index = -1;\n        },\n        hasUndo: function() { return index !== -1; },\n        hasRedo: function() { return index < (undoCommands.length - 1); },\n        getCommands: function() { return undoCommands; },\n        getPreviousCommand: function() { return undoCommands[index - 1]; },\n        getIndex: function() { return index; }\n    };\n};\n",null]}