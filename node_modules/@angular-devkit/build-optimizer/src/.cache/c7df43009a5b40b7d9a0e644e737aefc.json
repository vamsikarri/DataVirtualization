{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/convert.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/gl3d/layout/convert.js","mtime":1529418310690},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar convertHTMLToUnicode = require('../../../lib/html2unicode');\nvar str2RgbaArray = require('../../../lib/str2rgbarray');\n\nvar AXES_NAMES = ['xaxis', 'yaxis', 'zaxis'];\n\nfunction AxesOptions() {\n    this.bounds = [\n        [-10, -10, -10],\n        [10, 10, 10]\n    ];\n\n    this.ticks = [ [], [], [] ];\n    this.tickEnable = [ true, true, true ];\n    this.tickFont = [ 'sans-serif', 'sans-serif', 'sans-serif' ];\n    this.tickSize = [ 12, 12, 12 ];\n    this.tickAngle = [ 0, 0, 0 ];\n    this.tickColor = [ [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1] ];\n    this.tickPad = [ 18, 18, 18 ];\n\n    this.labels = [ 'x', 'y', 'z' ];\n    this.labelEnable = [ true, true, true ];\n    this.labelFont = ['Open Sans', 'Open Sans', 'Open Sans'];\n    this.labelSize = [ 20, 20, 20 ];\n    this.labelAngle = [ 0, 0, 0 ];\n    this.labelColor = [ [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1] ];\n    this.labelPad = [ 30, 30, 30 ];\n\n    this.lineEnable = [ true, true, true ];\n    this.lineMirror = [ false, false, false ];\n    this.lineWidth = [ 1, 1, 1 ];\n    this.lineColor = [ [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1] ];\n\n    this.lineTickEnable = [ true, true, true ];\n    this.lineTickMirror = [ false, false, false ];\n    this.lineTickLength = [ 10, 10, 10 ];\n    this.lineTickWidth = [ 1, 1, 1 ];\n    this.lineTickColor = [ [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1] ];\n\n    this.gridEnable = [ true, true, true ];\n    this.gridWidth = [ 1, 1, 1 ];\n    this.gridColor = [ [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1] ];\n\n    this.zeroEnable = [ true, true, true ];\n    this.zeroLineColor = [ [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1] ];\n    this.zeroLineWidth = [ 2, 2, 2 ];\n\n    this.backgroundEnable = [ true, true, true ];\n    this.backgroundColor = [ [0.8, 0.8, 0.8, 0.5],\n                              [0.8, 0.8, 0.8, 0.5],\n                              [0.8, 0.8, 0.8, 0.5] ];\n\n    // some default values are stored for applying model transforms\n    this._defaultTickPad = this.tickPad.slice();\n    this._defaultLabelPad = this.labelPad.slice();\n    this._defaultLineTickLength = this.lineTickLength.slice();\n}\n\nvar proto = AxesOptions.prototype;\n\nproto.merge = function(sceneLayout) {\n    var opts = this;\n    for(var i = 0; i < 3; ++i) {\n        var axes = sceneLayout[AXES_NAMES[i]];\n\n        if(!axes.visible) {\n            opts.tickEnable[i] = false;\n            opts.labelEnable[i] = false;\n            opts.lineEnable[i] = false;\n            opts.lineTickEnable[i] = false;\n            opts.gridEnable[i] = false;\n            opts.zeroEnable[i] = false;\n            opts.backgroundEnable[i] = false;\n            continue;\n        }\n\n        // Axes labels\n        opts.labels[i] = convertHTMLToUnicode(axes.title);\n        if('titlefont' in axes) {\n            if(axes.titlefont.color) opts.labelColor[i] = str2RgbaArray(axes.titlefont.color);\n            if(axes.titlefont.family) opts.labelFont[i] = axes.titlefont.family;\n            if(axes.titlefont.size) opts.labelSize[i] = axes.titlefont.size;\n        }\n\n        // Lines\n        if('showline' in axes) opts.lineEnable[i] = axes.showline;\n        if('linecolor' in axes) opts.lineColor[i] = str2RgbaArray(axes.linecolor);\n        if('linewidth' in axes) opts.lineWidth[i] = axes.linewidth;\n\n        if('showgrid' in axes) opts.gridEnable[i] = axes.showgrid;\n        if('gridcolor' in axes) opts.gridColor[i] = str2RgbaArray(axes.gridcolor);\n        if('gridwidth' in axes) opts.gridWidth[i] = axes.gridwidth;\n\n        // Remove zeroline if axis type is log\n        // otherwise the zeroline is incorrectly drawn at 1 on log axes\n        if(axes.type === 'log') opts.zeroEnable[i] = false;\n        else if('zeroline' in axes) opts.zeroEnable[i] = axes.zeroline;\n        if('zerolinecolor' in axes) opts.zeroLineColor[i] = str2RgbaArray(axes.zerolinecolor);\n        if('zerolinewidth' in axes) opts.zeroLineWidth[i] = axes.zerolinewidth;\n\n        // tick lines\n        if('ticks' in axes && !!axes.ticks) opts.lineTickEnable[i] = true;\n        else opts.lineTickEnable[i] = false;\n\n        if('ticklen' in axes) {\n            opts.lineTickLength[i] = opts._defaultLineTickLength[i] = axes.ticklen;\n        }\n        if('tickcolor' in axes) opts.lineTickColor[i] = str2RgbaArray(axes.tickcolor);\n        if('tickwidth' in axes) opts.lineTickWidth[i] = axes.tickwidth;\n        if('tickangle' in axes) {\n            opts.tickAngle[i] = (axes.tickangle === 'auto') ?\n                0 :\n                Math.PI * -axes.tickangle / 180;\n        }\n        // tick labels\n        if('showticklabels' in axes) opts.tickEnable[i] = axes.showticklabels;\n        if('tickfont' in axes) {\n            if(axes.tickfont.color) opts.tickColor[i] = str2RgbaArray(axes.tickfont.color);\n            if(axes.tickfont.family) opts.tickFont[i] = axes.tickfont.family;\n            if(axes.tickfont.size) opts.tickSize[i] = axes.tickfont.size;\n        }\n\n        if('mirror' in axes) {\n            if(['ticks', 'all', 'allticks'].indexOf(axes.mirror) !== -1) {\n                opts.lineTickMirror[i] = true;\n                opts.lineMirror[i] = true;\n            } else if(axes.mirror === true) {\n                opts.lineTickMirror[i] = false;\n                opts.lineMirror[i] = true;\n            } else {\n                opts.lineTickMirror[i] = false;\n                opts.lineMirror[i] = false;\n            }\n        } else opts.lineMirror[i] = false;\n\n        // grid background\n        if('showbackground' in axes && axes.showbackground !== false) {\n            opts.backgroundEnable[i] = true;\n            opts.backgroundColor[i] = str2RgbaArray(axes.backgroundcolor);\n        } else opts.backgroundEnable[i] = false;\n    }\n};\n\n\nfunction createAxesOptions(plotlyOptions) {\n    var result = new AxesOptions();\n    result.merge(plotlyOptions);\n    return result;\n}\n\nmodule.exports = createAxesOptions;\n",null]}