{"remainingRequest":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/cartesian/axes.js","dependencies":[{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/plotly.js/src/plots/cartesian/axes.js","mtime":1529418310682},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/cache-loader/dist/cjs.js","mtime":1529418306962},{"path":"/Users/vamsikarri/Desktop/Gathi/Angular/FederatedQuery/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529418304772}],"contextDependencies":[],"result":["/**\n* Copyright 2012-2018, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\nvar isNumeric = require('fast-isnumeric');\nvar Plots = require('../../plots/plots');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Titles = require('../../components/titles');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\n\nvar constants = require('../../constants/numerical');\nvar ONEAVGYEAR = constants.ONEAVGYEAR;\nvar ONEAVGMONTH = constants.ONEAVGMONTH;\nvar ONEDAY = constants.ONEDAY;\nvar ONEHOUR = constants.ONEHOUR;\nvar ONEMIN = constants.ONEMIN;\nvar ONESEC = constants.ONESEC;\nvar MINUS_SIGN = constants.MINUS_SIGN;\nvar BADNUM = constants.BADNUM;\n\nvar MID_SHIFT = require('../../constants/alignment').MID_SHIFT;\nvar LINE_SPACING = require('../../constants/alignment').LINE_SPACING;\n\nvar axes = module.exports = {};\n\naxes.setConvert = require('./set_convert');\nvar autoType = require('./axis_autotype');\n\nvar axisIds = require('./axis_ids');\naxes.id2name = axisIds.id2name;\naxes.name2id = axisIds.name2id;\naxes.cleanId = axisIds.cleanId;\naxes.list = axisIds.list;\naxes.listIds = axisIds.listIds;\naxes.getFromId = axisIds.getFromId;\naxes.getFromTrace = axisIds.getFromTrace;\n\nvar autorange = require('./autorange');\naxes.expand = autorange.expand;\naxes.getAutoRange = autorange.getAutoRange;\n\n/*\n * find the list of possible axes to reference with an xref or yref attribute\n * and coerce it to that list\n *\n * attr: the attribute we're generating a reference for. Should end in 'x' or 'y'\n *     but can be prefixed, like 'ax' for annotation's arrow x\n * dflt: the default to coerce to, or blank to use the first axis (falling back on\n *     extraOption if there is no axis)\n * extraOption: aside from existing axes with this letter, what non-axis value is allowed?\n *     Only required if it's different from `dflt`\n */\naxes.coerceRef = function(containerIn, containerOut, gd, attr, dflt, extraOption) {\n    var axLetter = attr.charAt(attr.length - 1);\n    var axlist = gd._fullLayout._subplots[axLetter + 'axis'];\n    var refAttr = attr + 'ref';\n    var attrDef = {};\n\n    if(!dflt) dflt = axlist[0] || extraOption;\n    if(!extraOption) extraOption = dflt;\n\n    // data-ref annotations are not supported in gl2d yet\n\n    attrDef[refAttr] = {\n        valType: 'enumerated',\n        values: axlist.concat(extraOption ? [extraOption] : []),\n        dflt: dflt\n    };\n\n    // xref, yref\n    return Lib.coerce(containerIn, containerOut, attrDef, refAttr);\n};\n\n/*\n * coerce position attributes (range-type) that can be either on axes or absolute\n * (paper or pixel) referenced. The biggest complication here is that we don't know\n * before looking at the axis whether the value must be a number or not (it may be\n * a date string), so we can't use the regular valType='number' machinery\n *\n * axRef (string): the axis this position is referenced to, or:\n *     paper: fraction of the plot area\n *     pixel: pixels relative to some starting position\n * attr (string): the attribute in containerOut we are coercing\n * dflt (number): the default position, as a fraction or pixels. If the attribute\n *     is to be axis-referenced, this will be converted to an axis data value\n *\n * Also cleans the values, since the attribute definition itself has to say\n * valType: 'any' to handle date axes. This allows us to accept:\n * - for category axes: category names, and convert them here into serial numbers.\n *   Note that this will NOT work for axis range endpoints, because we don't know\n *   the category list yet (it's set by ax.makeCalcdata during calc)\n *   but it works for component (note, shape, images) positions.\n * - for date axes: JS Dates or milliseconds, and convert to date strings\n * - for other types: coerce them to numbers\n */\naxes.coercePosition = function(containerOut, gd, coerce, axRef, attr, dflt) {\n    var cleanPos, pos;\n\n    if(axRef === 'paper' || axRef === 'pixel') {\n        cleanPos = Lib.ensureNumber;\n        pos = coerce(attr, dflt);\n    } else {\n        var ax = axes.getFromId(gd, axRef);\n        dflt = ax.fraction2r(dflt);\n        pos = coerce(attr, dflt);\n        cleanPos = ax.cleanPos;\n    }\n\n    containerOut[attr] = cleanPos(pos);\n};\n\naxes.cleanPosition = function(pos, gd, axRef) {\n    var cleanPos = (axRef === 'paper' || axRef === 'pixel') ?\n        Lib.ensureNumber :\n        axes.getFromId(gd, axRef).cleanPos;\n\n    return cleanPos(pos);\n};\n\nvar getDataConversions = axes.getDataConversions = function(gd, trace, target, targetArray) {\n    var ax;\n\n    // If target points to an axis, use the type we already have for that\n    // axis to find the data type. Otherwise use the values to autotype.\n    var d2cTarget = (target === 'x' || target === 'y' || target === 'z') ?\n        target :\n        targetArray;\n\n    // In the case of an array target, make a mock data array\n    // and call supplyDefaults to the data type and\n    // setup the data-to-calc method.\n    if(Array.isArray(d2cTarget)) {\n        ax = {\n            type: autoType(targetArray),\n            _categories: []\n        };\n        axes.setConvert(ax);\n\n        // build up ax._categories (usually done during ax.makeCalcdata()\n        if(ax.type === 'category') {\n            for(var i = 0; i < targetArray.length; i++) {\n                ax.d2c(targetArray[i]);\n            }\n        }\n    } else {\n        ax = axes.getFromTrace(gd, trace, d2cTarget);\n    }\n\n    // if 'target' has corresponding axis\n    // -> use setConvert method\n    if(ax) return {d2c: ax.d2c, c2d: ax.c2d};\n\n    // special case for 'ids'\n    // -> cast to String\n    if(d2cTarget === 'ids') return {d2c: toString, c2d: toString};\n\n    // otherwise (e.g. numeric-array of 'marker.color' or 'marker.size')\n    // -> cast to Number\n\n    return {d2c: toNum, c2d: toNum};\n};\n\nfunction toNum(v) { return +v; }\nfunction toString(v) { return String(v); }\n\naxes.getDataToCoordFunc = function(gd, trace, target, targetArray) {\n    return getDataConversions(gd, trace, target, targetArray).d2c;\n};\n\n// get counteraxis letter for this axis (name or id)\n// this can also be used as the id for default counter axis\naxes.counterLetter = function(id) {\n    var axLetter = id.charAt(0);\n    if(axLetter === 'x') return 'y';\n    if(axLetter === 'y') return 'x';\n};\n\n// incorporate a new minimum difference and first tick into\n// forced\n// note that _forceTick0 is linearized, so needs to be turned into\n// a range value for setting tick0\naxes.minDtick = function(ax, newDiff, newFirst, allow) {\n    // doesn't make sense to do forced min dTick on log or category axes,\n    // and the plot itself may decide to cancel (ie non-grouped bars)\n    if(['log', 'category'].indexOf(ax.type) !== -1 || !allow) {\n        ax._minDtick = 0;\n    }\n    // undefined means there's nothing there yet\n    else if(ax._minDtick === undefined) {\n        ax._minDtick = newDiff;\n        ax._forceTick0 = newFirst;\n    }\n    else if(ax._minDtick) {\n        // existing minDtick is an integer multiple of newDiff\n        // (within rounding err)\n        // and forceTick0 can be shifted to newFirst\n        if((ax._minDtick / newDiff + 1e-6) % 1 < 2e-6 &&\n                (((newFirst - ax._forceTick0) / newDiff % 1) +\n                    1.000001) % 1 < 2e-6) {\n            ax._minDtick = newDiff;\n            ax._forceTick0 = newFirst;\n        }\n        // if the converse is true (newDiff is a multiple of minDtick and\n        // newFirst can be shifted to forceTick0) then do nothing - same\n        // forcing stands. Otherwise, cancel forced minimum\n        else if((newDiff / ax._minDtick + 1e-6) % 1 > 2e-6 ||\n                (((newFirst - ax._forceTick0) / ax._minDtick % 1) +\n                    1.000001) % 1 > 2e-6) {\n            ax._minDtick = 0;\n        }\n    }\n};\n\n// save a copy of the initial axis ranges in fullLayout\n// use them in mode bar and dblclick events\naxes.saveRangeInitial = function(gd, overwrite) {\n    var axList = axes.list(gd, '', true),\n        hasOneAxisChanged = false;\n\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n\n        var isNew = (ax._rangeInitial === undefined);\n        var hasChanged = (\n            isNew || !(\n                ax.range[0] === ax._rangeInitial[0] &&\n                ax.range[1] === ax._rangeInitial[1]\n            )\n        );\n\n        if((isNew && ax.autorange === false) || (overwrite && hasChanged)) {\n            ax._rangeInitial = ax.range.slice();\n            hasOneAxisChanged = true;\n        }\n    }\n\n    return hasOneAxisChanged;\n};\n\n// save a copy of the initial spike visibility\naxes.saveShowSpikeInitial = function(gd, overwrite) {\n    var axList = axes.list(gd, '', true),\n        hasOneAxisChanged = false,\n        allSpikesEnabled = 'on';\n\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n\n        var isNew = (ax._showSpikeInitial === undefined);\n        var hasChanged = (\n            isNew || !(\n                ax.showspikes === ax._showspikes\n            )\n        );\n\n        if((isNew) || (overwrite && hasChanged)) {\n            ax._showSpikeInitial = ax.showspikes;\n            hasOneAxisChanged = true;\n        }\n\n        if(allSpikesEnabled === 'on' && !ax.showspikes) {\n            allSpikesEnabled = 'off';\n        }\n    }\n    gd._fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n    return hasOneAxisChanged;\n};\n\naxes.autoBin = function(data, ax, nbins, is2d, calendar) {\n    var dataMin = Lib.aggNums(Math.min, null, data),\n        dataMax = Lib.aggNums(Math.max, null, data);\n\n    if(!calendar) calendar = ax.calendar;\n\n    if(ax.type === 'category') {\n        return {\n            start: dataMin - 0.5,\n            end: dataMax + 0.5,\n            size: 1,\n            _dataSpan: dataMax - dataMin,\n        };\n    }\n\n    var size0;\n    if(nbins) size0 = ((dataMax - dataMin) / nbins);\n    else {\n        // totally auto: scale off std deviation so the highest bin is\n        // somewhat taller than the total number of bins, but don't let\n        // the size get smaller than the 'nice' rounded down minimum\n        // difference between values\n        var distinctData = Lib.distinctVals(data),\n            msexp = Math.pow(10, Math.floor(\n                Math.log(distinctData.minDiff) / Math.LN10)),\n            minSize = msexp * Lib.roundUp(\n                distinctData.minDiff / msexp, [0.9, 1.9, 4.9, 9.9], true);\n        size0 = Math.max(minSize, 2 * Lib.stdev(data) /\n            Math.pow(data.length, is2d ? 0.25 : 0.4));\n\n        // fallback if ax.d2c output BADNUMs\n        // e.g. when user try to plot categorical bins\n        // on a layout.xaxis.type: 'linear'\n        if(!isNumeric(size0)) size0 = 1;\n    }\n\n    // piggyback off autotick code to make \"nice\" bin sizes\n    var dummyAx;\n    if(ax.type === 'log') {\n        dummyAx = {\n            type: 'linear',\n            range: [dataMin, dataMax]\n        };\n    }\n    else {\n        dummyAx = {\n            type: ax.type,\n            range: Lib.simpleMap([dataMin, dataMax], ax.c2r, 0, calendar),\n            calendar: calendar\n        };\n    }\n    axes.setConvert(dummyAx);\n\n    axes.autoTicks(dummyAx, size0);\n    var binStart = axes.tickIncrement(\n            axes.tickFirst(dummyAx), dummyAx.dtick, 'reverse', calendar);\n    var binEnd, bincount;\n\n    // check for too many data points right at the edges of bins\n    // (>50% within 1% of bin edges) or all data points integral\n    // and offset the bins accordingly\n    if(typeof dummyAx.dtick === 'number') {\n        binStart = autoShiftNumericBins(binStart, data, dummyAx, dataMin, dataMax);\n\n        bincount = 1 + Math.floor((dataMax - binStart) / dummyAx.dtick);\n        binEnd = binStart + bincount * dummyAx.dtick;\n    }\n    else {\n        // month ticks - should be the only nonlinear kind we have at this point.\n        // dtick (as supplied by axes.autoTick) only has nonlinear values on\n        // date and log axes, but even if you display a histogram on a log axis\n        // we bin it on a linear axis (which one could argue against, but that's\n        // a separate issue)\n        if(dummyAx.dtick.charAt(0) === 'M') {\n            binStart = autoShiftMonthBins(binStart, data, dummyAx.dtick, dataMin, calendar);\n        }\n\n        // calculate the endpoint for nonlinear ticks - you have to\n        // just increment until you're done\n        binEnd = binStart;\n        bincount = 0;\n        while(binEnd <= dataMax) {\n            binEnd = axes.tickIncrement(binEnd, dummyAx.dtick, false, calendar);\n            bincount++;\n        }\n    }\n\n    return {\n        start: ax.c2r(binStart, 0, calendar),\n        end: ax.c2r(binEnd, 0, calendar),\n        size: dummyAx.dtick,\n        _dataSpan: dataMax - dataMin\n    };\n};\n\n\nfunction autoShiftNumericBins(binStart, data, ax, dataMin, dataMax) {\n    var edgecount = 0,\n        midcount = 0,\n        intcount = 0,\n        blankCount = 0;\n\n    function nearEdge(v) {\n        // is a value within 1% of a bin edge?\n        return (1 + (v - binStart) * 100 / ax.dtick) % 100 < 2;\n    }\n\n    for(var i = 0; i < data.length; i++) {\n        if(data[i] % 1 === 0) intcount++;\n        else if(!isNumeric(data[i])) blankCount++;\n\n        if(nearEdge(data[i])) edgecount++;\n        if(nearEdge(data[i] + ax.dtick / 2)) midcount++;\n    }\n    var dataCount = data.length - blankCount;\n\n    if(intcount === dataCount && ax.type !== 'date') {\n        // all integers: if bin size is <1, it's because\n        // that was specifically requested (large nbins)\n        // so respect that... but center the bins containing\n        // integers on those integers\n        if(ax.dtick < 1) {\n            binStart = dataMin - 0.5 * ax.dtick;\n        }\n        // otherwise start half an integer down regardless of\n        // the bin size, just enough to clear up endpoint\n        // ambiguity about which integers are in which bins.\n        else {\n            binStart -= 0.5;\n            if(binStart + ax.dtick < dataMin) binStart += ax.dtick;\n        }\n    }\n    else if(midcount < dataCount * 0.1) {\n        if(edgecount > dataCount * 0.3 ||\n                nearEdge(dataMin) || nearEdge(dataMax)) {\n            // lots of points at the edge, not many in the middle\n            // shift half a bin\n            var binshift = ax.dtick / 2;\n            binStart += (binStart + binshift < dataMin) ? binshift : -binshift;\n        }\n    }\n    return binStart;\n}\n\n\nfunction autoShiftMonthBins(binStart, data, dtick, dataMin, calendar) {\n    var stats = Lib.findExactDates(data, calendar);\n    // number of data points that needs to be an exact value\n    // to shift that increment to (near) the bin center\n    var threshold = 0.8;\n\n    if(stats.exactDays > threshold) {\n        var numMonths = Number(dtick.substr(1));\n\n        if((stats.exactYears > threshold) && (numMonths % 12 === 0)) {\n            // The exact middle of a non-leap-year is 1.5 days into July\n            // so if we start the bins here, all but leap years will\n            // get hover-labeled as exact years.\n            binStart = axes.tickIncrement(binStart, 'M6', 'reverse') + ONEDAY * 1.5;\n        }\n        else if(stats.exactMonths > threshold) {\n            // Months are not as clean, but if we shift half the *longest*\n            // month (31/2 days) then 31-day months will get labeled exactly\n            // and shorter months will get labeled with the correct month\n            // but shifted 12-36 hours into it.\n            binStart = axes.tickIncrement(binStart, 'M1', 'reverse') + ONEDAY * 15.5;\n        }\n        else {\n            // Shifting half a day is exact, but since these are month bins it\n            // will always give a somewhat odd-looking label, until we do something\n            // smarter like showing the bin boundaries (or the bounds of the actual\n            // data in each bin)\n            binStart -= ONEDAY / 2;\n        }\n        var nextBinStart = axes.tickIncrement(binStart, dtick);\n\n        if(nextBinStart <= dataMin) return nextBinStart;\n    }\n    return binStart;\n}\n\n// ----------------------------------------------------\n// Ticks and grids\n// ----------------------------------------------------\n\n// ensure we have tick0, dtick, and tick rounding calculated\naxes.prepTicks = function(ax) {\n    var rng = Lib.simpleMap(ax.range, ax.r2l);\n\n    // calculate max number of (auto) ticks to display based on plot size\n    if(ax.tickmode === 'auto' || !ax.dtick) {\n        var nt = ax.nticks,\n            minPx;\n        if(!nt) {\n            if(ax.type === 'category') {\n                minPx = ax.tickfont ? (ax.tickfont.size || 12) * 1.2 : 15;\n                nt = ax._length / minPx;\n            }\n            else {\n                minPx = ax._id.charAt(0) === 'y' ? 40 : 80;\n                nt = Lib.constrain(ax._length / minPx, 4, 9) + 1;\n            }\n\n            // radial axes span half their domain,\n            // multiply nticks value by two to get correct number of auto ticks.\n            if(ax._name === 'radialaxis') nt *= 2;\n        }\n\n        // add a couple of extra digits for filling in ticks when we\n        // have explicit tickvals without tick text\n        if(ax.tickmode === 'array') nt *= 100;\n\n        axes.autoTicks(ax, Math.abs(rng[1] - rng[0]) / nt);\n        // check for a forced minimum dtick\n        if(ax._minDtick > 0 && ax.dtick < ax._minDtick * 2) {\n            ax.dtick = ax._minDtick;\n            ax.tick0 = ax.l2r(ax._forceTick0);\n        }\n    }\n\n    // check for missing tick0\n    if(!ax.tick0) {\n        ax.tick0 = (ax.type === 'date') ? '2000-01-01' : 0;\n    }\n\n    // now figure out rounding of tick values\n    autoTickRound(ax);\n};\n\n// calculate the ticks: text, values, positioning\n// if ticks are set to automatic, determine the right values (tick0,dtick)\n// in any case, set tickround to # of digits to round tick labels to,\n// or codes to this effect for log and date scales\naxes.calcTicks = function calcTicks(ax) {\n    axes.prepTicks(ax);\n    var rng = Lib.simpleMap(ax.range, ax.r2l);\n\n    // now that we've figured out the auto values for formatting\n    // in case we're missing some ticktext, we can break out for array ticks\n    if(ax.tickmode === 'array') return arrayTicks(ax);\n\n    // find the first tick\n    ax._tmin = axes.tickFirst(ax);\n\n    // add a tiny bit so we get ticks which may have rounded out\n    var startTick = rng[0] * 1.0001 - rng[1] * 0.0001;\n    var endTick = rng[1] * 1.0001 - rng[0] * 0.0001;\n    // check for reversed axis\n    var axrev = (rng[1] < rng[0]);\n\n    // No visible ticks? Quit.\n    // I've only seen this on category axes with all categories off the edge.\n    if((ax._tmin < startTick) !== axrev) return [];\n\n    // return the full set of tick vals\n    var vals = [];\n    if(ax.type === 'category') {\n        endTick = (axrev) ? Math.max(-0.5, endTick) :\n            Math.min(ax._categories.length - 0.5, endTick);\n    }\n\n    var xPrevious = null;\n    var maxTicks = Math.max(1000, ax._length || 0);\n    for(var x = ax._tmin;\n            (axrev) ? (x >= endTick) : (x <= endTick);\n            x = axes.tickIncrement(x, ax.dtick, axrev, ax.calendar)) {\n        // prevent infinite loops - no more than one tick per pixel,\n        // and make sure each value is different from the previous\n        if(vals.length > maxTicks || x === xPrevious) break;\n        xPrevious = x;\n\n        vals.push(x);\n    }\n\n    // If same angle over a full circle, the last tick vals is a duplicate.\n    // TODO must do something similar for angular date axes.\n    if(ax._id === 'angular' && Math.abs(rng[1] - rng[0]) === 360) {\n        vals.pop();\n    }\n\n    // save the last tick as well as first, so we can\n    // show the exponent only on the last one\n    ax._tmax = vals[vals.length - 1];\n\n    // for showing the rest of a date when the main tick label is only the\n    // latter part: ax._prevDateHead holds what we showed most recently.\n    // Start with it cleared and mark that we're in calcTicks (ie calculating a\n    // whole string of these so we should care what the previous date head was!)\n    ax._prevDateHead = '';\n    ax._inCalcTicks = true;\n\n    var ticksOut = new Array(vals.length);\n    for(var i = 0; i < vals.length; i++) ticksOut[i] = axes.tickText(ax, vals[i]);\n\n    ax._inCalcTicks = false;\n\n    return ticksOut;\n};\n\nfunction arrayTicks(ax) {\n    var vals = ax.tickvals,\n        text = ax.ticktext,\n        ticksOut = new Array(vals.length),\n        rng = Lib.simpleMap(ax.range, ax.r2l),\n        r0expanded = rng[0] * 1.0001 - rng[1] * 0.0001,\n        r1expanded = rng[1] * 1.0001 - rng[0] * 0.0001,\n        tickMin = Math.min(r0expanded, r1expanded),\n        tickMax = Math.max(r0expanded, r1expanded),\n        vali,\n        i,\n        j = 0;\n\n    // without a text array, just format the given values as any other ticks\n    // except with more precision to the numbers\n    if(!Array.isArray(text)) text = [];\n\n    // make sure showing ticks doesn't accidentally add new categories\n    var tickVal2l = ax.type === 'category' ? ax.d2l_noadd : ax.d2l;\n\n    // array ticks on log axes always show the full number\n    // (if no explicit ticktext overrides it)\n    if(ax.type === 'log' && String(ax.dtick).charAt(0) !== 'L') {\n        ax.dtick = 'L' + Math.pow(10, Math.floor(Math.min(ax.range[0], ax.range[1])) - 1);\n    }\n\n    for(i = 0; i < vals.length; i++) {\n        vali = tickVal2l(vals[i]);\n        if(vali > tickMin && vali < tickMax) {\n            if(text[i] === undefined) ticksOut[j] = axes.tickText(ax, vali);\n            else ticksOut[j] = tickTextObj(ax, vali, String(text[i]));\n            j++;\n        }\n    }\n\n    if(j < vals.length) ticksOut.splice(j, vals.length - j);\n\n    return ticksOut;\n}\n\nvar roundBase10 = [2, 5, 10],\n    roundBase24 = [1, 2, 3, 6, 12],\n    roundBase60 = [1, 2, 5, 10, 15, 30],\n    // 2&3 day ticks are weird, but need something btwn 1&7\n    roundDays = [1, 2, 3, 7, 14],\n    // approx. tick positions for log axes, showing all (1) and just 1, 2, 5 (2)\n    // these don't have to be exact, just close enough to round to the right value\n    roundLog1 = [-0.046, 0, 0.301, 0.477, 0.602, 0.699, 0.778, 0.845, 0.903, 0.954, 1],\n    roundLog2 = [-0.301, 0, 0.301, 0.699, 1],\n    // N.B. `thetaunit; 'radians' angular axes must be converted to degrees\n    roundAngles = [15, 30, 45, 90, 180];\n\nfunction roundDTick(roughDTick, base, roundingSet) {\n    return base * Lib.roundUp(roughDTick / base, roundingSet);\n}\n\n// autoTicks: calculate best guess at pleasant ticks for this axis\n// inputs:\n//      ax - an axis object\n//      roughDTick - rough tick spacing (to be turned into a nice round number)\n// outputs (into ax):\n//   tick0: starting point for ticks (not necessarily on the graph)\n//      usually 0 for numeric (=10^0=1 for log) or jan 1, 2000 for dates\n//   dtick: the actual, nice round tick spacing, usually a little larger than roughDTick\n//      if the ticks are spaced linearly (linear scale, categories,\n//          log with only full powers, date ticks < month),\n//          this will just be a number\n//      months: M#\n//      years: M# where # is 12*number of years\n//      log with linear ticks: L# where # is the linear tick spacing\n//      log showing powers plus some intermediates:\n//          D1 shows all digits, D2 shows 2 and 5\naxes.autoTicks = function(ax, roughDTick) {\n    var base;\n\n    function getBase(v) {\n        return Math.pow(v, Math.floor(Math.log(roughDTick) / Math.LN10));\n    }\n\n    if(ax.type === 'date') {\n        ax.tick0 = Lib.dateTick0(ax.calendar);\n        // the criteria below are all based on the rough spacing we calculate\n        // being > half of the final unit - so precalculate twice the rough val\n        var roughX2 = 2 * roughDTick;\n\n        if(roughX2 > ONEAVGYEAR) {\n            roughDTick /= ONEAVGYEAR;\n            base = getBase(10);\n            ax.dtick = 'M' + (12 * roundDTick(roughDTick, base, roundBase10));\n        }\n        else if(roughX2 > ONEAVGMONTH) {\n            roughDTick /= ONEAVGMONTH;\n            ax.dtick = 'M' + roundDTick(roughDTick, 1, roundBase24);\n        }\n        else if(roughX2 > ONEDAY) {\n            ax.dtick = roundDTick(roughDTick, ONEDAY, roundDays);\n            // get week ticks on sunday\n            // this will also move the base tick off 2000-01-01 if dtick is\n            // 2 or 3 days... but that's a weird enough case that we'll ignore it.\n            ax.tick0 = Lib.dateTick0(ax.calendar, true);\n        }\n        else if(roughX2 > ONEHOUR) {\n            ax.dtick = roundDTick(roughDTick, ONEHOUR, roundBase24);\n        }\n        else if(roughX2 > ONEMIN) {\n            ax.dtick = roundDTick(roughDTick, ONEMIN, roundBase60);\n        }\n        else if(roughX2 > ONESEC) {\n            ax.dtick = roundDTick(roughDTick, ONESEC, roundBase60);\n        }\n        else {\n            // milliseconds\n            base = getBase(10);\n            ax.dtick = roundDTick(roughDTick, base, roundBase10);\n        }\n    }\n    else if(ax.type === 'log') {\n        ax.tick0 = 0;\n        var rng = Lib.simpleMap(ax.range, ax.r2l);\n\n        if(roughDTick > 0.7) {\n            // only show powers of 10\n            ax.dtick = Math.ceil(roughDTick);\n        }\n        else if(Math.abs(rng[1] - rng[0]) < 1) {\n            // span is less than one power of 10\n            var nt = 1.5 * Math.abs((rng[1] - rng[0]) / roughDTick);\n\n            // ticks on a linear scale, labeled fully\n            roughDTick = Math.abs(Math.pow(10, rng[1]) -\n                Math.pow(10, rng[0])) / nt;\n            base = getBase(10);\n            ax.dtick = 'L' + roundDTick(roughDTick, base, roundBase10);\n        }\n        else {\n            // include intermediates between powers of 10,\n            // labeled with small digits\n            // ax.dtick = \"D2\" (show 2 and 5) or \"D1\" (show all digits)\n            ax.dtick = (roughDTick > 0.3) ? 'D2' : 'D1';\n        }\n    }\n    else if(ax.type === 'category') {\n        ax.tick0 = 0;\n        ax.dtick = Math.ceil(Math.max(roughDTick, 1));\n    }\n    else if(ax._id === 'angular') {\n        ax.tick0 = 0;\n        base = 1;\n        ax.dtick = roundDTick(roughDTick, base, roundAngles);\n    }\n    else {\n        // auto ticks always start at 0\n        ax.tick0 = 0;\n        base = getBase(10);\n        ax.dtick = roundDTick(roughDTick, base, roundBase10);\n    }\n\n    // prevent infinite loops\n    if(ax.dtick === 0) ax.dtick = 1;\n\n    // TODO: this is from log axis histograms with autorange off\n    if(!isNumeric(ax.dtick) && typeof ax.dtick !== 'string') {\n        var olddtick = ax.dtick;\n        ax.dtick = 1;\n        throw 'ax.dtick error: ' + String(olddtick);\n    }\n};\n\n// after dtick is already known, find tickround = precision\n// to display in tick labels\n//   for numeric ticks, integer # digits after . to round to\n//   for date ticks, the last date part to show (y,m,d,H,M,S)\n//      or an integer # digits past seconds\nfunction autoTickRound(ax) {\n    var dtick = ax.dtick;\n\n    ax._tickexponent = 0;\n    if(!isNumeric(dtick) && typeof dtick !== 'string') {\n        dtick = 1;\n    }\n\n    if(ax.type === 'category') {\n        ax._tickround = null;\n    }\n    if(ax.type === 'date') {\n        // If tick0 is unusual, give tickround a bit more information\n        // not necessarily *all* the information in tick0 though, if it's really odd\n        // minimal string length for tick0: 'd' is 10, 'M' is 16, 'S' is 19\n        // take off a leading minus (year < 0) and i (intercalary month) so length is consistent\n        var tick0ms = ax.r2l(ax.tick0),\n            tick0str = ax.l2r(tick0ms).replace(/(^-|i)/g, ''),\n            tick0len = tick0str.length;\n\n        if(String(dtick).charAt(0) === 'M') {\n            // any tick0 more specific than a year: alway show the full date\n            if(tick0len > 10 || tick0str.substr(5) !== '01-01') ax._tickround = 'd';\n            // show the month unless ticks are full multiples of a year\n            else ax._tickround = (+(dtick.substr(1)) % 12 === 0) ? 'y' : 'm';\n        }\n        else if((dtick >= ONEDAY && tick0len <= 10) || (dtick >= ONEDAY * 15)) ax._tickround = 'd';\n        else if((dtick >= ONEMIN && tick0len <= 16) || (dtick >= ONEHOUR)) ax._tickround = 'M';\n        else if((dtick >= ONESEC && tick0len <= 19) || (dtick >= ONEMIN)) ax._tickround = 'S';\n        else {\n            // tickround is a number of digits of fractional seconds\n            // of any two adjacent ticks, at least one will have the maximum fractional digits\n            // of all possible ticks - so take the max. length of tick0 and the next one\n            var tick1len = ax.l2r(tick0ms + dtick).replace(/^-/, '').length;\n            ax._tickround = Math.max(tick0len, tick1len) - 20;\n        }\n    }\n    else if(isNumeric(dtick) || dtick.charAt(0) === 'L') {\n        // linear or log (except D1, D2)\n        var rng = ax.range.map(ax.r2d || Number);\n        if(!isNumeric(dtick)) dtick = Number(dtick.substr(1));\n        // 2 digits past largest digit of dtick\n        ax._tickround = 2 - Math.floor(Math.log(dtick) / Math.LN10 + 0.01);\n\n        var maxend = Math.max(Math.abs(rng[0]), Math.abs(rng[1]));\n\n        var rangeexp = Math.floor(Math.log(maxend) / Math.LN10 + 0.01);\n        if(Math.abs(rangeexp) > 3) {\n            if(isSIFormat(ax.exponentformat) && !beyondSI(rangeexp)) {\n                ax._tickexponent = 3 * Math.round((rangeexp - 1) / 3);\n            }\n            else ax._tickexponent = rangeexp;\n        }\n    }\n    // D1 or D2 (log)\n    else ax._tickround = null;\n}\n\n// months and years don't have constant millisecond values\n// (but a year is always 12 months so we only need months)\n// log-scale ticks are also not consistently spaced, except\n// for pure powers of 10\n// numeric ticks always have constant differences, other datetime ticks\n// can all be calculated as constant number of milliseconds\naxes.tickIncrement = function(x, dtick, axrev, calendar) {\n    var axSign = axrev ? -1 : 1;\n\n    // includes linear, all dates smaller than month, and pure 10^n in log\n    if(isNumeric(dtick)) return x + axSign * dtick;\n\n    // everything else is a string, one character plus a number\n    var tType = dtick.charAt(0),\n        dtSigned = axSign * Number(dtick.substr(1));\n\n    // Dates: months (or years - see Lib.incrementMonth)\n    if(tType === 'M') return Lib.incrementMonth(x, dtSigned, calendar);\n\n    // Log scales: Linear, Digits\n    else if(tType === 'L') return Math.log(Math.pow(10, x) + dtSigned) / Math.LN10;\n\n    // log10 of 2,5,10, or all digits (logs just have to be\n    // close enough to round)\n    else if(tType === 'D') {\n        var tickset = (dtick === 'D2') ? roundLog2 : roundLog1,\n            x2 = x + axSign * 0.01,\n            frac = Lib.roundUp(Lib.mod(x2, 1), tickset, axrev);\n\n        return Math.floor(x2) +\n            Math.log(d3.round(Math.pow(10, frac), 1)) / Math.LN10;\n    }\n    else throw 'unrecognized dtick ' + String(dtick);\n};\n\n// calculate the first tick on an axis\naxes.tickFirst = function(ax) {\n    var r2l = ax.r2l || Number,\n        rng = Lib.simpleMap(ax.range, r2l),\n        axrev = rng[1] < rng[0],\n        sRound = axrev ? Math.floor : Math.ceil,\n        // add a tiny extra bit to make sure we get ticks\n        // that may have been rounded out\n        r0 = rng[0] * 1.0001 - rng[1] * 0.0001,\n        dtick = ax.dtick,\n        tick0 = r2l(ax.tick0);\n\n    if(isNumeric(dtick)) {\n        var tmin = sRound((r0 - tick0) / dtick) * dtick + tick0;\n\n        // make sure no ticks outside the category list\n        if(ax.type === 'category') {\n            tmin = Lib.constrain(tmin, 0, ax._categories.length - 1);\n        }\n        return tmin;\n    }\n\n    var tType = dtick.charAt(0),\n        dtNum = Number(dtick.substr(1));\n\n    // Dates: months (or years)\n    if(tType === 'M') {\n        var cnt = 0,\n            t0 = tick0,\n            t1,\n            mult,\n            newDTick;\n\n        // This algorithm should work for *any* nonlinear (but close to linear!)\n        // tick spacing. Limit to 10 iterations, for gregorian months it's normally <=3.\n        while(cnt < 10) {\n            t1 = axes.tickIncrement(t0, dtick, axrev, ax.calendar);\n            if((t1 - r0) * (t0 - r0) <= 0) {\n                // t1 and t0 are on opposite sides of r0! we've succeeded!\n                if(axrev) return Math.min(t0, t1);\n                return Math.max(t0, t1);\n            }\n            mult = (r0 - ((t0 + t1) / 2)) / (t1 - t0);\n            newDTick = tType + ((Math.abs(Math.round(mult)) || 1) * dtNum);\n            t0 = axes.tickIncrement(t0, newDTick, mult < 0 ? !axrev : axrev, ax.calendar);\n            cnt++;\n        }\n        Lib.error('tickFirst did not converge', ax);\n        return t0;\n    }\n\n    // Log scales: Linear, Digits\n    else if(tType === 'L') {\n        return Math.log(sRound(\n            (Math.pow(10, r0) - tick0) / dtNum) * dtNum + tick0) / Math.LN10;\n    }\n    else if(tType === 'D') {\n        var tickset = (dtick === 'D2') ? roundLog2 : roundLog1,\n            frac = Lib.roundUp(Lib.mod(r0, 1), tickset, axrev);\n\n        return Math.floor(r0) +\n            Math.log(d3.round(Math.pow(10, frac), 1)) / Math.LN10;\n    }\n    else throw 'unrecognized dtick ' + String(dtick);\n};\n\n// draw the text for one tick.\n// px,py are the location on gd.paper\n// prefix is there so the x axis ticks can be dropped a line\n// ax is the axis layout, x is the tick value\n// hover is a (truthy) flag for whether to show numbers with a bit\n// more precision for hovertext\naxes.tickText = function(ax, x, hover) {\n    var out = tickTextObj(ax, x),\n        hideexp,\n        arrayMode = ax.tickmode === 'array',\n        extraPrecision = hover || arrayMode,\n        i,\n        tickVal2l = ax.type === 'category' ? ax.d2l_noadd : ax.d2l;\n\n    if(arrayMode && Array.isArray(ax.ticktext)) {\n        var rng = Lib.simpleMap(ax.range, ax.r2l),\n            minDiff = Math.abs(rng[1] - rng[0]) / 10000;\n        for(i = 0; i < ax.ticktext.length; i++) {\n            if(Math.abs(x - tickVal2l(ax.tickvals[i])) < minDiff) break;\n        }\n        if(i < ax.ticktext.length) {\n            out.text = String(ax.ticktext[i]);\n            return out;\n        }\n    }\n\n    function isHidden(showAttr) {\n        var first_or_last;\n\n        if(showAttr === undefined) return true;\n        if(hover) return showAttr === 'none';\n\n        first_or_last = {\n            first: ax._tmin,\n            last: ax._tmax\n        }[showAttr];\n\n        return showAttr !== 'all' && x !== first_or_last;\n    }\n\n    if(hover) {\n        hideexp = 'never';\n    } else {\n        hideexp = ax.exponentformat !== 'none' && isHidden(ax.showexponent) ? 'hide' : '';\n    }\n\n    if(ax.type === 'date') formatDate(ax, out, hover, extraPrecision);\n    else if(ax.type === 'log') formatLog(ax, out, hover, extraPrecision, hideexp);\n    else if(ax.type === 'category') formatCategory(ax, out);\n    else if(ax._id === 'angular') formatAngle(ax, out, hover, extraPrecision, hideexp);\n    else formatLinear(ax, out, hover, extraPrecision, hideexp);\n\n    // add prefix and suffix\n    if(ax.tickprefix && !isHidden(ax.showtickprefix)) out.text = ax.tickprefix + out.text;\n    if(ax.ticksuffix && !isHidden(ax.showticksuffix)) out.text += ax.ticksuffix;\n\n    return out;\n};\n\n/**\n * create text for a hover label on this axis, with special handling of\n * log axes (where negative values can't be displayed but can appear in hover text)\n *\n * @param {object} ax: the axis to format text for\n * @param {number} val: calcdata value to format\n * @param {Optional(number)} val2: a second value to display\n *\n * @returns {string} `val` formatted as a string appropriate to this axis, or\n *     `val` and `val2` as a range (ie '<val> - <val2>') if `val2` is provided and\n *     it's different from `val`.\n */\naxes.hoverLabelText = function(ax, val, val2) {\n    if(val2 !== BADNUM && val2 !== val) {\n        return axes.hoverLabelText(ax, val) + ' - ' + axes.hoverLabelText(ax, val2);\n    }\n\n    var logOffScale = (ax.type === 'log' && val <= 0);\n    var tx = axes.tickText(ax, ax.c2l(logOffScale ? -val : val), 'hover').text;\n\n    if(logOffScale) {\n        return val === 0 ? '0' : MINUS_SIGN + tx;\n    }\n\n    // TODO: should we do something special if the axis calendar and\n    // the data calendar are different? Somehow display both dates with\n    // their system names? Right now it will just display in the axis calendar\n    // but users could add the other one as text.\n    return tx;\n};\n\nfunction tickTextObj(ax, x, text) {\n    var tf = ax.tickfont || {};\n\n    return {\n        x: x,\n        dx: 0,\n        dy: 0,\n        text: text || '',\n        fontSize: tf.size,\n        font: tf.family,\n        fontColor: tf.color\n    };\n}\n\nfunction formatDate(ax, out, hover, extraPrecision) {\n    var tr = ax._tickround,\n        fmt = (hover && ax.hoverformat) || axes.getTickFormat(ax);\n\n    if(extraPrecision) {\n        // second or sub-second precision: extra always shows max digits.\n        // for other fields, extra precision just adds one field.\n        if(isNumeric(tr)) tr = 4;\n        else tr = {y: 'm', m: 'd', d: 'M', M: 'S', S: 4}[tr];\n    }\n\n    var dateStr = Lib.formatDate(out.x, fmt, tr, ax._dateFormat, ax.calendar, ax._extraFormat),\n        headStr;\n\n    var splitIndex = dateStr.indexOf('\\n');\n    if(splitIndex !== -1) {\n        headStr = dateStr.substr(splitIndex + 1);\n        dateStr = dateStr.substr(0, splitIndex);\n    }\n\n    if(extraPrecision) {\n        // if extraPrecision led to trailing zeros, strip them off\n        // actually, this can lead to removing even more zeros than\n        // in the original rounding, but that's fine because in these\n        // contexts uniformity is not so important (if there's even\n        // anything to be uniform with!)\n\n        // can we remove the whole time part?\n        if(dateStr === '00:00:00' || dateStr === '00:00') {\n            dateStr = headStr;\n            headStr = '';\n        }\n        else if(dateStr.length === 8) {\n            // strip off seconds if they're zero (zero fractional seconds\n            // are already omitted)\n            // but we never remove minutes and leave just hours\n            dateStr = dateStr.replace(/:00$/, '');\n        }\n    }\n\n    if(headStr) {\n        if(hover) {\n            // hover puts it all on one line, so headPart works best up front\n            // except for year headPart: turn this into \"Jan 1, 2000\" etc.\n            if(tr === 'd') dateStr += ', ' + headStr;\n            else dateStr = headStr + (dateStr ? ', ' + dateStr : '');\n        }\n        else if(!ax._inCalcTicks || (headStr !== ax._prevDateHead)) {\n            dateStr += '<br>' + headStr;\n            ax._prevDateHead = headStr;\n        }\n    }\n\n    out.text = dateStr;\n}\n\nfunction formatLog(ax, out, hover, extraPrecision, hideexp) {\n    var dtick = ax.dtick,\n        x = out.x,\n        tickformat = ax.tickformat;\n\n    if(hideexp === 'never') {\n        // If this is a hover label, then we must *never* hide the exponent\n        // for the sake of display, which could give the wrong value by\n        // potentially many orders of magnitude. If hideexp was 'never', then\n        // it's now succeeded by preventing the other condition from automating\n        // this choice. Thus we can unset it so that the axis formatting takes\n        // precedence.\n        hideexp = '';\n    }\n\n    if(extraPrecision && ((typeof dtick !== 'string') || dtick.charAt(0) !== 'L')) dtick = 'L3';\n\n    if(tickformat || (typeof dtick === 'string' && dtick.charAt(0) === 'L')) {\n        out.text = numFormat(Math.pow(10, x), ax, hideexp, extraPrecision);\n    }\n    else if(isNumeric(dtick) || ((dtick.charAt(0) === 'D') && (Lib.mod(x + 0.01, 1) < 0.1))) {\n        var p = Math.round(x);\n        if(['e', 'E', 'power'].indexOf(ax.exponentformat) !== -1 ||\n                (isSIFormat(ax.exponentformat) && beyondSI(p))) {\n            if(p === 0) out.text = 1;\n            else if(p === 1) out.text = '10';\n            else if(p > 1) out.text = '10<sup>' + p + '</sup>';\n            else out.text = '10<sup>' + MINUS_SIGN + -p + '</sup>';\n\n            out.fontSize *= 1.25;\n        }\n        else {\n            out.text = numFormat(Math.pow(10, x), ax, '', 'fakehover');\n            if(dtick === 'D1' && ax._id.charAt(0) === 'y') {\n                out.dy -= out.fontSize / 6;\n            }\n        }\n    }\n    else if(dtick.charAt(0) === 'D') {\n        out.text = String(Math.round(Math.pow(10, Lib.mod(x, 1))));\n        out.fontSize *= 0.75;\n    }\n    else throw 'unrecognized dtick ' + String(dtick);\n\n    // if 9's are printed on log scale, move the 10's away a bit\n    if(ax.dtick === 'D1') {\n        var firstChar = String(out.text).charAt(0);\n        if(firstChar === '0' || firstChar === '1') {\n            if(ax._id.charAt(0) === 'y') {\n                out.dx -= out.fontSize / 4;\n            }\n            else {\n                out.dy += out.fontSize / 2;\n                out.dx += (ax.range[1] > ax.range[0] ? 1 : -1) *\n                    out.fontSize * (x < 0 ? 0.5 : 0.25);\n            }\n        }\n    }\n}\n\nfunction formatCategory(ax, out) {\n    var tt = ax._categories[Math.round(out.x)];\n    if(tt === undefined) tt = '';\n    out.text = String(tt);\n}\n\nfunction formatLinear(ax, out, hover, extraPrecision, hideexp) {\n    if(hideexp === 'never') {\n        // If this is a hover label, then we must *never* hide the exponent\n        // for the sake of display, which could give the wrong value by\n        // potentially many orders of magnitude. If hideexp was 'never', then\n        // it's now succeeded by preventing the other condition from automating\n        // this choice. Thus we can unset it so that the axis formatting takes\n        // precedence.\n        hideexp = '';\n    } else if(ax.showexponent === 'all' && Math.abs(out.x / ax.dtick) < 1e-6) {\n        // don't add an exponent to zero if we're showing all exponents\n        // so the only reason you'd show an exponent on zero is if it's the\n        // ONLY tick to get an exponent (first or last)\n        hideexp = 'hide';\n    }\n    out.text = numFormat(out.x, ax, hideexp, extraPrecision);\n}\n\nfunction formatAngle(ax, out, hover, extraPrecision, hideexp) {\n    if(ax.thetaunit === 'radians' && !hover) {\n        var num = out.x / 180;\n\n        if(num === 0) {\n            out.text = '0';\n        } else {\n            var frac = num2frac(num);\n\n            if(frac[1] >= 100) {\n                out.text = numFormat(Lib.deg2rad(out.x), ax, hideexp, extraPrecision);\n            } else {\n                var isNeg = out.x < 0;\n\n                if(frac[1] === 1) {\n                    if(frac[0] === 1) out.text = 'π';\n                    else out.text = frac[0] + 'π';\n                } else {\n                    out.text = [\n                        '<sup>', frac[0], '</sup>',\n                        '⁄',\n                        '<sub>', frac[1], '</sub>',\n                        'π'\n                    ].join('');\n                }\n\n                if(isNeg) out.text = MINUS_SIGN + out.text;\n            }\n        }\n    } else {\n        out.text = numFormat(out.x, ax, hideexp, extraPrecision);\n    }\n}\n\n// inspired by\n// https://github.com/yisibl/num2fraction/blob/master/index.js\nfunction num2frac(num) {\n    function almostEq(a, b) {\n        return Math.abs(a - b) <= 1e-6;\n    }\n\n    function findGCD(a, b) {\n        return almostEq(b, 0) ? a : findGCD(b, a % b);\n    }\n\n    function findPrecision(n) {\n        var e = 1;\n        while(!almostEq(Math.round(n * e) / e, n)) {\n            e *= 10;\n        }\n        return e;\n    }\n\n    var precision = findPrecision(num);\n    var number = num * precision;\n    var gcd = Math.abs(findGCD(number, precision));\n\n    return [\n        // numerator\n        Math.round(number / gcd),\n        // denominator\n        Math.round(precision / gcd)\n    ];\n}\n\n// format a number (tick value) according to the axis settings\n// new, more reliable procedure than d3.round or similar:\n// add half the rounding increment, then stringify and truncate\n// also automatically switch to sci. notation\nvar SIPREFIXES = ['f', 'p', 'n', 'μ', 'm', '', 'k', 'M', 'G', 'T'];\n\nfunction isSIFormat(exponentFormat) {\n    return exponentFormat === 'SI' || exponentFormat === 'B';\n}\n\n// are we beyond the range of common SI prefixes?\n// 10^-16 -> 1x10^-16\n// 10^-15 -> 1f\n// ...\n// 10^14 -> 100T\n// 10^15 -> 1x10^15\n// 10^16 -> 1x10^16\nfunction beyondSI(exponent) {\n    return exponent > 14 || exponent < -15;\n}\n\nfunction numFormat(v, ax, fmtoverride, hover) {\n        // negative?\n    var isNeg = v < 0,\n        // max number of digits past decimal point to show\n        tickRound = ax._tickround,\n        exponentFormat = fmtoverride || ax.exponentformat || 'B',\n        exponent = ax._tickexponent,\n        tickformat = axes.getTickFormat(ax),\n        separatethousands = ax.separatethousands;\n\n    // special case for hover: set exponent just for this value, and\n    // add a couple more digits of precision over tick labels\n    if(hover) {\n        // make a dummy axis obj to get the auto rounding and exponent\n        var ah = {\n            exponentformat: exponentFormat,\n            dtick: ax.showexponent === 'none' ? ax.dtick :\n                (isNumeric(v) ? Math.abs(v) || 1 : 1),\n            // if not showing any exponents, don't change the exponent\n            // from what we calculate\n            range: ax.showexponent === 'none' ? ax.range.map(ax.r2d) : [0, v || 1]\n        };\n        autoTickRound(ah);\n        tickRound = (Number(ah._tickround) || 0) + 4;\n        exponent = ah._tickexponent;\n        if(ax.hoverformat) tickformat = ax.hoverformat;\n    }\n\n    if(tickformat) return ax._numFormat(tickformat)(v).replace(/-/g, MINUS_SIGN);\n\n    // 'epsilon' - rounding increment\n    var e = Math.pow(10, -tickRound) / 2;\n\n    // exponentFormat codes:\n    // 'e' (1.2e+6, default)\n    // 'E' (1.2E+6)\n    // 'SI' (1.2M)\n    // 'B' (same as SI except 10^9=B not G)\n    // 'none' (1200000)\n    // 'power' (1.2x10^6)\n    // 'hide' (1.2, use 3rd argument=='hide' to eg\n    //      only show exponent on last tick)\n    if(exponentFormat === 'none') exponent = 0;\n\n    // take the sign out, put it back manually at the end\n    // - makes cases easier\n    v = Math.abs(v);\n    if(v < e) {\n        // 0 is just 0, but may get exponent if it's the last tick\n        v = '0';\n        isNeg = false;\n    }\n    else {\n        v += e;\n        // take out a common exponent, if any\n        if(exponent) {\n            v *= Math.pow(10, -exponent);\n            tickRound += exponent;\n        }\n        // round the mantissa\n        if(tickRound === 0) v = String(Math.floor(v));\n        else if(tickRound < 0) {\n            v = String(Math.round(v));\n            v = v.substr(0, v.length + tickRound);\n            for(var i = tickRound; i < 0; i++) v += '0';\n        }\n        else {\n            v = String(v);\n            var dp = v.indexOf('.') + 1;\n            if(dp) v = v.substr(0, dp + tickRound).replace(/\\.?0+$/, '');\n        }\n        // insert appropriate decimal point and thousands separator\n        v = Lib.numSeparate(v, ax._separators, separatethousands);\n    }\n\n    // add exponent\n    if(exponent && exponentFormat !== 'hide') {\n        if(isSIFormat(exponentFormat) && beyondSI(exponent)) exponentFormat = 'power';\n\n        var signedExponent;\n        if(exponent < 0) signedExponent = MINUS_SIGN + -exponent;\n        else if(exponentFormat !== 'power') signedExponent = '+' + exponent;\n        else signedExponent = String(exponent);\n\n        if(exponentFormat === 'e') {\n            v += 'e' + signedExponent;\n        }\n        else if(exponentFormat === 'E') {\n            v += 'E' + signedExponent;\n        }\n        else if(exponentFormat === 'power') {\n            v += '×10<sup>' + signedExponent + '</sup>';\n        }\n        else if(exponentFormat === 'B' && exponent === 9) {\n            v += 'B';\n        }\n        else if(isSIFormat(exponentFormat)) {\n            v += SIPREFIXES[exponent / 3 + 5];\n        }\n    }\n\n    // put sign back in and return\n    // replace standard minus character (which is technically a hyphen)\n    // with a true minus sign\n    if(isNeg) return MINUS_SIGN + v;\n    return v;\n}\n\naxes.getTickFormat = function(ax) {\n    var i;\n\n    function convertToMs(dtick) {\n        return typeof dtick !== 'string' ? dtick : Number(dtick.replace('M', '')) * ONEAVGMONTH;\n    }\n\n    function compareLogTicks(left, right) {\n        var priority = ['L', 'D'];\n        if(typeof left === typeof right) {\n            if(typeof left === 'number') {\n                return left - right;\n            } else {\n                var leftPriority = priority.indexOf(left.charAt(0));\n                var rightPriority = priority.indexOf(right.charAt(0));\n                if(leftPriority === rightPriority) {\n                    return Number(left.replace(/(L|D)/g, '')) - Number(right.replace(/(L|D)/g, ''));\n                } else {\n                    return leftPriority - rightPriority;\n                }\n            }\n        } else {\n            return typeof left === 'number' ? 1 : -1;\n        }\n    }\n\n    function isProperStop(dtick, range, convert) {\n        var convertFn = convert || function(x) { return x;};\n        var leftDtick = range[0];\n        var rightDtick = range[1];\n        return ((!leftDtick && typeof leftDtick !== 'number') || convertFn(leftDtick) <= convertFn(dtick)) &&\n               ((!rightDtick && typeof rightDtick !== 'number') || convertFn(rightDtick) >= convertFn(dtick));\n    }\n\n    function isProperLogStop(dtick, range) {\n        var isLeftDtickNull = range[0] === null;\n        var isRightDtickNull = range[1] === null;\n        var isDtickInRangeLeft = compareLogTicks(dtick, range[0]) >= 0;\n        var isDtickInRangeRight = compareLogTicks(dtick, range[1]) <= 0;\n        return (isLeftDtickNull || isDtickInRangeLeft) && (isRightDtickNull || isDtickInRangeRight);\n    }\n\n    var tickstop;\n    if(ax.tickformatstops && ax.tickformatstops.length > 0) {\n        switch(ax.type) {\n            case 'date':\n            case 'linear': {\n                for(i = 0; i < ax.tickformatstops.length; i++) {\n                    if(isProperStop(ax.dtick, ax.tickformatstops[i].dtickrange, convertToMs)) {\n                        tickstop = ax.tickformatstops[i];\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'log': {\n                for(i = 0; i < ax.tickformatstops.length; i++) {\n                    if(isProperLogStop(ax.dtick, ax.tickformatstops[i].dtickrange)) {\n                        tickstop = ax.tickformatstops[i];\n                        break;\n                    }\n                }\n                break;\n            }\n            default:\n        }\n    }\n    return tickstop ? tickstop.value : ax.tickformat;\n};\n\n// getSubplots - extract all subplot IDs we need\n// as an array of items like 'xy', 'x2y', 'x2y2'...\n// sorted by x (x,x2,x3...) then y\n// optionally restrict to only subplots containing axis object ax\naxes.getSubplots = function(gd, ax) {\n    var subplotObj = gd._fullLayout._subplots;\n    var allSubplots = subplotObj.cartesian.concat(subplotObj.gl2d || []);\n\n    var out = ax ? axes.findSubplotsWithAxis(allSubplots, ax) : allSubplots;\n\n    out.sort(function(a, b) {\n        var aParts = a.substr(1).split('y');\n        var bParts = b.substr(1).split('y');\n\n        if(aParts[0] === bParts[0]) return +aParts[1] - +bParts[1];\n        return +aParts[0] - +bParts[0];\n    });\n\n    return out;\n};\n\n// find all subplots with axis 'ax'\naxes.findSubplotsWithAxis = function(subplots, ax) {\n    var axMatch = new RegExp(\n        (ax._id.charAt(0) === 'x') ? ('^' + ax._id + 'y') : (ax._id + '$')\n    );\n    var subplotsWithAxis = [];\n\n    for(var i = 0; i < subplots.length; i++) {\n        var sp = subplots[i];\n        if(axMatch.test(sp)) subplotsWithAxis.push(sp);\n    }\n\n    return subplotsWithAxis;\n};\n\n// makeClipPaths: prepare clipPaths for all single axes and all possible xy pairings\naxes.makeClipPaths = function(gd) {\n    var fullLayout = gd._fullLayout;\n\n    // for more info: https://github.com/plotly/plotly.js/issues/2595\n    if(fullLayout._hasOnlyLargeSploms) return;\n\n    var fullWidth = {_offset: 0, _length: fullLayout.width, _id: ''};\n    var fullHeight = {_offset: 0, _length: fullLayout.height, _id: ''};\n    var xaList = axes.list(gd, 'x', true);\n    var yaList = axes.list(gd, 'y', true);\n    var clipList = [];\n    var i, j;\n\n    for(i = 0; i < xaList.length; i++) {\n        clipList.push({x: xaList[i], y: fullHeight});\n        for(j = 0; j < yaList.length; j++) {\n            if(i === 0) clipList.push({x: fullWidth, y: yaList[j]});\n            clipList.push({x: xaList[i], y: yaList[j]});\n        }\n    }\n\n    // selectors don't work right with camelCase tags,\n    // have to use class instead\n    // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n    var axClips = fullLayout._clips.selectAll('.axesclip')\n        .data(clipList, function(d) { return d.x._id + d.y._id; });\n\n    axClips.enter().append('clipPath')\n        .classed('axesclip', true)\n        .attr('id', function(d) { return 'clip' + fullLayout._uid + d.x._id + d.y._id; })\n      .append('rect');\n\n    axClips.exit().remove();\n\n    axClips.each(function(d) {\n        d3.select(this).select('rect').attr({\n            x: d.x._offset || 0,\n            y: d.y._offset || 0,\n            width: d.x._length || 1,\n            height: d.y._length || 1\n        });\n    });\n};\n\n/** Main multi-axis drawing routine!\n *\n * @param {DOM element} gd : graph div\n * @param {string or array of strings} arg : polymorphic argument\n * @param {boolean} skipTitle : optional flag to skip axis title draw/update\n *\n * Signature 1: Axes.doTicks(gd, 'redraw')\n *   use this to clear and redraw all axes on graph\n *\n * Signature 2: Axes.doTicks(gd, '')\n *   use this to draw all axes on graph w/o the selectAll().remove()\n *   of the 'redraw' signature\n *\n * Signature 3: Axes.doTicks(gd, [axId, axId2, ...])\n *   where the items are axis id string,\n *   use this to update multiple axes in one call\n *\n * N.B doTicks updates:\n * - ax._r (stored range for use by zoom/pan)\n * - ax._rl (stored linearized range for use by zoom/pan)\n */\naxes.doTicks = function(gd, arg, skipTitle) {\n    var fullLayout = gd._fullLayout;\n\n    if(arg === 'redraw') {\n        fullLayout._paper.selectAll('g.subplot').each(function(subplot) {\n            var plotinfo = fullLayout._plots[subplot];\n            var xa = plotinfo.xaxis;\n            var ya = plotinfo.yaxis;\n\n            plotinfo.xaxislayer.selectAll('.' + xa._id + 'tick').remove();\n            plotinfo.yaxislayer.selectAll('.' + ya._id + 'tick').remove();\n            if(plotinfo.gridlayer) plotinfo.gridlayer.selectAll('path').remove();\n            if(plotinfo.zerolinelayer) plotinfo.zerolinelayer.selectAll('path').remove();\n            fullLayout._infolayer.select('.g-' + xa._id + 'title').remove();\n            fullLayout._infolayer.select('.g-' + ya._id + 'title').remove();\n        });\n    }\n\n    var axList = (!arg || arg === 'redraw') ? axes.listIds(gd) : arg;\n\n    Lib.syncOrAsync(axList.map(function(axid) {\n        return function() {\n            if(!axid) return;\n\n            var axDone = axes.doTicksSingle(gd, axid, skipTitle);\n\n            var ax = axes.getFromId(gd, axid);\n            ax._r = ax.range.slice();\n            ax._rl = Lib.simpleMap(ax._r, ax.r2l);\n\n            return axDone;\n        };\n    }));\n};\n\n/** Per axis drawing routine!\n *\n * This routine draws axis ticks and much more (... grids, labels, title etc.)\n * Supports multiple argument signatures.\n * N.B. this thing is async in general (because of MathJax rendering)\n *\n * @param {DOM element} gd : graph div\n * @param {string or array of strings} arg : polymorphic argument\n * @param {boolean} skipTitle : optional flag to skip axis title draw/update\n * @return {promise}\n *\n * Signature 1: Axes.doTicks(gd, ax)\n *   where ax is an axis object as in fullLayout\n *\n * Signature 2: Axes.doTicks(gd, axId)\n *   where axId is a axis id string\n */\naxes.doTicksSingle = function(gd, arg, skipTitle) {\n    var fullLayout = gd._fullLayout;\n    var independent = false;\n    var ax;\n\n    if(Lib.isPlainObject(arg)) {\n        ax = arg;\n        independent = true;\n    } else {\n        ax = axes.getFromId(gd, arg);\n    }\n\n    // set scaling to pixels\n    ax.setScale();\n\n    var axid = ax._id;\n    var axLetter = axid.charAt(0);\n    var counterLetter = axes.counterLetter(axid);\n    var vals = ax._vals = axes.calcTicks(ax);\n    var datafn = function(d) { return [d.text, d.x, ax.mirror, d.font, d.fontSize, d.fontColor].join('_'); };\n    var tcls = axid + 'tick';\n    var gcls = axid + 'grid';\n    var zcls = axid + 'zl';\n    var pad = (ax.linewidth || 1) / 2;\n    var labelStandoff = (ax.ticks === 'outside' ? ax.ticklen : 0);\n    var labelShift = 0;\n    var gridWidth = Drawing.crispRound(gd, ax.gridwidth, 1);\n    var zeroLineWidth = Drawing.crispRound(gd, ax.zerolinewidth, gridWidth);\n    var tickWidth = Drawing.crispRound(gd, ax.tickwidth, 1);\n    var sides, transfn, tickpathfn, subplots;\n    var tickLabels;\n    var i;\n\n    if(ax._counterangle && ax.ticks === 'outside') {\n        var caRad = ax._counterangle * Math.PI / 180;\n        labelStandoff = ax.ticklen * Math.cos(caRad) + 1;\n        labelShift = ax.ticklen * Math.sin(caRad);\n    }\n\n    if(ax.showticklabels && (ax.ticks === 'outside' || ax.showline)) {\n        labelStandoff += 0.2 * ax.tickfont.size;\n    }\n\n    // positioning arguments for x vs y axes\n    if(axLetter === 'x') {\n        sides = ['bottom', 'top'];\n        transfn = ax._transfn || function(d) {\n            return 'translate(' + (ax._offset + ax.l2p(d.x)) + ',0)';\n        };\n        tickpathfn = function(shift, len) {\n            if(ax._counterangle) {\n                var caRad = ax._counterangle * Math.PI / 180;\n                return 'M0,' + shift + 'l' + (Math.sin(caRad) * len) + ',' + (Math.cos(caRad) * len);\n            }\n            else return 'M0,' + shift + 'v' + len;\n        };\n    }\n    else if(axLetter === 'y') {\n        sides = ['left', 'right'];\n        transfn = ax._transfn || function(d) {\n            return 'translate(0,' + (ax._offset + ax.l2p(d.x)) + ')';\n        };\n        tickpathfn = function(shift, len) {\n            if(ax._counterangle) {\n                var caRad = ax._counterangle * Math.PI / 180;\n                return 'M' + shift + ',0l' + (Math.cos(caRad) * len) + ',' + (-Math.sin(caRad) * len);\n            }\n            else return 'M' + shift + ',0h' + len;\n        };\n    }\n    else if(axid === 'angular') {\n        sides = ['left', 'right'];\n        transfn = ax._transfn;\n        tickpathfn = function(shift, len) {\n            return 'M' + shift + ',0h' + len;\n        };\n    }\n    else {\n        Lib.warn('Unrecognized doTicks axis:', axid);\n        return;\n    }\n\n    var axside = ax.side || sides[0];\n    // which direction do the side[0], side[1], and free ticks go?\n    // then we flip if outside XOR y axis\n    var ticksign = [-1, 1, axside === sides[1] ? 1 : -1];\n    if((ax.ticks !== 'inside') === (axLetter === 'x')) {\n        ticksign = ticksign.map(function(v) { return -v; });\n    }\n\n    if(!ax.visible) return;\n\n    if(ax._tickFilter) {\n        vals = vals.filter(ax._tickFilter);\n    }\n\n    // remove zero lines, grid lines, and inside ticks if they're within\n    // 1 pixel of the end\n    // The key case here is removing zero lines when the axis bound is zero.\n    function clipEnds(d) {\n        var p = ax.l2p(d.x);\n        return (p > 1 && p < ax._length - 1);\n    }\n    var valsClipped = vals.filter(clipEnds);\n\n    // don't clip angular values\n    if(ax._id === 'angular') {\n        valsClipped = vals;\n    }\n\n    function drawTicks(container, tickpath) {\n        var ticks = container.selectAll('path.' + tcls)\n            .data(ax.ticks === 'inside' ? valsClipped : vals, datafn);\n\n        if(tickpath && ax.ticks) {\n            ticks.enter().append('path').classed(tcls, 1).classed('ticks', 1)\n                .classed('crisp', 1)\n                .call(Color.stroke, ax.tickcolor)\n                .style('stroke-width', tickWidth + 'px')\n                .attr('d', tickpath);\n            ticks.attr('transform', transfn);\n            ticks.exit().remove();\n        }\n        else ticks.remove();\n    }\n\n    function drawLabels(container, position) {\n        // tick labels - for now just the main labels.\n        // TODO: mirror labels, esp for subplots\n        tickLabels = container.selectAll('g.' + tcls).data(vals, datafn);\n\n        if(!isNumeric(position)) {\n            tickLabels.remove();\n            drawAxTitle();\n            return;\n        }\n        if(!ax.showticklabels) {\n            tickLabels.remove();\n            drawAxTitle();\n            calcBoundingBox();\n            return;\n        }\n\n        var labelx, labely, labelanchor, labelpos0, flipit;\n        if(axLetter === 'x') {\n            flipit = (axside === 'bottom') ? 1 : -1;\n            labelx = function(d) { return d.dx + labelShift * flipit; };\n            labelpos0 = position + (labelStandoff + pad) * flipit;\n            labely = function(d) {\n                return d.dy + labelpos0 + d.fontSize *\n                    ((axside === 'bottom') ? 1 : -0.2);\n            };\n            labelanchor = function(angle) {\n                if(!isNumeric(angle) || angle === 0 || angle === 180) {\n                    return 'middle';\n                }\n                return (angle * flipit < 0) ? 'end' : 'start';\n            };\n        }\n        else if(axLetter === 'y') {\n            flipit = (axside === 'right') ? 1 : -1;\n            labely = function(d) {\n                return d.dy + d.fontSize * MID_SHIFT - labelShift * flipit;\n            };\n            labelx = function(d) {\n                return d.dx + position + (labelStandoff + pad +\n                    ((Math.abs(ax.tickangle) === 90) ? d.fontSize / 2 : 0)) * flipit;\n            };\n            labelanchor = function(angle) {\n                if(isNumeric(angle) && Math.abs(angle) === 90) {\n                    return 'middle';\n                }\n                return axside === 'right' ? 'start' : 'end';\n            };\n        }\n        else if(axid === 'angular') {\n            ax._labelShift = labelShift;\n            ax._labelStandoff = labelStandoff;\n            ax._pad = pad;\n\n            labelx = ax._labelx;\n            labely = ax._labely;\n            labelanchor = ax._labelanchor;\n        }\n\n        var maxFontSize = 0,\n            autoangle = 0,\n            labelsReady = [];\n        tickLabels.enter().append('g').classed(tcls, 1)\n            .append('text')\n                // only so tex has predictable alignment that we can\n                // alter later\n                .attr('text-anchor', 'middle')\n                .each(function(d) {\n                    var thisLabel = d3.select(this),\n                        newPromise = gd._promises.length;\n                    thisLabel\n                        .call(svgTextUtils.positionText, labelx(d), labely(d))\n                        .call(Drawing.font, d.font, d.fontSize, d.fontColor)\n                        .text(d.text)\n                        .call(svgTextUtils.convertToTspans, gd);\n                    newPromise = gd._promises[newPromise];\n                    if(newPromise) {\n                        // if we have an async label, we'll deal with that\n                        // all here so take it out of gd._promises and\n                        // instead position the label and promise this in\n                        // labelsReady\n                        labelsReady.push(gd._promises.pop().then(function() {\n                            positionLabels(thisLabel, ax.tickangle);\n                        }));\n                    }\n                    else {\n                        // sync label: just position it now.\n                        positionLabels(thisLabel, ax.tickangle);\n                    }\n                });\n        tickLabels.exit().remove();\n\n        tickLabels.each(function(d) {\n            maxFontSize = Math.max(maxFontSize, d.fontSize);\n        });\n\n        if(axid === 'angular') {\n            tickLabels.each(function(d) {\n                d3.select(this).select('text')\n                    .call(svgTextUtils.positionText, labelx(d), labely(d));\n            });\n        }\n\n        // How much to shift a multi-line label to center it vertically.\n        function getAnchorHeight(lineCount, lineHeight, angle) {\n            var h = (lineCount - 1) * lineHeight;\n            if(axLetter === 'x') {\n                if(angle < -60 || 60 < angle) {\n                    return -0.5 * h;\n                } else if(axside === 'top') {\n                    return -h;\n                }\n            } else {\n                angle *= axside === 'left' ? 1 : -1;\n                if(angle < -30) {\n                    return -h;\n                } else if(angle < 30) {\n                    return -0.5 * h;\n                }\n            }\n            return 0;\n        }\n\n        function positionLabels(s, angle) {\n            s.each(function(d) {\n                var anchor = labelanchor(angle, d);\n                var thisLabel = d3.select(this),\n                    mathjaxGroup = thisLabel.select('.text-math-group'),\n                    transform = transfn.call(thisLabel.node(), d) +\n                        ((isNumeric(angle) && +angle !== 0) ?\n                        (' rotate(' + angle + ',' + labelx(d) + ',' +\n                            (labely(d) - d.fontSize / 2) + ')') :\n                        '');\n                var anchorHeight = getAnchorHeight(\n                    svgTextUtils.lineCount(thisLabel),\n                    LINE_SPACING * d.fontSize,\n                    isNumeric(angle) ? +angle : 0);\n                if(anchorHeight) {\n                    transform += ' translate(0, ' + anchorHeight + ')';\n                }\n                if(mathjaxGroup.empty()) {\n                    thisLabel.select('text').attr({\n                        transform: transform,\n                        'text-anchor': anchor\n                    });\n                }\n                else {\n                    var mjShift =\n                        Drawing.bBox(mathjaxGroup.node()).width *\n                            {end: -0.5, start: 0.5}[anchor];\n                    mathjaxGroup.attr('transform', transform +\n                        (mjShift ? 'translate(' + mjShift + ',0)' : ''));\n                }\n            });\n        }\n\n        // make sure all labels are correctly positioned at their base angle\n        // the positionLabels call above is only for newly drawn labels.\n        // do this without waiting, using the last calculated angle to\n        // minimize flicker, then do it again when we know all labels are\n        // there, putting back the prescribed angle to check for overlaps.\n        positionLabels(tickLabels, ax._lastangle || ax.tickangle);\n\n        function allLabelsReady() {\n            return labelsReady.length && Promise.all(labelsReady);\n        }\n\n        function fixLabelOverlaps() {\n            positionLabels(tickLabels, ax.tickangle);\n\n            // check for auto-angling if x labels overlap\n            // don't auto-angle at all for log axes with\n            // base and digit format\n            if(axLetter === 'x' && !isNumeric(ax.tickangle) &&\n                    (ax.type !== 'log' || String(ax.dtick).charAt(0) !== 'D')) {\n                var lbbArray = [];\n                tickLabels.each(function(d) {\n                    var s = d3.select(this),\n                        thisLabel = s.select('.text-math-group'),\n                        x = ax.l2p(d.x);\n                    if(thisLabel.empty()) thisLabel = s.select('text');\n\n                    var bb = Drawing.bBox(thisLabel.node());\n\n                    lbbArray.push({\n                        // ignore about y, just deal with x overlaps\n                        top: 0,\n                        bottom: 10,\n                        height: 10,\n                        left: x - bb.width / 2,\n                        // impose a 2px gap\n                        right: x + bb.width / 2 + 2,\n                        width: bb.width + 2\n                    });\n                });\n                for(i = 0; i < lbbArray.length - 1; i++) {\n                    if(Lib.bBoxIntersect(lbbArray[i], lbbArray[i + 1])) {\n                        // any overlap at all - set 30 degrees\n                        autoangle = 30;\n                        break;\n                    }\n                }\n                if(autoangle) {\n                    var tickspacing = Math.abs(\n                            (vals[vals.length - 1].x - vals[0].x) * ax._m\n                        ) / (vals.length - 1);\n                    if(tickspacing < maxFontSize * 2.5) {\n                        autoangle = 90;\n                    }\n                    positionLabels(tickLabels, autoangle);\n                }\n                ax._lastangle = autoangle;\n            }\n\n            // update the axis title\n            // (so it can move out of the way if needed)\n            // TODO: separate out scoot so we don't need to do\n            // a full redraw of the title (mostly relevant for MathJax)\n            drawAxTitle();\n            return axid + ' done';\n        }\n\n        function calcBoundingBox() {\n            if(ax.showticklabels) {\n                var gdBB = gd.getBoundingClientRect();\n                var bBox = container.node().getBoundingClientRect();\n\n                /*\n                 * the way we're going to use this, the positioning that matters\n                 * is relative to the origin of gd. This is important particularly\n                 * if gd is scrollable, and may have been scrolled between the time\n                 * we calculate this and the time we use it\n                 */\n\n                ax._boundingBox = {\n                    width: bBox.width,\n                    height: bBox.height,\n                    left: bBox.left - gdBB.left,\n                    right: bBox.right - gdBB.left,\n                    top: bBox.top - gdBB.top,\n                    bottom: bBox.bottom - gdBB.top\n                };\n            } else {\n                var gs = fullLayout._size;\n                var pos;\n\n                // set dummy bbox for ticklabel-less axes\n\n                if(axLetter === 'x') {\n                    pos = ax.anchor === 'free' ?\n                        gs.t + gs.h * (1 - ax.position) :\n                        gs.t + gs.h * (1 - ax._anchorAxis.domain[{bottom: 0, top: 1}[ax.side]]);\n\n                    ax._boundingBox = {\n                        top: pos,\n                        bottom: pos,\n                        left: ax._offset,\n                        right: ax._offset + ax._length,\n                        width: ax._length,\n                        height: 0\n                    };\n                } else {\n                    pos = ax.anchor === 'free' ?\n                        gs.l + gs.w * ax.position :\n                        gs.l + gs.w * ax._anchorAxis.domain[{left: 0, right: 1}[ax.side]];\n\n                    ax._boundingBox = {\n                        left: pos,\n                        right: pos,\n                        bottom: ax._offset + ax._length,\n                        top: ax._offset,\n                        height: ax._length,\n                        width: 0\n                    };\n                }\n            }\n\n            /*\n             * for spikelines: what's the full domain of positions in the\n             * opposite direction that are associated with this axis?\n             * This means any axes that we make a subplot with, plus the\n             * position of the axis itself if it's free.\n             */\n            if(subplots) {\n                var fullRange = ax._counterSpan = [Infinity, -Infinity];\n\n                for(i = 0; i < subplots.length; i++) {\n                    var subplot = fullLayout._plots[subplots[i]];\n                    var counterAxis = subplot[(axLetter === 'x') ? 'yaxis' : 'xaxis'];\n\n                    extendRange(fullRange, [\n                        counterAxis._offset,\n                        counterAxis._offset + counterAxis._length\n                    ]);\n                }\n\n                if(ax.anchor === 'free') {\n                    extendRange(fullRange, (axLetter === 'x') ?\n                        [ax._boundingBox.bottom, ax._boundingBox.top] :\n                        [ax._boundingBox.right, ax._boundingBox.left]);\n                }\n            }\n\n            function extendRange(range, newRange) {\n                range[0] = Math.min(range[0], newRange[0]);\n                range[1] = Math.max(range[1], newRange[1]);\n            }\n        }\n\n        function doAutoMargins() {\n            if(!ax.automargin) { return; }\n            if(axLetter !== 'x' && axLetter !== 'y') { return; }\n\n            var s = ax.side[0];\n            var push = {x: 0, y: 0, r: 0, l: 0, t: 0, b: 0};\n\n            if(axLetter === 'x') {\n                push.y = (ax.anchor === 'free' ? ax.position :\n                        ax._anchorAxis.domain[s === 't' ? 1 : 0]);\n                push[s] += ax._boundingBox.height;\n            }\n            else {\n                push.x = (ax.anchor === 'free' ? ax.position :\n                        ax._anchorAxis.domain[s === 'r' ? 1 : 0]);\n                push[s] += ax._boundingBox.width;\n            }\n\n            if(ax.title !== fullLayout._dfltTitle[axLetter]) {\n                push[s] += ax.titlefont.size;\n            }\n\n            var pushKey = ax._name + '.automargin';\n            var prevPush = fullLayout._pushmargin[pushKey];\n            if(!prevPush || prevPush[s].size < push[s]) {\n                Plots.autoMargin(gd, pushKey, push);\n            }\n        }\n\n        var done = Lib.syncOrAsync([\n            allLabelsReady,\n            fixLabelOverlaps,\n            calcBoundingBox,\n            doAutoMargins\n        ]);\n        if(done && done.then) gd._promises.push(done);\n        return done;\n    }\n\n    function drawAxTitle() {\n        if(skipTitle) return;\n\n        // now this only applies to regular cartesian axes; colorbars and\n        // others ALWAYS call doTicks with skipTitle=true so they can\n        // configure their own titles.\n\n        // rangeslider takes over a bottom title so drop it here\n        if(ax.rangeslider && ax.rangeslider.visible && ax._boundingBox && ax.side === 'bottom') return;\n\n        var avoid = {\n            selection: tickLabels,\n            side: ax.side\n        };\n        var axLetter = axid.charAt(0);\n        var gs = gd._fullLayout._size;\n        var offsetBase = 1.5;\n        var fontSize = ax.titlefont.size;\n\n        var transform, counterAxis, x, y;\n\n        if(tickLabels.size()) {\n            var translation = Drawing.getTranslate(tickLabels.node().parentNode);\n            avoid.offsetLeft = translation.x;\n            avoid.offsetTop = translation.y;\n        }\n\n        var titleStandoff = 10 + fontSize * offsetBase +\n            (ax.linewidth ? ax.linewidth - 1 : 0);\n\n        if(axLetter === 'x') {\n            counterAxis = (ax.anchor === 'free') ?\n                {_offset: gs.t + (1 - (ax.position || 0)) * gs.h, _length: 0} :\n                axisIds.getFromId(gd, ax.anchor);\n\n            x = ax._offset + ax._length / 2;\n\n            if(ax.side === 'top') {\n                y = -titleStandoff - fontSize * (ax.showticklabels ? 1 : 0);\n            }\n            else {\n                y = counterAxis._length + titleStandoff +\n                    fontSize * (ax.showticklabels ? 1.5 : 0.5);\n            }\n            y += counterAxis._offset;\n\n            if(!avoid.side) avoid.side = 'bottom';\n        }\n        else {\n            counterAxis = (ax.anchor === 'free') ?\n                {_offset: gs.l + (ax.position || 0) * gs.w, _length: 0} :\n                axisIds.getFromId(gd, ax.anchor);\n\n            y = ax._offset + ax._length / 2;\n            if(ax.side === 'right') {\n                x = counterAxis._length + titleStandoff +\n                    fontSize * (ax.showticklabels ? 1 : 0.5);\n            }\n            else {\n                x = -titleStandoff - fontSize * (ax.showticklabels ? 0.5 : 0);\n            }\n            x += counterAxis._offset;\n\n            transform = {rotate: '-90', offset: 0};\n            if(!avoid.side) avoid.side = 'left';\n        }\n\n        Titles.draw(gd, axid + 'title', {\n            propContainer: ax,\n            propName: ax._name + '.title',\n            placeholder: fullLayout._dfltTitle[axLetter],\n            avoid: avoid,\n            transform: transform,\n            attributes: {x: x, y: y, 'text-anchor': 'middle'}\n        });\n    }\n\n    function traceHasBarsOrFill(trace, subplot) {\n        if(trace.visible !== true || trace.xaxis + trace.yaxis !== subplot) return false;\n        if(Registry.traceIs(trace, 'bar') && trace.orientation === {x: 'h', y: 'v'}[axLetter]) return true;\n        return trace.fill && trace.fill.charAt(trace.fill.length - 1) === axLetter;\n    }\n\n    function drawGrid(plotinfo, counteraxis, subplot) {\n        if(fullLayout._hasOnlyLargeSploms) return;\n\n        var gridcontainer = plotinfo.gridlayer.selectAll('.' + axid);\n        var zlcontainer = plotinfo.zerolinelayer;\n        var gridvals = plotinfo['hidegrid' + axLetter] ? [] : valsClipped;\n        var gridpath = ax._gridpath || ((axLetter === 'x' ?\n                ('M0,' + counteraxis._offset + 'v') :\n                ('M' + counteraxis._offset + ',0h')\n            ) + counteraxis._length);\n        var grid = gridcontainer.selectAll('path.' + gcls)\n            .data((ax.showgrid === false) ? [] : gridvals, datafn);\n        grid.enter().append('path').classed(gcls, 1)\n            .classed('crisp', 1)\n            .attr('d', gridpath)\n            .each(function(d) {\n                if(ax.zeroline && (ax.type === 'linear' || ax.type === '-') &&\n                        Math.abs(d.x) < ax.dtick / 100) {\n                    d3.select(this).remove();\n                }\n            });\n        grid.attr('transform', transfn)\n            .call(Color.stroke, ax.gridcolor || '#ddd')\n            .style('stroke-width', gridWidth + 'px');\n        if(typeof gridpath === 'function') grid.attr('d', gridpath);\n        grid.exit().remove();\n\n        // zero line\n        if(zlcontainer) {\n            var hasBarsOrFill = false;\n            for(var i = 0; i < gd._fullData.length; i++) {\n                if(traceHasBarsOrFill(gd._fullData[i], subplot)) {\n                    hasBarsOrFill = true;\n                    break;\n                }\n            }\n            var rng = Lib.simpleMap(ax.range, ax.r2l),\n                showZl = (rng[0] * rng[1] <= 0) && ax.zeroline &&\n                (ax.type === 'linear' || ax.type === '-') && gridvals.length &&\n                (hasBarsOrFill || clipEnds({x: 0}) || !ax.showline);\n            var zl = zlcontainer.selectAll('path.' + zcls)\n                .data(showZl ? [{x: 0, id: axid}] : []);\n            zl.enter().append('path').classed(zcls, 1).classed('zl', 1)\n                .classed('crisp', 1)\n                .attr('d', gridpath)\n                .each(function() {\n                    // use the fact that only one element can enter to trigger a sort.\n                    // If several zerolines enter at the same time we will sort once per,\n                    // but generally this should be a minimal overhead.\n                    zlcontainer.selectAll('path').sort(function(da, db) {\n                        return axisIds.idSort(da.id, db.id);\n                    });\n                });\n            zl.attr('transform', transfn)\n                .call(Color.stroke, ax.zerolinecolor || Color.defaultLine)\n                .style('stroke-width', zeroLineWidth + 'px');\n            zl.exit().remove();\n        }\n    }\n\n    if(independent) {\n        drawTicks(ax._axislayer, tickpathfn(ax._pos + pad * ticksign[2], ticksign[2] * ax.ticklen));\n        if(ax._counteraxis) {\n            var fictionalPlotinfo = {\n                gridlayer: ax._gridlayer,\n                zerolinelayer: ax._zerolinelayer\n            };\n            drawGrid(fictionalPlotinfo, ax._counteraxis);\n        }\n        return drawLabels(ax._axislayer, ax._pos);\n    }\n    else if(fullLayout._has('cartesian')) {\n        subplots = axes.getSubplots(gd, ax);\n\n        // keep track of which subplots (by main conteraxis) we've already\n        // drawn grids for, so we don't overdraw overlaying subplots\n        var finishedGrids = {};\n\n        subplots.map(function(subplot) {\n            var plotinfo = fullLayout._plots[subplot];\n            var counterAxis = plotinfo[counterLetter + 'axis'];\n\n            var mainCounterID = counterAxis._mainAxis._id;\n            if(finishedGrids[mainCounterID]) return;\n            finishedGrids[mainCounterID] = 1;\n\n            drawGrid(plotinfo, counterAxis, subplot);\n        });\n\n        var mainSubplot = ax._mainSubplot;\n        var mainPlotinfo = fullLayout._plots[mainSubplot];\n        var tickSubplots = [];\n\n        if(ax.ticks) {\n            var mainSign = ticksign[2];\n            var tickpath = tickpathfn(ax._mainLinePosition + pad * mainSign, mainSign * ax.ticklen);\n            if(ax._anchorAxis && ax.mirror && ax.mirror !== true) {\n                tickpath += tickpathfn(ax._mainMirrorPosition - pad * mainSign, -mainSign * ax.ticklen);\n            }\n            drawTicks(mainPlotinfo[axLetter + 'axislayer'], tickpath);\n\n            tickSubplots = Object.keys(ax._linepositions || {});\n        }\n\n        tickSubplots.map(function(subplot) {\n            var plotinfo = fullLayout._plots[subplot];\n\n            var container = plotinfo[axLetter + 'axislayer'];\n\n            // [bottom or left, top or right]\n            // free and main are handled above\n            var linepositions = ax._linepositions[subplot] || [];\n\n            function tickPathSide(sidei) {\n                var tsign = ticksign[sidei];\n                return tickpathfn(linepositions[sidei] + pad * tsign, tsign * ax.ticklen);\n            }\n\n            drawTicks(container, tickPathSide(0) + tickPathSide(1));\n        });\n\n        var mainContainer = mainPlotinfo[axLetter + 'axislayer'];\n\n        return drawLabels(mainContainer, ax._mainLinePosition);\n    }\n};\n\n// swap all the presentation attributes of the axes showing these traces\naxes.swap = function(gd, traces) {\n    var axGroups = makeAxisGroups(gd, traces);\n\n    for(var i = 0; i < axGroups.length; i++) {\n        swapAxisGroup(gd, axGroups[i].x, axGroups[i].y);\n    }\n};\n\nfunction makeAxisGroups(gd, traces) {\n    var groups = [],\n        i,\n        j;\n\n    for(i = 0; i < traces.length; i++) {\n        var groupsi = [],\n            xi = gd._fullData[traces[i]].xaxis,\n            yi = gd._fullData[traces[i]].yaxis;\n        if(!xi || !yi) continue; // not a 2D cartesian trace?\n\n        for(j = 0; j < groups.length; j++) {\n            if(groups[j].x.indexOf(xi) !== -1 || groups[j].y.indexOf(yi) !== -1) {\n                groupsi.push(j);\n            }\n        }\n\n        if(!groupsi.length) {\n            groups.push({x: [xi], y: [yi]});\n            continue;\n        }\n\n        var group0 = groups[groupsi[0]],\n            groupj;\n\n        if(groupsi.length > 1) {\n            for(j = 1; j < groupsi.length; j++) {\n                groupj = groups[groupsi[j]];\n                mergeAxisGroups(group0.x, groupj.x);\n                mergeAxisGroups(group0.y, groupj.y);\n            }\n        }\n        mergeAxisGroups(group0.x, [xi]);\n        mergeAxisGroups(group0.y, [yi]);\n    }\n\n    return groups;\n}\n\nfunction mergeAxisGroups(intoSet, fromSet) {\n    for(var i = 0; i < fromSet.length; i++) {\n        if(intoSet.indexOf(fromSet[i]) === -1) intoSet.push(fromSet[i]);\n    }\n}\n\nfunction swapAxisGroup(gd, xIds, yIds) {\n    var i,\n        j,\n        xFullAxes = [],\n        yFullAxes = [],\n        layout = gd.layout;\n\n    for(i = 0; i < xIds.length; i++) xFullAxes.push(axes.getFromId(gd, xIds[i]));\n    for(i = 0; i < yIds.length; i++) yFullAxes.push(axes.getFromId(gd, yIds[i]));\n\n    var allAxKeys = Object.keys(xFullAxes[0]),\n        noSwapAttrs = [\n            'anchor', 'domain', 'overlaying', 'position', 'side', 'tickangle'\n        ],\n        numericTypes = ['linear', 'log'];\n\n    for(i = 0; i < allAxKeys.length; i++) {\n        var keyi = allAxKeys[i],\n            xVal = xFullAxes[0][keyi],\n            yVal = yFullAxes[0][keyi],\n            allEqual = true,\n            coerceLinearX = false,\n            coerceLinearY = false;\n        if(keyi.charAt(0) === '_' || typeof xVal === 'function' ||\n                noSwapAttrs.indexOf(keyi) !== -1) {\n            continue;\n        }\n        for(j = 1; j < xFullAxes.length && allEqual; j++) {\n            var xVali = xFullAxes[j][keyi];\n            if(keyi === 'type' && numericTypes.indexOf(xVal) !== -1 &&\n                    numericTypes.indexOf(xVali) !== -1 && xVal !== xVali) {\n                // type is special - if we find a mixture of linear and log,\n                // coerce them all to linear on flipping\n                coerceLinearX = true;\n            }\n            else if(xVali !== xVal) allEqual = false;\n        }\n        for(j = 1; j < yFullAxes.length && allEqual; j++) {\n            var yVali = yFullAxes[j][keyi];\n            if(keyi === 'type' && numericTypes.indexOf(yVal) !== -1 &&\n                    numericTypes.indexOf(yVali) !== -1 && yVal !== yVali) {\n                // type is special - if we find a mixture of linear and log,\n                // coerce them all to linear on flipping\n                coerceLinearY = true;\n            }\n            else if(yFullAxes[j][keyi] !== yVal) allEqual = false;\n        }\n        if(allEqual) {\n            if(coerceLinearX) layout[xFullAxes[0]._name].type = 'linear';\n            if(coerceLinearY) layout[yFullAxes[0]._name].type = 'linear';\n            swapAxisAttrs(layout, keyi, xFullAxes, yFullAxes, gd._fullLayout._dfltTitle);\n        }\n    }\n\n    // now swap x&y for any annotations anchored to these x & y\n    for(i = 0; i < gd._fullLayout.annotations.length; i++) {\n        var ann = gd._fullLayout.annotations[i];\n        if(xIds.indexOf(ann.xref) !== -1 &&\n                yIds.indexOf(ann.yref) !== -1) {\n            Lib.swapAttrs(layout.annotations[i], ['?']);\n        }\n    }\n}\n\nfunction swapAxisAttrs(layout, key, xFullAxes, yFullAxes, dfltTitle) {\n    // in case the value is the default for either axis,\n    // look at the first axis in each list and see if\n    // this key's value is undefined\n    var np = Lib.nestedProperty,\n        xVal = np(layout[xFullAxes[0]._name], key).get(),\n        yVal = np(layout[yFullAxes[0]._name], key).get(),\n        i;\n    if(key === 'title') {\n        // special handling of placeholder titles\n        if(xVal === dfltTitle.x) {\n            xVal = dfltTitle.y;\n        }\n        if(yVal === dfltTitle.y) {\n            yVal = dfltTitle.x;\n        }\n    }\n\n    for(i = 0; i < xFullAxes.length; i++) {\n        np(layout, xFullAxes[i]._name + '.' + key).set(yVal);\n    }\n    for(i = 0; i < yFullAxes.length; i++) {\n        np(layout, yFullAxes[i]._name + '.' + key).set(xVal);\n    }\n}\n",null]}